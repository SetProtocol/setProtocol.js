"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __importStar(require("lodash"));
var setProtocolUtils = __importStar(require("set-protocol-utils"));
var set_protocol_utils_1 = require("set-protocol-utils");
var bignumber_js_1 = require("bignumber.js");
var units_1 = require("../units");
var contracts_1 = require("../contracts");
var constants_1 = require("../constants");
var web3Helper_1 = require("../web3Helper");
var web3 = web3Helper_1.getWeb3();
var ChainlinkAggregatorMock = web3Helper_1.importArtifactsFromSource('ChainlinkAggregatorMock');
var ChainlinkOracleAdapter = web3Helper_1.importArtifactsFromSource('ChainlinkOracleAdapter');
var ConstantPriceOracle = web3Helper_1.importArtifactsFromSource('ConstantPriceOracle');
var CTokenOracle = web3Helper_1.importArtifactsFromSource('CTokenOracle');
var DydxConstantPriceOracleMock = web3Helper_1.importArtifactsFromSource('DydxConstantPriceOracleMock');
var DydxOracleAdapter = web3Helper_1.importArtifactsFromSource('DydxOracleAdapter');
var EMAOracle = web3Helper_1.importArtifactsFromSource('EMAOracle');
var FeedFactory = web3Helper_1.importArtifactsFromSource('FeedFactory');
var HistoricalPriceFeed = web3Helper_1.importArtifactsFromSource('HistoricalPriceFeed');
var TwoAssetRatioOracle = web3Helper_1.importArtifactsFromSource('TwoAssetRatioOracle');
var LegacyMakerOracleAdapter = web3Helper_1.importArtifactsFromSource('LegacyMakerOracleAdapter');
var LinearizedEMATimeSeriesFeed = web3Helper_1.importArtifactsFromSource('LinearizedEMATimeSeriesFeed');
var LinearizedPriceDataSource = web3Helper_1.importArtifactsFromSource('LinearizedPriceDataSource');
var Median = web3Helper_1.importArtifactsFromSource('Median');
var MovingAverageOracle = web3Helper_1.importArtifactsFromSource('MovingAverageOracle');
var MovingAverageOracleV1Proxy = web3Helper_1.importArtifactsFromSource('MovingAverageOracleV1Proxy');
var MovingAverageOracleV2 = web3Helper_1.importArtifactsFromSource('MovingAverageOracleV2');
var OracleProxy = web3Helper_1.importArtifactsFromSource('OracleProxy');
var OracleProxyCaller = web3Helper_1.importArtifactsFromSource('OracleProxyCaller');
var RSIOracle = web3Helper_1.importArtifactsFromSource('RSIOracle');
var TimeSeriesFeed = web3Helper_1.importArtifactsFromSource('TimeSeriesFeed');
var TimeSeriesFeedV2Mock = web3Helper_1.importArtifactsFromSource('TimeSeriesFeedV2Mock');
var TwoAssetLinearizedTimeSeriesFeed = web3Helper_1.importArtifactsFromSource('TwoAssetLinearizedTimeSeriesFeed');
var UpdatableOracleMock = web3Helper_1.importArtifactsFromSource('UpdatableOracleMock');
var SetTestUtils = setProtocolUtils.SetProtocolTestUtils, SetUtils = setProtocolUtils.SetProtocolUtils;
var setTestUtils = new SetTestUtils(web3);
var setUtils = new SetUtils(web3);
var OracleHelper = /** @class */ (function () {
    function OracleHelper(contractOwnerAddress) {
        this._contractOwnerAddress = contractOwnerAddress;
        this._blockchain = new set_protocol_utils_1.Blockchain(web3);
    }
    /* ============ Deployment ============ */
    OracleHelper.prototype.deployUpdatableOracleMocksAsync = function (startingPrices, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var mockOracles, oraclePromises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mockOracles = [];
                        oraclePromises = _.map(startingPrices, function (price) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, UpdatableOracleMock.new(price, web3Helper_1.txnFrom(from))];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); });
                        return [4 /*yield*/, Promise.all(oraclePromises).then(function (oracles) {
                                _.each(oracles, function (oracleMock) {
                                    mockOracles.push(new contracts_1.UpdatableOracleMockContract(new web3.eth.Contract(oracleMock.abi, oracleMock.address), web3Helper_1.txnFrom(from)));
                                });
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, mockOracles];
                }
            });
        });
    };
    OracleHelper.prototype.deployUpdatableOracleMockAsync = function (price, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var oracleMock;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, UpdatableOracleMock.new(price, web3Helper_1.txnFrom(from))];
                    case 1:
                        oracleMock = _a.sent();
                        return [2 /*return*/, new contracts_1.UpdatableOracleMockContract(web3Helper_1.getContractInstance(oracleMock), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.getUpdatableOracleMockInstance = function (oracleAddress, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return new contracts_1.UpdatableOracleMockContract(web3Helper_1.getContractInstance(UpdatableOracleMock, oracleAddress), { from: from, gas: constants_1.DEFAULT_GAS });
    };
    OracleHelper.prototype.deployFeedFactoryAsync = function (from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var feedFactory;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, FeedFactory.new(web3Helper_1.txnFrom(from))];
                    case 1:
                        feedFactory = _a.sent();
                        return [2 /*return*/, new contracts_1.FeedFactoryContract(web3Helper_1.getContractInstance(feedFactory), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployPriceFeedAsync = function (feedFactory, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var txHash, logs, createLog, args;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, feedFactory.create.sendTransactionAsync(web3Helper_1.txnFrom(from))];
                    case 1:
                        txHash = _a.sent();
                        return [4 /*yield*/, setTestUtils.getLogsFromTxHash(txHash)];
                    case 2:
                        logs = _a.sent();
                        createLog = logs[logs.length - 1];
                        args = createLog.args;
                        return [4 /*yield*/, contracts_1.PriceFeedContract.at(args.feed, web3, web3Helper_1.txnFrom(from))];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OracleHelper.prototype.deployMedianizerAsync = function (from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var medianizer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Median.new(web3Helper_1.txnFrom(from))];
                    case 1:
                        medianizer = _a.sent();
                        return [2 /*return*/, new contracts_1.MedianContract(web3Helper_1.getContractInstance(medianizer), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployTimeSeriesFeedAsync = function (dataSourceAddress, seededValues, updateInterval, maxDataPoints, dataDescription, from) {
        if (updateInterval === void 0) { updateInterval = constants_1.ONE_DAY_IN_SECONDS; }
        if (maxDataPoints === void 0) { maxDataPoints = new bignumber_js_1.BigNumber(200); }
        if (dataDescription === void 0) { dataDescription = '200DailyETHPrice'; }
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var historicalPriceFeed;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TimeSeriesFeed.new(updateInterval, maxDataPoints, dataSourceAddress, dataDescription, seededValues, web3Helper_1.txnFrom(from))];
                    case 1:
                        historicalPriceFeed = _a.sent();
                        return [2 /*return*/, new contracts_1.TimeSeriesFeedContract(web3Helper_1.getContractInstance(historicalPriceFeed), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployTimeSeriesFeedV2MockAsync = function (seededValues, updateInterval, nextEarliestUpdate, maxDataPoints, from) {
        if (updateInterval === void 0) { updateInterval = constants_1.ONE_DAY_IN_SECONDS; }
        if (nextEarliestUpdate === void 0) { nextEarliestUpdate = SetTestUtils.generateTimestamp(updateInterval.toNumber() / 60); }
        if (maxDataPoints === void 0) { maxDataPoints = new bignumber_js_1.BigNumber(200); }
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var historicalPriceFeed;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TimeSeriesFeedV2Mock.new(updateInterval, nextEarliestUpdate, maxDataPoints, seededValues, web3Helper_1.txnFrom(from))];
                    case 1:
                        historicalPriceFeed = _a.sent();
                        return [2 /*return*/, new contracts_1.TimeSeriesFeedV2MockContract(web3Helper_1.getContractInstance(historicalPriceFeed), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployLinearizedPriceDataSourceAsync = function (medianizerInstance, updateTolerance, dataDescription, from) {
        if (updateTolerance === void 0) { updateTolerance = constants_1.ONE_DAY_IN_SECONDS; }
        if (dataDescription === void 0) { dataDescription = '200DailyETHPrice'; }
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var linearizedPriceDataSource;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, LinearizedPriceDataSource.new(updateTolerance, medianizerInstance, dataDescription, web3Helper_1.txnFrom(from))];
                    case 1:
                        linearizedPriceDataSource = _a.sent();
                        return [2 /*return*/, new contracts_1.LinearizedPriceDataSourceContract(web3Helper_1.getContractInstance(linearizedPriceDataSource), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployLinearizedEMATimeSeriesFeedAsync = function (medianizerInstance, emaTimePeriod, seededValues, interpolationThreshold, updateInterval, maxDataPoints, dataDescription, nextEarliestUpdate, from) {
        if (interpolationThreshold === void 0) { interpolationThreshold = constants_1.ONE_HOUR_IN_SECONDS.mul(3); }
        if (updateInterval === void 0) { updateInterval = constants_1.ONE_DAY_IN_SECONDS; }
        if (maxDataPoints === void 0) { maxDataPoints = new bignumber_js_1.BigNumber(200); }
        if (dataDescription === void 0) { dataDescription = '200DailyETHPrice'; }
        if (nextEarliestUpdate === void 0) { nextEarliestUpdate = SetTestUtils.generateTimestamp(updateInterval.toNumber() / 60); }
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var linearizedEMATimeSeriesFeed;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, LinearizedEMATimeSeriesFeed.new(updateInterval, nextEarliestUpdate, maxDataPoints, seededValues, emaTimePeriod, interpolationThreshold, medianizerInstance, dataDescription, web3Helper_1.txnFrom(from))];
                    case 1:
                        linearizedEMATimeSeriesFeed = _a.sent();
                        return [2 /*return*/, new contracts_1.LinearizedEMATimeSeriesFeedContract(web3Helper_1.getContractInstance(linearizedEMATimeSeriesFeed), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployHistoricalPriceFeedAsync = function (updateFrequency, medianizerAddress, dataDescription, seededValues, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var historicalPriceFeed;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, HistoricalPriceFeed.new(updateFrequency, medianizerAddress, dataDescription, seededValues, web3Helper_1.txnFrom(from))];
                    case 1:
                        historicalPriceFeed = _a.sent();
                        return [2 /*return*/, new contracts_1.HistoricalPriceFeedContract(web3Helper_1.getContractInstance(historicalPriceFeed), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployTwoAssetLinearizedTimeSeriesFeedAsync = function (baseMedianizerInstance, quoteMedianizerInstance, seededValues, interpolationThreshold, updateInterval, maxDataPoints, dataDescription, nextEarliestUpdate, from) {
        if (interpolationThreshold === void 0) { interpolationThreshold = constants_1.ONE_HOUR_IN_SECONDS.mul(3); }
        if (updateInterval === void 0) { updateInterval = constants_1.ONE_DAY_IN_SECONDS; }
        if (maxDataPoints === void 0) { maxDataPoints = new bignumber_js_1.BigNumber(200); }
        if (dataDescription === void 0) { dataDescription = '200DailyETHBTCPrice'; }
        if (nextEarliestUpdate === void 0) { nextEarliestUpdate = SetTestUtils.generateTimestamp(updateInterval.toNumber() / 60); }
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var twoAssetLinearizedTimeSeriesFeed;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TwoAssetLinearizedTimeSeriesFeed.new(updateInterval, nextEarliestUpdate, maxDataPoints, seededValues, interpolationThreshold, baseMedianizerInstance, quoteMedianizerInstance, dataDescription, web3Helper_1.txnFrom(from))];
                    case 1:
                        twoAssetLinearizedTimeSeriesFeed = _a.sent();
                        return [2 /*return*/, new contracts_1.TwoAssetLinearizedTimeSeriesFeedContract(web3Helper_1.getContractInstance(twoAssetLinearizedTimeSeriesFeed), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployTwoAssetRatioOracleAsync = function (baseMedianizerInstance, quoteMedianizerInstance, dataDescription, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var twoAssetRatioOracle;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TwoAssetRatioOracle.new(baseMedianizerInstance, quoteMedianizerInstance, dataDescription, web3Helper_1.txnFrom(from))];
                    case 1:
                        twoAssetRatioOracle = _a.sent();
                        return [2 /*return*/, new contracts_1.TwoAssetRatioOracleContract(web3Helper_1.getContractInstance(twoAssetRatioOracle), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployMovingAverageOracleAsync = function (priceFeedAddress, dataDescription, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var movingAverageOracle;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, MovingAverageOracle.new(priceFeedAddress, dataDescription, web3Helper_1.txnFrom(from))];
                    case 1:
                        movingAverageOracle = _a.sent();
                        return [2 /*return*/, new contracts_1.MovingAverageOracleContract(web3Helper_1.getContractInstance(movingAverageOracle), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployMovingAverageOracleV1ProxyAsync = function (metaOracle, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var movingAverageOracleProxy;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, MovingAverageOracleV1Proxy.new(metaOracle, web3Helper_1.txnFrom(from))];
                    case 1:
                        movingAverageOracleProxy = _a.sent();
                        return [2 /*return*/, new contracts_1.MovingAverageOracleV1ProxyContract(web3Helper_1.getContractInstance(movingAverageOracleProxy), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployMovingAverageOracleV2Async = function (timeSeriesFeedAddress, dataDescription, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var movingAverageOracle;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, MovingAverageOracleV2.new(timeSeriesFeedAddress, dataDescription, web3Helper_1.txnFrom(from))];
                    case 1:
                        movingAverageOracle = _a.sent();
                        return [2 /*return*/, new contracts_1.MovingAverageOracleV2Contract(web3Helper_1.getContractInstance(movingAverageOracle), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployEMAOracleAsync = function (timeSeriesFeedAddresses, timeSeriesFeedDays, dataDescription, from) {
        if (dataDescription === void 0) { dataDescription = 'ETH Daily EMA'; }
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var emaOracle;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, EMAOracle.new(timeSeriesFeedAddresses, timeSeriesFeedDays, dataDescription, web3Helper_1.txnFrom(from))];
                    case 1:
                        emaOracle = _a.sent();
                        return [2 /*return*/, new contracts_1.EMAOracleContract(web3Helper_1.getContractInstance(emaOracle), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployLegacyMakerOracleAdapterAsync = function (medianizerAddress, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var legacyMakerOracleAdapter;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, LegacyMakerOracleAdapter.new(medianizerAddress, web3Helper_1.txnFrom(from))];
                    case 1:
                        legacyMakerOracleAdapter = _a.sent();
                        return [2 /*return*/, new contracts_1.LegacyMakerOracleAdapterContract(web3Helper_1.getContractInstance(legacyMakerOracleAdapter), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployOracleProxyAsync = function (oracleAddress, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var oracleProxy;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, OracleProxy.new(oracleAddress, web3Helper_1.txnFrom(from))];
                    case 1:
                        oracleProxy = _a.sent();
                        return [2 /*return*/, new contracts_1.OracleProxyContract(web3Helper_1.getContractInstance(oracleProxy), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployConstantPriceOracleAsync = function (constantPrice, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var oracle;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, ConstantPriceOracle.new(constantPrice, web3Helper_1.txnFrom(from))];
                    case 1:
                        oracle = _a.sent();
                        return [2 /*return*/, new contracts_1.ConstantPriceOracleContract(web3Helper_1.getContractInstance(oracle), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployOracleProxyCallerAsync = function (oracleAddress, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var oracleProxy;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, OracleProxyCaller.new(oracleAddress, web3Helper_1.txnFrom(from))];
                    case 1:
                        oracleProxy = _a.sent();
                        return [2 /*return*/, new contracts_1.OracleProxyCallerContract(web3Helper_1.getContractInstance(oracleProxy), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployRSIOracleAsync = function (timeSeriesFeedAddress, dataDescription, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var rsiOracle;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, RSIOracle.new(timeSeriesFeedAddress, dataDescription, web3Helper_1.txnFrom(from))];
                    case 1:
                        rsiOracle = _a.sent();
                        return [2 /*return*/, new contracts_1.RSIOracleContract(web3Helper_1.getContractInstance(rsiOracle), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployCTokenOracleAsync = function (cToken, underlyingOracle, cTokenFullUnit, underlyingFullUnit, dataDescription, from) {
        if (dataDescription === void 0) { dataDescription = 'CToken'; }
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var cTokenOracle;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, CTokenOracle.new(cToken, underlyingOracle, cTokenFullUnit, underlyingFullUnit, dataDescription, web3Helper_1.txnFrom(from))];
                    case 1:
                        cTokenOracle = _a.sent();
                        return [2 /*return*/, new contracts_1.CTokenOracleContract(web3Helper_1.getContractInstance(cTokenOracle), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployDydxOracleAdapterAsync = function (dydxPriceOracleAddress, erc20TokenAddress, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var dydxOracleAdapter;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, DydxOracleAdapter.new(dydxPriceOracleAddress, erc20TokenAddress, web3Helper_1.txnFrom(from))];
                    case 1:
                        dydxOracleAdapter = _a.sent();
                        return [2 /*return*/, new contracts_1.DydxOracleAdapterContract(web3Helper_1.getContractInstance(dydxOracleAdapter), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployDydxConstantPriceOracleMockAsync = function (oracleValue, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var dydxConstantPriceOracleMock;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, DydxConstantPriceOracleMock.new(oracleValue, web3Helper_1.txnFrom(from))];
                    case 1:
                        dydxConstantPriceOracleMock = _a.sent();
                        return [2 /*return*/, new contracts_1.DydxConstantPriceOracleMockContract(web3Helper_1.getContractInstance(dydxConstantPriceOracleMock), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployChainlinkOracleAdapterAsync = function (oracle, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var oracleAdapter;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, ChainlinkOracleAdapter.new(oracle, web3Helper_1.txnFrom(from))];
                    case 1:
                        oracleAdapter = _a.sent();
                        return [2 /*return*/, new contracts_1.ChainlinkOracleAdapterContract(web3Helper_1.getContractInstance(oracleAdapter), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    OracleHelper.prototype.deployChainlinkAggregatorMockAsync = function (oracleValue, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var oracleAMock;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, ChainlinkAggregatorMock.new(oracleValue, web3Helper_1.txnFrom(from))];
                    case 1:
                        oracleAMock = _a.sent();
                        return [2 /*return*/, new contracts_1.ChainlinkAggregatorMockContract(web3Helper_1.getContractInstance(oracleAMock), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    /* ============ Transactions ============ */
    OracleHelper.prototype.addPriceFeedOwnerToMedianizer = function (medianizer, priceFeedSigner, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, medianizer.lift.sendTransactionAsync(priceFeedSigner, web3Helper_1.txnFrom(from))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OracleHelper.prototype.addAuthorizedAddressesToOracleProxy = function (oracleProxy, authorizedAddresses, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < authorizedAddresses.length)) return [3 /*break*/, 4];
                        return [4 /*yield*/, oracleProxy.addAuthorizedAddress.sendTransactionAsync(authorizedAddresses[i], web3Helper_1.txnFrom(from))];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    OracleHelper.prototype.setMedianizerMinimumQuorumAsync = function (medianizer, minimum, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, medianizer.setMin.sendTransactionAsync(new bignumber_js_1.BigNumber(minimum), web3Helper_1.txnFrom(from))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OracleHelper.prototype.updatePriceFeedAsync = function (priceFeed, price, timeStamp, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, priceFeed.poke.sendTransactionAsync(price, timeStamp, web3Helper_1.txnFrom(from))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /*
      This is disconnected from the v1 system where price feeds are updated first and then
      the medianizer reads from each price feed to determine the median. In the new system,
      The oracles are off chain, sign their price updates, and then send them all to the medianizer
      which now expects N (new prices, timestamps, signatures)
  
      Makes a number of assumptions:
      1. Price update is signed by ownerAccount
      2. Only one price is used to update the price
      3. Only one timestmap is used to update the timestamp
      4. Quorum on price feed is 1
      4. OwnerAccount is added as approved oracle on medianizer
    */
    OracleHelper.prototype.updateMedianizerPriceAsync = function (medianizer, price, timestamp, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var standardSignature, ecSignature;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        standardSignature = SetUtils.hashPriceFeedHex(price, timestamp);
                        return [4 /*yield*/, setUtils.signMessage(standardSignature, from)];
                    case 1:
                        ecSignature = _a.sent();
                        return [4 /*yield*/, medianizer.poke.sendTransactionAsync([price], [timestamp], [new bignumber_js_1.BigNumber(ecSignature.v)], [ecSignature.r], [ecSignature.s], web3Helper_1.txnFrom(from))];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    OracleHelper.prototype.updateTimeSeriesFeedAsync = function (timeSeriesFeed, medianizer, price, timestamp, from) {
        if (timestamp === void 0) { timestamp = constants_1.ONE_DAY_IN_SECONDS.mul(2).toNumber(); }
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._blockchain.increaseTimeAsync(constants_1.ONE_DAY_IN_SECONDS)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.updateMedianizerPriceAsync(medianizer, price, SetTestUtils.generateTimestamp(timestamp))];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, timeSeriesFeed.poke.sendTransactionAsync({ gas: constants_1.DEFAULT_GAS })];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    OracleHelper.prototype.batchUpdateTimeSeriesFeedAsync = function (timeSeriesFeed, medianizer, daysOfData, priceArray, from) {
        if (priceArray === void 0) { priceArray = undefined; }
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!priceArray) {
                            priceArray = Array.from({ length: daysOfData }, function () { return units_1.ether(Math.floor(Math.random() * 100) + 100); });
                        }
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < priceArray.length)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.updateTimeSeriesFeedAsync(timeSeriesFeed, medianizer, priceArray[i], constants_1.ONE_DAY_IN_SECONDS.mul(2 * i + 2).toNumber())];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, priceArray];
                }
            });
        });
    };
    OracleHelper.prototype.updateTwoAssetTimeSeriesFeedAsync = function (timeSeriesFeed, baseMedianizer, quoteMedianizer, basePrice, quotePrice, timestamp, from) {
        if (timestamp === void 0) { timestamp = constants_1.ONE_DAY_IN_SECONDS.mul(2).toNumber(); }
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._blockchain.increaseTimeAsync(constants_1.ONE_DAY_IN_SECONDS)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.updateMedianizerPriceAsync(baseMedianizer, basePrice, SetTestUtils.generateTimestamp(timestamp))];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.updateMedianizerPriceAsync(quoteMedianizer, quotePrice, SetTestUtils.generateTimestamp(timestamp))];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, timeSeriesFeed.poke.sendTransactionAsync({ gas: constants_1.DEFAULT_GAS })];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    OracleHelper.prototype.batchUpdateTwoAssetTimeSeriesFeedAsync = function (timeSeriesFeed, baseMedianizer, quoteMedianizer, daysOfData, basePriceArray, quotePriceArray, from) {
        if (basePriceArray === void 0) { basePriceArray = undefined; }
        if (quotePriceArray === void 0) { quotePriceArray = undefined; }
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var i, baseQuotePriceArray;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!basePriceArray) {
                            basePriceArray = Array.from({ length: daysOfData }, function () { return units_1.ether(Math.floor(Math.random() * 100) + 100); });
                        }
                        if (!quotePriceArray) {
                            quotePriceArray = Array.from({ length: daysOfData }, function () { return units_1.ether(Math.floor(Math.random() * 1000) + 8000); });
                        }
                        baseQuotePriceArray = [];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < daysOfData)) return [3 /*break*/, 4];
                        // Create ratio array
                        baseQuotePriceArray.push(basePriceArray[i]
                            .mul(Math.pow(10, 18))
                            .div(quotePriceArray[i])
                            .round(0, bignumber_js_1.BigNumber.ROUND_DOWN));
                        return [4 /*yield*/, this.updateTwoAssetTimeSeriesFeedAsync(timeSeriesFeed, baseMedianizer, quoteMedianizer, basePriceArray[i], quotePriceArray[i], constants_1.ONE_DAY_IN_SECONDS.mul(2 * i + 2).toNumber())];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, baseQuotePriceArray];
                }
            });
        });
    };
    OracleHelper.prototype.updateHistoricalPriceFeedAsync = function (dailyPriceFeed, medianizer, price, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var lastBlock;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._blockchain.increaseTimeAsync(constants_1.ONE_DAY_IN_SECONDS)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, web3.eth.getBlock('latest')];
                    case 2:
                        lastBlock = _a.sent();
                        return [4 /*yield*/, this.updateMedianizerPriceAsync(medianizer, price, lastBlock.timestamp + 1)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, dailyPriceFeed.poke.sendTransactionAsync({ gas: constants_1.DEFAULT_GAS })];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    OracleHelper.prototype.batchUpdateHistoricalPriceFeedAsync = function (dailyPriceFeed, medianizer, daysOfData, priceArray, from) {
        if (priceArray === void 0) { priceArray = undefined; }
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!priceArray) {
                            priceArray = Array.from({ length: daysOfData }, function () { return units_1.ether(Math.floor(Math.random() * 100) + 100); });
                        }
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < priceArray.length)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.updateHistoricalPriceFeedAsync(dailyPriceFeed, medianizer, priceArray[i])];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, priceArray];
                }
            });
        });
    };
    OracleHelper.prototype.batchCalculateEMA = function (startEMAValue, timePeriod, assetPriceArray) {
        var emaValues = [];
        var lastEMAValue = startEMAValue;
        for (var i = 0; i < assetPriceArray.length; i++) {
            emaValues.push(this.calculateEMA(lastEMAValue, timePeriod, assetPriceArray[i]));
            lastEMAValue = emaValues[i];
        }
        return emaValues;
    };
    /*
     * The EMA formula is the following:
     *
     * Weighted Multiplier = 2 / (timePeriod + 1)
     *
     * EMA = Price(Today) x Weighted Multiplier +
     *       EMA(Yesterday) -
     *       EMA(Yesterday) x Weighted Multiplier
     *
     * Our implementation is simplified to the following for efficiency:
     *
     * EMA = (Price(Today) * 2 + EMA(Yesterday) * (timePeriod - 1)) / (timePeriod + 1)
     *
     */
    OracleHelper.prototype.calculateEMA = function (previousEMAValue, timePeriod, currentAssetPrice) {
        var a = currentAssetPrice.mul(2);
        var b = previousEMAValue.mul(timePeriod.minus(1));
        var c = timePeriod.plus(1);
        return a.plus(b).div(c).round(0, 3);
    };
    /*
     * Calculates the new relative strength index value using
     * an array of prices.
     *
     * RSI = 100 − 100 /
     *       (1 + (Gain / Loss))
     *
     * Price Difference = Price(N) - Price(N-1) where N is number of days
     * Gain = Sum(Positive Price Difference)
     * Loss = -1 * Sum(Negative Price Difference)
     *
     *
     * Our implementation is simplified to the following for efficiency
     * RSI = (100 * SUM(Gain)) / (SUM(Loss) + SUM(Gain)
     */
    OracleHelper.prototype.calculateRSI = function (rsiDataArray) {
        var positiveDataSum = new bignumber_js_1.BigNumber(0);
        var negativeDataSum = new bignumber_js_1.BigNumber(0);
        for (var i = 1; i < rsiDataArray.length; i++) {
            if (rsiDataArray[i - 1].gte(rsiDataArray[i])) {
                positiveDataSum = positiveDataSum.add(rsiDataArray[i - 1]).sub(rsiDataArray[i]);
            }
            else {
                negativeDataSum = negativeDataSum.add(rsiDataArray[i]).sub(rsiDataArray[i - 1]);
            }
        }
        if (negativeDataSum.eq(0) && positiveDataSum.eq(0)) {
            negativeDataSum = new bignumber_js_1.BigNumber(1);
        }
        var bigHundred = new bignumber_js_1.BigNumber(100);
        var a = bigHundred.mul(positiveDataSum);
        var b = positiveDataSum.add(negativeDataSum);
        var c = a.div(b).round(0, bignumber_js_1.BigNumber.ROUND_DOWN);
        return c;
    };
    return OracleHelper;
}());
exports.OracleHelper = OracleHelper;
