import { Address } from 'set-protocol-utils';
import { BigNumber } from 'bignumber.js';
import { ChainlinkAggregatorMockContract, ChainlinkOracleAdapterContract, ConstantPriceOracleContract, CTokenOracleContract, DydxConstantPriceOracleMockContract, DydxOracleAdapterContract, EMAOracleContract, FeedFactoryContract, HistoricalPriceFeedContract, TwoAssetRatioOracleContract, LegacyMakerOracleAdapterContract, LinearizedEMATimeSeriesFeedContract, LinearizedPriceDataSourceContract, MedianContract, MovingAverageOracleContract, MovingAverageOracleV1ProxyContract, MovingAverageOracleV2Contract, OracleProxyCallerContract, OracleProxyContract, PriceFeedContract, RSIOracleContract, TimeSeriesFeedContract, TimeSeriesFeedV2Contract, TimeSeriesFeedV2MockContract, TwoAssetLinearizedTimeSeriesFeedContract, UpdatableOracleMockContract } from '../contracts';
export declare class OracleHelper {
    private _contractOwnerAddress;
    private _blockchain;
    constructor(contractOwnerAddress: Address);
    deployUpdatableOracleMocksAsync(startingPrices: BigNumber[], from?: Address): Promise<UpdatableOracleMockContract[]>;
    deployUpdatableOracleMockAsync(price: BigNumber, from?: Address): Promise<UpdatableOracleMockContract>;
    getUpdatableOracleMockInstance(oracleAddress: Address, from?: Address): UpdatableOracleMockContract;
    deployFeedFactoryAsync(from?: Address): Promise<FeedFactoryContract>;
    deployPriceFeedAsync(feedFactory: FeedFactoryContract, from?: Address): Promise<PriceFeedContract>;
    deployMedianizerAsync(from?: Address): Promise<MedianContract>;
    deployTimeSeriesFeedAsync(dataSourceAddress: Address, seededValues: BigNumber[], updateInterval?: BigNumber, maxDataPoints?: BigNumber, dataDescription?: string, from?: Address): Promise<TimeSeriesFeedContract>;
    deployTimeSeriesFeedV2MockAsync(seededValues: BigNumber[], updateInterval?: BigNumber, nextEarliestUpdate?: BigNumber, maxDataPoints?: BigNumber, from?: Address): Promise<TimeSeriesFeedV2MockContract>;
    deployLinearizedPriceDataSourceAsync(medianizerInstance: Address, updateTolerance?: BigNumber, dataDescription?: string, from?: Address): Promise<LinearizedPriceDataSourceContract>;
    deployLinearizedEMATimeSeriesFeedAsync(medianizerInstance: Address, emaTimePeriod: BigNumber, seededValues: BigNumber[], interpolationThreshold?: BigNumber, updateInterval?: BigNumber, maxDataPoints?: BigNumber, dataDescription?: string, nextEarliestUpdate?: BigNumber, from?: Address): Promise<LinearizedEMATimeSeriesFeedContract>;
    deployHistoricalPriceFeedAsync(updateFrequency: BigNumber, medianizerAddress: Address, dataDescription: string, seededValues: BigNumber[], from?: Address): Promise<HistoricalPriceFeedContract>;
    deployTwoAssetLinearizedTimeSeriesFeedAsync(baseMedianizerInstance: Address, quoteMedianizerInstance: Address, seededValues: BigNumber[], interpolationThreshold?: BigNumber, updateInterval?: BigNumber, maxDataPoints?: BigNumber, dataDescription?: string, nextEarliestUpdate?: BigNumber, from?: Address): Promise<TwoAssetLinearizedTimeSeriesFeedContract>;
    deployTwoAssetRatioOracleAsync(baseMedianizerInstance: Address, quoteMedianizerInstance: Address, dataDescription: string, from?: Address): Promise<TwoAssetRatioOracleContract>;
    deployMovingAverageOracleAsync(priceFeedAddress: Address, dataDescription: string, from?: Address): Promise<MovingAverageOracleContract>;
    deployMovingAverageOracleV1ProxyAsync(metaOracle: Address, from?: Address): Promise<MovingAverageOracleV1ProxyContract>;
    deployMovingAverageOracleV2Async(timeSeriesFeedAddress: Address, dataDescription: string, from?: Address): Promise<MovingAverageOracleV2Contract>;
    deployEMAOracleAsync(timeSeriesFeedAddresses: Address[], timeSeriesFeedDays: BigNumber[], dataDescription?: string, from?: Address): Promise<EMAOracleContract>;
    deployLegacyMakerOracleAdapterAsync(medianizerAddress: Address, from?: Address): Promise<LegacyMakerOracleAdapterContract>;
    deployOracleProxyAsync(oracleAddress: Address, from?: Address): Promise<OracleProxyContract>;
    deployConstantPriceOracleAsync(constantPrice: BigNumber, from?: Address): Promise<ConstantPriceOracleContract>;
    deployOracleProxyCallerAsync(oracleAddress: Address, from?: Address): Promise<OracleProxyCallerContract>;
    deployRSIOracleAsync(timeSeriesFeedAddress: Address, dataDescription: string, from?: Address): Promise<RSIOracleContract>;
    deployCTokenOracleAsync(cToken: Address, underlyingOracle: Address, cTokenFullUnit: BigNumber, underlyingFullUnit: BigNumber, dataDescription?: string, from?: Address): Promise<CTokenOracleContract>;
    deployDydxOracleAdapterAsync(dydxPriceOracleAddress: Address, erc20TokenAddress: Address, from?: Address): Promise<DydxOracleAdapterContract>;
    deployDydxConstantPriceOracleMockAsync(oracleValue: BigNumber, from?: Address): Promise<DydxConstantPriceOracleMockContract>;
    deployChainlinkOracleAdapterAsync(oracle: Address, from?: Address): Promise<ChainlinkOracleAdapterContract>;
    deployChainlinkAggregatorMockAsync(oracleValue: BigNumber, from?: Address): Promise<ChainlinkAggregatorMockContract>;
    addPriceFeedOwnerToMedianizer(medianizer: MedianContract, priceFeedSigner: Address, from?: Address): Promise<string>;
    addAuthorizedAddressesToOracleProxy(oracleProxy: OracleProxyContract, authorizedAddresses: Address[], from?: Address): Promise<void>;
    setMedianizerMinimumQuorumAsync(medianizer: MedianContract, minimum: number, from?: Address): Promise<string>;
    updatePriceFeedAsync(priceFeed: PriceFeedContract, price: BigNumber, timeStamp: BigNumber, from?: Address): Promise<string>;
    updateMedianizerPriceAsync(medianizer: MedianContract, price: BigNumber, timestamp: BigNumber, from?: Address): Promise<string>;
    updateTimeSeriesFeedAsync(timeSeriesFeed: TimeSeriesFeedContract | TimeSeriesFeedV2Contract, medianizer: MedianContract, price: BigNumber, timestamp?: number, from?: Address): Promise<void>;
    batchUpdateTimeSeriesFeedAsync(timeSeriesFeed: TimeSeriesFeedContract | TimeSeriesFeedV2Contract, medianizer: MedianContract, daysOfData: number, priceArray?: BigNumber[], from?: Address): Promise<BigNumber[]>;
    updateTwoAssetTimeSeriesFeedAsync(timeSeriesFeed: TimeSeriesFeedContract | TimeSeriesFeedV2Contract, baseMedianizer: MedianContract, quoteMedianizer: MedianContract, basePrice: BigNumber, quotePrice: BigNumber, timestamp?: number, from?: Address): Promise<void>;
    batchUpdateTwoAssetTimeSeriesFeedAsync(timeSeriesFeed: TimeSeriesFeedContract | TimeSeriesFeedV2Contract, baseMedianizer: MedianContract, quoteMedianizer: MedianContract, daysOfData: number, basePriceArray?: BigNumber[], quotePriceArray?: BigNumber[], from?: Address): Promise<BigNumber[]>;
    updateHistoricalPriceFeedAsync(dailyPriceFeed: HistoricalPriceFeedContract, medianizer: MedianContract, price: BigNumber, from?: Address): Promise<void>;
    batchUpdateHistoricalPriceFeedAsync(dailyPriceFeed: HistoricalPriceFeedContract, medianizer: MedianContract, daysOfData: number, priceArray?: BigNumber[], from?: Address): Promise<BigNumber[]>;
    batchCalculateEMA(startEMAValue: BigNumber, timePeriod: BigNumber, assetPriceArray: BigNumber[]): BigNumber[];
    calculateEMA(previousEMAValue: BigNumber, timePeriod: BigNumber, currentAssetPrice: BigNumber): BigNumber;
    calculateRSI(rsiDataArray: BigNumber[]): BigNumber;
}
