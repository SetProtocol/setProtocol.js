import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber, UInt } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class PriceFeedContract extends BaseContract {
    setOwner: {
        sendTransactionAsync(owner_: string, txData?: Tx): Promise<string>;
        estimateGasAsync(owner_: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(owner_: string, txData?: Tx): string;
        callAsync(owner_: string, txData?: Tx): Promise<void>;
    };
    setAuthority: {
        sendTransactionAsync(authority_: string, txData?: Tx): Promise<string>;
        estimateGasAsync(authority_: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(authority_: string, txData?: Tx): string;
        callAsync(authority_: string, txData?: Tx): Promise<void>;
    };
    owner: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    zzz: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    authority: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    peek: {
        callAsync(defaultBlock?: any): Promise<[string, boolean]>;
    };
    read: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    poke: {
        sendTransactionAsync(val_: BigNumber, zzz_: UInt, txData?: Tx): Promise<string>;
        estimateGasAsync(val_: BigNumber, zzz_: UInt, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(val_: BigNumber, zzz_: UInt, txData?: Tx): string;
        callAsync(val_: BigNumber, zzz_: UInt, txData?: Tx): Promise<void>;
    };
    post: {
        sendTransactionAsync(val_: BigNumber, zzz_: UInt, med_: string, txData?: Tx): Promise<string>;
        estimateGasAsync(val_: BigNumber, zzz_: UInt, med_: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(val_: BigNumber, zzz_: UInt, med_: string, txData?: Tx): string;
        callAsync(val_: BigNumber, zzz_: UInt, med_: string, txData?: Tx): Promise<void>;
    };
    void: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<PriceFeedContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<PriceFeedContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
