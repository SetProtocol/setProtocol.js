import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber, UInt } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class MedianContract extends BaseContract {
    orcl: {
        callAsync(index_0: string, defaultBlock?: any): Promise<boolean>;
    };
    setOwner: {
        sendTransactionAsync(owner_: string, txData?: Tx): Promise<string>;
        estimateGasAsync(owner_: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(owner_: string, txData?: Tx): string;
        callAsync(owner_: string, txData?: Tx): Promise<void>;
    };
    age: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    wat: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    setAuthority: {
        sendTransactionAsync(authority_: string, txData?: Tx): Promise<string>;
        estimateGasAsync(authority_: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(authority_: string, txData?: Tx): string;
        callAsync(authority_: string, txData?: Tx): Promise<void>;
    };
    owner: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    authority: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    min: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    read: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    peek: {
        callAsync(defaultBlock?: any): Promise<[string, boolean]>;
    };
    poke: {
        sendTransactionAsync(val_: BigNumber[], age_: BigNumber[], v: UInt[], r: string[], s: string[], txData?: Tx): Promise<string>;
        estimateGasAsync(val_: BigNumber[], age_: BigNumber[], v: UInt[], r: string[], s: string[], txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(val_: BigNumber[], age_: BigNumber[], v: UInt[], r: string[], s: string[], txData?: Tx): string;
        callAsync(val_: BigNumber[], age_: BigNumber[], v: UInt[], r: string[], s: string[], txData?: Tx): Promise<void>;
    };
    lift: {
        sendTransactionAsync(a: string, txData?: Tx): Promise<string>;
        estimateGasAsync(a: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(a: string, txData?: Tx): string;
        callAsync(a: string, txData?: Tx): Promise<void>;
    };
    drop: {
        sendTransactionAsync(a: string, txData?: Tx): Promise<string>;
        estimateGasAsync(a: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(a: string, txData?: Tx): string;
        callAsync(a: string, txData?: Tx): Promise<void>;
    };
    setMin: {
        sendTransactionAsync(min_: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(min_: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(min_: BigNumber, txData?: Tx): string;
        callAsync(min_: BigNumber, txData?: Tx): Promise<void>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<MedianContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<MedianContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
