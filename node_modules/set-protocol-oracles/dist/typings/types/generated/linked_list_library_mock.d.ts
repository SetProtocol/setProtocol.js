import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class LinkedListLibraryMockContract extends BaseContract {
    initializeMock: {
        sendTransactionAsync(_dataSizeLimit: BigNumber, _initialValue: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_dataSizeLimit: BigNumber, _initialValue: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_dataSizeLimit: BigNumber, _initialValue: BigNumber, txData?: Tx): string;
        callAsync(_dataSizeLimit: BigNumber, _initialValue: BigNumber, txData?: Tx): Promise<void>;
    };
    editListMock: {
        sendTransactionAsync(_addedValue: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_addedValue: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_addedValue: BigNumber, txData?: Tx): string;
        callAsync(_addedValue: BigNumber, txData?: Tx): Promise<void>;
    };
    addNodeMock: {
        sendTransactionAsync(_addedValue: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_addedValue: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_addedValue: BigNumber, txData?: Tx): string;
        callAsync(_addedValue: BigNumber, txData?: Tx): Promise<void>;
    };
    updateNodeMock: {
        sendTransactionAsync(_addedValue: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_addedValue: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_addedValue: BigNumber, txData?: Tx): string;
        callAsync(_addedValue: BigNumber, txData?: Tx): Promise<void>;
    };
    readListMock: {
        sendTransactionAsync(_dataPoints: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_dataPoints: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_dataPoints: BigNumber, txData?: Tx): string;
        callAsync(_dataPoints: BigNumber, txData?: Tx): Promise<BigNumber[]>;
    };
    addBadValue: {
        sendTransactionAsync(_badValue: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_badValue: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_badValue: BigNumber, txData?: Tx): string;
        callAsync(_badValue: BigNumber, txData?: Tx): Promise<void>;
    };
    getDataSizeLimit: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    getLastUpdatedIndex: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    getDataArray: {
        callAsync(defaultBlock?: any): Promise<BigNumber[]>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<LinkedListLibraryMockContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<LinkedListLibraryMockContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
