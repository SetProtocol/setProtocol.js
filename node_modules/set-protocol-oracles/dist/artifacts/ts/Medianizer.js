"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.Medianizer={contractName:"Medianizer",abi:[{constant:false,inputs:[],name:"poke",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"}],metadata:'{"compiler":{"version":"0.5.7+commit.6da8b019"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"poke","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"/Users/justin_chen/Dropbox/workspace/set-protocol-oracles/contracts/external/DappHub/price-feed.sol":"Medianizer"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"/Users/justin_chen/Dropbox/workspace/set-protocol-oracles/contracts/external/DappHub/auth.sol":{"keccak256":"0xa4572272098908e6e1dd27a74ee075da6ae253533a3a1d9dbf84a91c79a62727","urls":["bzzr://c751a479357c4c1a4e8d0187129ce8e3429e907d7f748b91d29e77762df4aee1"]},"/Users/justin_chen/Dropbox/workspace/set-protocol-oracles/contracts/external/DappHub/math.sol":{"keccak256":"0x6f5d378a268fc55de30d9c455f5207c11187c566935185a8e3176a0f4dfe210d","urls":["bzzr://0a91fc9d15701874186392f0a239324476c420360eafe823d9a939a28a69bbfb"]},"/Users/justin_chen/Dropbox/workspace/set-protocol-oracles/contracts/external/DappHub/note.sol":{"keccak256":"0x094612046e37156ae35aab8d3f3b142b1adedff03896135c81dac2d7a6bb2186","urls":["bzzr://f0fbfada60d6ab1c6cf73fabb6c0c9bce2cd04a1e89b4c93fdaa0df1dcfc5508"]},"/Users/justin_chen/Dropbox/workspace/set-protocol-oracles/contracts/external/DappHub/price-feed.sol":{"keccak256":"0xb9134c5f56d4db4fcf25649777c5ade5e09c46ec0c84593d3a7e2c3e0b618b5b","urls":["bzzr://d127b8783a68e63d0aac60af4612b14eeb8c50ac711924fd0a75cd301061476b"]},"/Users/justin_chen/Dropbox/workspace/set-protocol-oracles/contracts/external/DappHub/thing.sol":{"keccak256":"0x713284b03a9778689299a2d5d2cfa03b161500e540fa9d1a015e425fa3962a0f","urls":["bzzr://2dba919f623dcb6e6527ca32143ba2d31dc0e9af7985bd381cdc64bf9a8f0f58"]}},"version":1}',bytecode:"0x",deployedBytecode:"0x",sourceMap:"",deployedSourceMap:"",source:'/// price-feed.sol - ds-value like that also pokes a medianizer\n\n// Copyright (C) 2017, 2018  DappHub, LLC\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.5.7;\n\nimport "./thing.sol";\n\ninterface Medianizer {\n    function poke() external;\n}\n\ncontract PriceFeed is DSThing {\n\n    uint128       val;\n    uint32 public zzz;\n\n    function peek() external view returns (bytes32,bool)\n    {\n        return (bytes32(uint256(val)), now < zzz);\n    }\n\n    function read() external view returns (bytes32)\n    {\n        require(now < zzz);\n        return bytes32(uint256(val));\n    }\n\n    function poke(uint128 val_, uint32 zzz_) external note auth\n    {\n        val = val_;\n        zzz = zzz_;\n    }\n\n    function post(uint128 val_, uint32 zzz_, Medianizer med_) external note auth\n    {\n        val = val_;\n        zzz = zzz_;\n        med_.poke();\n    }\n\n    function void() external note auth\n    {\n        zzz = 0;\n    }\n\n}\n',sourcePath:"/Users/justin_chen/Dropbox/workspace/set-protocol-oracles/contracts/external/DappHub/price-feed.sol",compiler:{name:"solc",version:"0.5.7+commit.6da8b019.Linux.g++"},networks:{},schemaVersion:"3.0.16",updatedAt:"2020-05-04T02:38:52.149Z",devdoc:{methods:{}},userdoc:{methods:{}}};