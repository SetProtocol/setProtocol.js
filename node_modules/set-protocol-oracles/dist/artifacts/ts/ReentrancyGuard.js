"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.ReentrancyGuard={contractName:"ReentrancyGuard",abi:[{inputs:[],payable:false,stateMutability:"nonpayable",type:"constructor"}],metadata:'{"compiler":{"version":"0.5.7+commit.6da8b019"},"language":"Solidity","output":{"abi":[{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}],"devdoc":{"author":"Remco Bloemen <remco@2\\u03c0.com>, Eenae <alexey@mixbytes.io>","details":"If you mark a function `nonReentrant`, you should also mark it `external`.","methods":{},"title":"Helps contracts guard against reentrancy attacks."},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol":"ReentrancyGuard"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0x080fa336eb92fca1f96bf5c7738b6ef6e23582809d81868e9498c08e1207c125","urls":["bzzr://3bc299fd722679f1313dc1387e2efc0591dcddc3727b6a7ccc98132c6e02f323"]}},"version":1}',bytecode:"0x",deployedBytecode:"0x",sourceMap:"",deployedSourceMap:"",source:"pragma solidity ^0.5.2;\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n    /// @dev counter to allow mutex lock with only one SSTORE operation\n    uint256 private _guardCounter;\n\n    constructor () internal {\n        // The counter starts at one to prevent changing it from zero to a non-zero\n        // value, which is a more expensive operation.\n        _guardCounter = 1;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _guardCounter += 1;\n        uint256 localCounter = _guardCounter;\n        _;\n        require(localCounter == _guardCounter);\n    }\n}\n",sourcePath:"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol",ast:{absolutePath:"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol",exportedSymbols:{ReentrancyGuard:[6993]},id:6994,nodeType:"SourceUnit",nodes:[{id:6964,literals:["solidity","^","0.5",".2"],nodeType:"PragmaDirective",src:"0:23:70"},{baseContracts:[],contractDependencies:[],contractKind:"contract",documentation:"@title Helps contracts guard against reentrancy attacks.\n@author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\n@dev If you mark a function `nonReentrant`, you should also\nmark it `external`.",fullyImplemented:true,id:6993,linearizedBaseContracts:[6993],name:"ReentrancyGuard",nodeType:"ContractDefinition",nodes:[{constant:false,id:6966,name:"_guardCounter",nodeType:"VariableDeclaration",scope:6993,src:"351:29:70",stateVariable:true,storageLocation:"default",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"},typeName:{id:6965,name:"uint256",nodeType:"ElementaryTypeName",src:"351:7:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},value:null,visibility:"private"},{body:{id:6973,nodeType:"Block",src:"411:173:70",statements:[{expression:{argumentTypes:null,id:6971,isConstant:false,isLValue:false,isPure:false,lValueRequested:false,leftHandSide:{argumentTypes:null,id:6969,name:"_guardCounter",nodeType:"Identifier",overloadedDeclarations:[],referencedDeclaration:6966,src:"560:13:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},nodeType:"Assignment",operator:"=",rightHandSide:{argumentTypes:null,hexValue:"31",id:6970,isConstant:false,isLValue:false,isPure:true,kind:"number",lValueRequested:false,nodeType:"Literal",src:"576:1:70",subdenomination:null,typeDescriptions:{typeIdentifier:"t_rational_1_by_1",typeString:"int_const 1"},value:"1"},src:"560:17:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},id:6972,nodeType:"ExpressionStatement",src:"560:17:70"}]},documentation:null,id:6974,implemented:true,kind:"constructor",modifiers:[],name:"",nodeType:"FunctionDefinition",parameters:{id:6967,nodeType:"ParameterList",parameters:[],src:"399:2:70"},returnParameters:{id:6968,nodeType:"ParameterList",parameters:[],src:"411:0:70"},scope:6993,src:"387:197:70",stateMutability:"nonpayable",superFunction:null,visibility:"internal"},{body:{id:6991,nodeType:"Block",src:"983:140:70",statements:[{expression:{argumentTypes:null,id:6978,isConstant:false,isLValue:false,isPure:false,lValueRequested:false,leftHandSide:{argumentTypes:null,id:6976,name:"_guardCounter",nodeType:"Identifier",overloadedDeclarations:[],referencedDeclaration:6966,src:"993:13:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},nodeType:"Assignment",operator:"+=",rightHandSide:{argumentTypes:null,hexValue:"31",id:6977,isConstant:false,isLValue:false,isPure:true,kind:"number",lValueRequested:false,nodeType:"Literal",src:"1010:1:70",subdenomination:null,typeDescriptions:{typeIdentifier:"t_rational_1_by_1",typeString:"int_const 1"},value:"1"},src:"993:18:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},id:6979,nodeType:"ExpressionStatement",src:"993:18:70"},{assignments:[6981],declarations:[{constant:false,id:6981,name:"localCounter",nodeType:"VariableDeclaration",scope:6991,src:"1021:20:70",stateVariable:false,storageLocation:"default",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"},typeName:{id:6980,name:"uint256",nodeType:"ElementaryTypeName",src:"1021:7:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},value:null,visibility:"internal"}],id:6983,initialValue:{argumentTypes:null,id:6982,name:"_guardCounter",nodeType:"Identifier",overloadedDeclarations:[],referencedDeclaration:6966,src:"1044:13:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},nodeType:"VariableDeclarationStatement",src:"1021:36:70"},{id:6984,nodeType:"PlaceholderStatement",src:"1067:1:70"},{expression:{argumentTypes:null,arguments:[{argumentTypes:null,commonType:{typeIdentifier:"t_uint256",typeString:"uint256"},id:6988,isConstant:false,isLValue:false,isPure:false,lValueRequested:false,leftExpression:{argumentTypes:null,id:6986,name:"localCounter",nodeType:"Identifier",overloadedDeclarations:[],referencedDeclaration:6981,src:"1086:12:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},nodeType:"BinaryOperation",operator:"==",rightExpression:{argumentTypes:null,id:6987,name:"_guardCounter",nodeType:"Identifier",overloadedDeclarations:[],referencedDeclaration:6966,src:"1102:13:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},src:"1086:29:70",typeDescriptions:{typeIdentifier:"t_bool",typeString:"bool"}}],expression:{argumentTypes:[{typeIdentifier:"t_bool",typeString:"bool"}],id:6985,name:"require",nodeType:"Identifier",overloadedDeclarations:[7011,7012],referencedDeclaration:7011,src:"1078:7:70",typeDescriptions:{typeIdentifier:"t_function_require_pure$_t_bool_$returns$__$",typeString:"function (bool) pure"}},id:6989,isConstant:false,isLValue:false,isPure:false,kind:"functionCall",lValueRequested:false,names:[],nodeType:"FunctionCall",src:"1078:38:70",typeDescriptions:{typeIdentifier:"t_tuple$__$",typeString:"tuple()"}},id:6990,nodeType:"ExpressionStatement",src:"1078:38:70"}]},documentation:"@dev Prevents a contract from calling itself, directly or indirectly.\nCalling a `nonReentrant` function from another `nonReentrant`\nfunction is not supported. It is possible to prevent this from happening\nby making the `nonReentrant` function external, and make it call a\n`private` function that does the actual work.",id:6992,name:"nonReentrant",nodeType:"ModifierDefinition",parameters:{id:6975,nodeType:"ParameterList",parameters:[],src:"980:2:70"},src:"959:164:70",visibility:"internal"}],scope:6994,src:"248:877:70"}],src:"0:1126:70"},legacyAST:{absolutePath:"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol",exportedSymbols:{ReentrancyGuard:[6993]},id:6994,nodeType:"SourceUnit",nodes:[{id:6964,literals:["solidity","^","0.5",".2"],nodeType:"PragmaDirective",src:"0:23:70"},{baseContracts:[],contractDependencies:[],contractKind:"contract",documentation:"@title Helps contracts guard against reentrancy attacks.\n@author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\n@dev If you mark a function `nonReentrant`, you should also\nmark it `external`.",fullyImplemented:true,id:6993,linearizedBaseContracts:[6993],name:"ReentrancyGuard",nodeType:"ContractDefinition",nodes:[{constant:false,id:6966,name:"_guardCounter",nodeType:"VariableDeclaration",scope:6993,src:"351:29:70",stateVariable:true,storageLocation:"default",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"},typeName:{id:6965,name:"uint256",nodeType:"ElementaryTypeName",src:"351:7:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},value:null,visibility:"private"},{body:{id:6973,nodeType:"Block",src:"411:173:70",statements:[{expression:{argumentTypes:null,id:6971,isConstant:false,isLValue:false,isPure:false,lValueRequested:false,leftHandSide:{argumentTypes:null,id:6969,name:"_guardCounter",nodeType:"Identifier",overloadedDeclarations:[],referencedDeclaration:6966,src:"560:13:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},nodeType:"Assignment",operator:"=",rightHandSide:{argumentTypes:null,hexValue:"31",id:6970,isConstant:false,isLValue:false,isPure:true,kind:"number",lValueRequested:false,nodeType:"Literal",src:"576:1:70",subdenomination:null,typeDescriptions:{typeIdentifier:"t_rational_1_by_1",typeString:"int_const 1"},value:"1"},src:"560:17:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},id:6972,nodeType:"ExpressionStatement",src:"560:17:70"}]},documentation:null,id:6974,implemented:true,kind:"constructor",modifiers:[],name:"",nodeType:"FunctionDefinition",parameters:{id:6967,nodeType:"ParameterList",parameters:[],src:"399:2:70"},returnParameters:{id:6968,nodeType:"ParameterList",parameters:[],src:"411:0:70"},scope:6993,src:"387:197:70",stateMutability:"nonpayable",superFunction:null,visibility:"internal"},{body:{id:6991,nodeType:"Block",src:"983:140:70",statements:[{expression:{argumentTypes:null,id:6978,isConstant:false,isLValue:false,isPure:false,lValueRequested:false,leftHandSide:{argumentTypes:null,id:6976,name:"_guardCounter",nodeType:"Identifier",overloadedDeclarations:[],referencedDeclaration:6966,src:"993:13:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},nodeType:"Assignment",operator:"+=",rightHandSide:{argumentTypes:null,hexValue:"31",id:6977,isConstant:false,isLValue:false,isPure:true,kind:"number",lValueRequested:false,nodeType:"Literal",src:"1010:1:70",subdenomination:null,typeDescriptions:{typeIdentifier:"t_rational_1_by_1",typeString:"int_const 1"},value:"1"},src:"993:18:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},id:6979,nodeType:"ExpressionStatement",src:"993:18:70"},{assignments:[6981],declarations:[{constant:false,id:6981,name:"localCounter",nodeType:"VariableDeclaration",scope:6991,src:"1021:20:70",stateVariable:false,storageLocation:"default",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"},typeName:{id:6980,name:"uint256",nodeType:"ElementaryTypeName",src:"1021:7:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},value:null,visibility:"internal"}],id:6983,initialValue:{argumentTypes:null,id:6982,name:"_guardCounter",nodeType:"Identifier",overloadedDeclarations:[],referencedDeclaration:6966,src:"1044:13:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},nodeType:"VariableDeclarationStatement",src:"1021:36:70"},{id:6984,nodeType:"PlaceholderStatement",src:"1067:1:70"},{expression:{argumentTypes:null,arguments:[{argumentTypes:null,commonType:{typeIdentifier:"t_uint256",typeString:"uint256"},id:6988,isConstant:false,isLValue:false,isPure:false,lValueRequested:false,leftExpression:{argumentTypes:null,id:6986,name:"localCounter",nodeType:"Identifier",overloadedDeclarations:[],referencedDeclaration:6981,src:"1086:12:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},nodeType:"BinaryOperation",operator:"==",rightExpression:{argumentTypes:null,id:6987,name:"_guardCounter",nodeType:"Identifier",overloadedDeclarations:[],referencedDeclaration:6966,src:"1102:13:70",typeDescriptions:{typeIdentifier:"t_uint256",typeString:"uint256"}},src:"1086:29:70",typeDescriptions:{typeIdentifier:"t_bool",typeString:"bool"}}],expression:{argumentTypes:[{typeIdentifier:"t_bool",typeString:"bool"}],id:6985,name:"require",nodeType:"Identifier",overloadedDeclarations:[7011,7012],referencedDeclaration:7011,src:"1078:7:70",typeDescriptions:{typeIdentifier:"t_function_require_pure$_t_bool_$returns$__$",typeString:"function (bool) pure"}},id:6989,isConstant:false,isLValue:false,isPure:false,kind:"functionCall",lValueRequested:false,names:[],nodeType:"FunctionCall",src:"1078:38:70",typeDescriptions:{typeIdentifier:"t_tuple$__$",typeString:"tuple()"}},id:6990,nodeType:"ExpressionStatement",src:"1078:38:70"}]},documentation:"@dev Prevents a contract from calling itself, directly or indirectly.\nCalling a `nonReentrant` function from another `nonReentrant`\nfunction is not supported. It is possible to prevent this from happening\nby making the `nonReentrant` function external, and make it call a\n`private` function that does the actual work.",id:6992,name:"nonReentrant",nodeType:"ModifierDefinition",parameters:{id:6975,nodeType:"ParameterList",parameters:[],src:"980:2:70"},src:"959:164:70",visibility:"internal"}],scope:6994,src:"248:877:70"}],src:"0:1126:70"},compiler:{name:"solc",version:"0.5.7+commit.6da8b019.Linux.g++"},networks:{},schemaVersion:"3.0.16",updatedAt:"2020-04-01T03:46:40.082Z",devdoc:{author:"Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>",details:"If you mark a function `nonReentrant`, you should also mark it `external`.",methods:{},title:"Helps contracts guard against reentrancy attacks."},userdoc:{methods:{}}};