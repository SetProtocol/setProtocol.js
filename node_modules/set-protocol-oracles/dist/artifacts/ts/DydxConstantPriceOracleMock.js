"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.DydxConstantPriceOracleMock={contractName:"DydxConstantPriceOracleMock",abi:[{constant:true,inputs:[],name:"oracleValue",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{inputs:[{name:"_oracleValue",type:"uint256"}],payable:false,stateMutability:"nonpayable",type:"constructor"},{constant:false,inputs:[{name:"_newOracleValue",type:"uint256"}],name:"changeOracleValue",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"",type:"address"}],name:"getPrice",outputs:[{components:[{name:"value",type:"uint256"}],name:"",type:"tuple"}],payable:false,stateMutability:"view",type:"function"}],metadata:'{"compiler":{"version":"0.5.7+commit.6da8b019"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"oracleValue","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"getPrice","outputs":[{"components":[{"name":"value","type":"uint256"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_newOracleValue","type":"uint256"}],"name":"changeOracleValue","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_oracleValue","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}],"devdoc":{"author":"Set Protocol * Mock contract that implements a dYdX price oracle interface used for testing","methods":{},"title":"DydxConstantPriceOracleMock"},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"/Users/justin_chen/Dropbox/workspace/set-protocol-oracles/contracts/mocks/DydxConstantPriceOracleMock.sol":"DydxConstantPriceOracleMock"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"/Users/justin_chen/Dropbox/workspace/set-protocol-oracles/contracts/external/Dydx/interfaces/IDydxPriceOracle.sol":{"keccak256":"0x9bf8e06d7e76e7ccb97dbf5736b4a99b4e189cf1a0fdb51f9a1b90e285aad1a6","urls":["bzzr://dab01d290a793a5a2844ea3633234b68f29592213991ba1813ceae16b3a9ea4d"]},"/Users/justin_chen/Dropbox/workspace/set-protocol-oracles/contracts/external/Dydx/lib/Monetary.sol":{"keccak256":"0xf8b3761cbdf861a56c99c59dbf0ec5f357b3b2ddb973face0dbc6e612808bd71","urls":["bzzr://e927b7e6f880f8cacd52869493e629365a958e68c41eabb57ea5ecc5705c3d81"]},"/Users/justin_chen/Dropbox/workspace/set-protocol-oracles/contracts/mocks/DydxConstantPriceOracleMock.sol":{"keccak256":"0xa2694069527318d220a7b3cc96c07d2ed7a1cb3f439afbadf24b95484a6e341b","urls":["bzzr://60d2127a479849ea13ab62698e11cb1861207a69f28ab29c66316be70be74626"]}},"version":1}',bytecode:"0x608060405234801561001057600080fd5b50604051602080610278833981018060405261002f919081019061004a565b600055610073565b60006100438251610070565b9392505050565b60006020828403121561005c57600080fd5b60006100688484610037565b949350505050565b90565b6101f6806100826000396000f3fe608060405234801561001057600080fd5b506004361061005d577c010000000000000000000000000000000000000000000000000000000060003504632efd4dce811461006257806341976e0914610080578063866b364b146100a0575b600080fd5b61006a6100b5565b604051610077919061018d565b60405180910390f35b61009361008e36600461010f565b6100bb565b6040516100779190610179565b6100b36100ae366004610135565b6100d8565b005b60005481565b6100c36100dd565b50506040805160208101909152600054815290565b600055565b6040518060200160405280600081525090565b60006100fc823561019e565b9392505050565b60006100fc823561019b565b60006020828403121561012157600080fd5b600061012d84846100f0565b949350505050565b60006020828403121561014757600080fd5b600061012d8484610103565b80516020830190610164848261016a565b50505050565b6101738161019b565b82525050565b602081016101878284610153565b92915050565b60208101610187828461016a565b90565b600073ffffffffffffffffffffffffffffffffffffffff821661018756fea265627a7a7230582094abd34d85f6e23f20ff22943629737cf15a60f55c0325b746e8919ddc20195f6c6578706572696d656e74616cf50037",deployedBytecode:"0x608060405234801561001057600080fd5b506004361061005d577c010000000000000000000000000000000000000000000000000000000060003504632efd4dce811461006257806341976e0914610080578063866b364b146100a0575b600080fd5b61006a6100b5565b604051610077919061018d565b60405180910390f35b61009361008e36600461010f565b6100bb565b6040516100779190610179565b6100b36100ae366004610135565b6100d8565b005b60005481565b6100c36100dd565b50506040805160208101909152600054815290565b600055565b6040518060200160405280600081525090565b60006100fc823561019e565b9392505050565b60006100fc823561019b565b60006020828403121561012157600080fd5b600061012d84846100f0565b949350505050565b60006020828403121561014757600080fd5b600061012d8484610103565b80516020830190610164848261016a565b50505050565b6101738161019b565b82525050565b602081016101878284610153565b92915050565b60208101610187828461016a565b90565b600073ffffffffffffffffffffffffffffffffffffffff821661018756fea265627a7a7230582094abd34d85f6e23f20ff22943629737cf15a60f55c0325b746e8919ddc20195f6c6578706572696d656e74616cf50037",sourceMap:"958:1115:49:-;;;1307:110;8:9:-1;5:2;;;30:1;27;20:12;5:2;1307:110:49;;;;;;;;;;;;;;;;;;;;;;1384:11;:26;958:1115;;5:122:-1;;83:39;114:6;108:13;83:39;;;74:48;68:59;-1:-1;;;68:59;134:263;;249:2;237:9;228:7;224:23;220:32;217:2;;;265:1;262;255:12;217:2;300:1;317:64;373:7;353:9;317:64;;;307:74;211:186;-1:-1;;;;211:186;404:79;473:5;456:27;;958:1115:49;;;;;;",deployedSourceMap:"958:1115:49:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;958:1115:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1079:26;;;:::i;:::-;;;;;;;;;;;;;;;;1830:241;;;;;;;;;:::i;:::-;;;;;;;;1563:131;;;;;;;;;:::i;:::-;;1079:26;;;;:::o;1830:241::-;1928:21;;:::i;:::-;-1:-1:-1;;2026:38:49;;;;;;;;;-1:-1:-1;2050:11:49;2026:38;;;1830:241::o;1563:131::-;1658:11;:29;1563:131::o;958:1115::-;;;;;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;;63:55;57:66;-1:-1;;;57:66;130:118;;197:46;235:6;222:20;197:46;;255:241;;359:2;347:9;338:7;334:23;330:32;327:2;;;375:1;372;365:12;327:2;410:1;427:53;472:7;452:9;427:53;;;417:63;321:175;-1:-1;;;;321:175;503:241;;607:2;595:9;586:7;582:23;578:32;575:2;;;623:1;620;613:12;575:2;658:1;675:53;720:7;700:9;675:53;;804:315;1009:22;;943:4;934:14;;;1037:61;938:3;1009:22;1037:61;;;963:141;916:203;;;;1126:110;1199:31;1224:5;1199:31;;;1194:3;1187:44;1181:55;;;1370:305;1534:2;1519:18;;1548:117;1523:9;1638:6;1548:117;;;1505:170;;;;;1682:213;1800:2;1785:18;;1814:71;1789:9;1858:6;1814:71;;1902:79;1971:5;1954:27;1988:105;;2180:42;2169:54;;2057:31;2152:76",source:'/*\n    Copyright 2019 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\npragma solidity 0.5.7;\npragma experimental "ABIEncoderV2";\n\nimport { IDydxPriceOracle } from "../external/Dydx/interfaces/IDydxPriceOracle.sol";\nimport { Monetary } from "../external/Dydx/lib/Monetary.sol";\n\n/**\n * @title DydxConstantPriceOracleMock\n * @author Set Protocol\n *\n * Mock contract that implements a dYdX price oracle interface used for testing\n */\ncontract DydxConstantPriceOracleMock is \n    IDydxPriceOracle\n{\n\n    /* ============ State Variables ============ */\n    uint256 public oracleValue;\n\n    /* ============ Constructor ============ */\n    /*\n     * Set value that the oracle returns\n     *\n     * @param  _oracleValue    Set the price that will be returned from this oracle\n     */\n    constructor(\n        uint256 _oracleValue\n    )\n        public\n    {\n        oracleValue = _oracleValue;\n    }\n\n    /* ============ External ============ */\n\n    /*\n     * Change oracle value. Warning: no permissions to change the value\n     *\n     */\n    function changeOracleValue(\n        uint256 _newOracleValue\n    )\n        public\n    {\n        oracleValue = _newOracleValue;\n    }\n\n    /*\n     * Gets price and returns as a struct.\n     *\n     * @returns         Struct with value denominated in uint256\n     */\n    function getPrice(\n        address /* token */\n    )\n        public\n        view\n        returns (Monetary.Price memory)\n    {\n        // Return the constant set in the constructor\n        return Monetary.Price({ value: oracleValue });\n    }\n}',sourcePath:"/Users/justin_chen/Dropbox/workspace/set-protocol-oracles/contracts/mocks/DydxConstantPriceOracleMock.sol",compiler:{name:"solc",version:"0.5.7+commit.6da8b019.Linux.g++"},networks:{},schemaVersion:"3.0.16",updatedAt:"2020-05-04T02:38:52.230Z",devdoc:{author:"Set Protocol * Mock contract that implements a dYdX price oracle interface used for testing",methods:{},title:"DydxConstantPriceOracleMock"},userdoc:{methods:{}}};