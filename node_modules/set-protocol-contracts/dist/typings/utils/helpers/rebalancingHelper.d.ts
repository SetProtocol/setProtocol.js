import { Address } from 'set-protocol-utils';
import { ConstantAuctionPriceCurveContract, CoreContract, CoreMockContract, LinearAuctionPriceCurveContract, SetTokenContract, RebalanceAuctionModuleContract, RebalancingSetTokenContract, RebalancingSetTokenV2Contract, UpdatableConstantAuctionPriceCurveContract, VaultContract, WhiteListContract } from '../contracts';
import { BigNumber } from 'bignumber.js';
import { Blockchain } from '../blockchain';
import { CoreHelper } from './coreHelper';
import { ERC20Helper } from './erc20Helper';
declare type CoreLikeContract = CoreMockContract | CoreContract;
export declare class RebalancingHelper {
    _tokenOwnerAddress: Address;
    _coreHelper: CoreHelper;
    _erc20Helper: ERC20Helper;
    _blockchain: Blockchain;
    constructor(tokenOwnerAddress: Address, coreHelper: CoreHelper, erc20Helper: ERC20Helper, blockchain: Blockchain);
    deployRebalancingSetTokenAsync(factory: Address, tokenManager: Address, initialSet: Address, initialShareRatio: BigNumber, initialNaturalUnit: BigNumber, proposalPeriod: BigNumber, rebalanceCoolOffPeriod: BigNumber, rebalancingComponentWhiteListAddress: Address, name?: string, symbol?: string, from?: Address): Promise<RebalancingSetTokenContract>;
    createRebalancingTokenAsync(core: CoreLikeContract, factory: Address, componentAddresses: Address[], units: BigNumber[], naturalUnit: BigNumber, callData?: string, name?: string, symbol?: string, from?: Address): Promise<RebalancingSetTokenContract>;
    createSetTokensAsync(core: CoreLikeContract, factory: Address, transferProxy: Address, tokenCount: number, naturalUnits?: BigNumber[], from?: Address): Promise<SetTokenContract[]>;
    issueRebalancingSetFromBaseComponentsAsync(core: CoreLikeContract, transferProxyAddress: Address, rebalancingSetAddress: Address, rebalancingSetQuantity: BigNumber, from?: Address): Promise<void>;
    redeemRebalancingSetToBaseComponentsAsync(core: CoreLikeContract, transferProxyAddress: Address, rebalancingSetAddress: Address, rebalancingSetQuantity: BigNumber, from?: Address): Promise<void>;
    deployLinearAuctionPriceCurveAsync(priceDivisor: BigNumber, usesStartPrice: boolean, from?: Address): Promise<LinearAuctionPriceCurveContract>;
    deployConstantAuctionPriceCurveAsync(priceNumerator: BigNumber, priceDivisor: BigNumber, from?: Address): Promise<ConstantAuctionPriceCurveContract>;
    deployUpdatableConstantAuctionPriceCurveAsync(priceNumerator: BigNumber, priceDivisor: BigNumber, from?: Address): Promise<UpdatableConstantAuctionPriceCurveContract>;
    addPriceLibraryAsync(core: CoreLikeContract, priceLibrary: ConstantAuctionPriceCurveContract | LinearAuctionPriceCurveContract, from?: Address): Promise<void>;
    createDefaultRebalancingSetTokenAsync(core: CoreLikeContract, factory: Address, manager: Address, initialSet: Address, proposalPeriod: BigNumber, initialUnitShares?: BigNumber): Promise<RebalancingSetTokenContract>;
    defaultTransitionToProposeAsync(core: CoreLikeContract, rebalancingComponentWhiteList: WhiteListContract, rebalancingSetToken: RebalancingSetTokenContract, nextSetToken: SetTokenContract, auctionLibrary: Address, caller: Address): Promise<void>;
    transitionToProposeAsync(core: CoreLikeContract, rebalancingSetToken: RebalancingSetTokenContract, nextSetToken: SetTokenContract, auctionLibrary: Address, auctionTimeToPivot: BigNumber, auctionStartPrice: BigNumber, auctionPivotPrice: BigNumber, caller: Address): Promise<void>;
    defaultTransitionToRebalanceAsync(core: CoreLikeContract, rebalancingComponentWhiteList: WhiteListContract, rebalancingSetToken: RebalancingSetTokenContract, nextSetToken: SetTokenContract, auctionLibrary: Address, caller: Address): Promise<void>;
    transitionToRebalanceAsync(core: CoreLikeContract, rebalancingSetToken: RebalancingSetTokenContract, nextSetToken: SetTokenContract, auctionLibrary: Address, auctionTimeToPivot: BigNumber, auctionStartPrice: BigNumber, auctionPivotPrice: BigNumber, caller: Address): Promise<void>;
    placeBidAsync(rebalanceAuctionModule: RebalanceAuctionModuleContract, rebalancingSetTokenAddress: Address, bidQuantity: BigNumber, allowPartialFill?: boolean, caller?: Address): Promise<void>;
    endFailedRebalanceAsync(rebalancingSetToken: RebalancingSetTokenContract, caller?: Address): Promise<void>;
    constructInflowOutflowArraysAsync(rebalancingSetToken: RebalancingSetTokenContract, quantity: BigNumber, priceNumerator: BigNumber): Promise<any>;
    constructCombinedUnitArrayAsync(rebalancingSetToken: RebalancingSetTokenContract, targetSetToken: SetTokenContract, otherSetToken: SetTokenContract): Promise<BigNumber[]>;
    getExpectedUnitSharesAndIssueAmount(core: CoreMockContract, rebalancingSetToken: (RebalancingSetTokenContract | RebalancingSetTokenV2Contract), newSet: SetTokenContract, vault: VaultContract): Promise<any>;
    getExpectedLinearAuctionPrice(elapsedTime: BigNumber, auctionTimeToPivot: BigNumber, auctionPivotPrice: BigNumber, priceDivisorParam: BigNumber): any;
    getExpectedOpenLinearAuctionPrice(elapsedTime: BigNumber, auctionTimeToPivot: BigNumber, auctionStartPrice: BigNumber, auctionPivotPrice: BigNumber, priceDivisorParam: BigNumber): any;
    getExpectedGeneralNextSetParameters(tokenOnePrice: BigNumber, tokenTwoPrice: BigNumber, tokenOneMultiplier: BigNumber, tokenTwoMultiplier: BigNumber, decimalDifference: BigNumber, pricePrecision: BigNumber): any;
    getExpectedGeneralAuctionParameters(tokenOnePrice: BigNumber, tokenTwoPrice: BigNumber, tokenOneMultiplier: BigNumber, tokenTwoMultiplier: BigNumber, tokenOneDecimals: BigNumber, tokenTwoDecimals: BigNumber, pricePrecision: BigNumber, auctionTimeToPivot: BigNumber, currentSetToken: SetTokenContract): Promise<any>;
    getExpectedSetTokenAsync(setTokenAddress: Address): Promise<SetTokenContract>;
    private computeTokenValue;
    private computeTokenDollarAmount;
    getTimeToFairValue(auctionTimeToPivot: BigNumber): BigNumber;
    calculateCurrentSetBidQuantity(startingCurrentSets: BigNumber, percentToBid: number, minimumBid: BigNumber): Promise<BigNumber>;
    getRebalancingSetInstance(rebalancingSetTokenAddress: Address, from?: Address): Promise<RebalancingSetTokenContract>;
}
export {};
