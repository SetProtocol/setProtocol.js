import { Address } from 'set-protocol-utils';
import { CommonValidationsLibraryMockContract, CoreContract, Bytes32LibraryMockContract, CommonMathMockContract, CompoundUtilsMockContract, CoreIssuanceLibraryMockContract, ERC20WrapperMockContract, ExchangeIssuanceLibraryMockContract, PlaceBidMockContract, RebalanceMockContract, RebalanceStateSetTokenMockContract, RebalancingSetIssuanceMockContract, SetMathMockContract, SetTokenLibraryMockContract, SetUSDValuationMockContract, TransferProxyContract, TokenFlushMockContract, VaultContract, ZeroExOrderLibraryMockContract } from '../contracts';
import { BigNumber } from 'bignumber.js';
export declare class LibraryMockHelper {
    private _contractOwnerAddress;
    constructor(contractOwnerAddress: Address);
    deployCommonValidationsLibraryAsync(from?: Address): Promise<CommonValidationsLibraryMockContract>;
    deployBytes32LibraryAsync(from?: Address): Promise<Bytes32LibraryMockContract>;
    deployCommonMathLibraryAsync(from?: Address): Promise<CommonMathMockContract>;
    deployCompoundUtilsLibraryMockAsync(from?: Address): Promise<CompoundUtilsMockContract>;
    deployCoreIssuanceLibraryAsync(from?: Address): Promise<CoreIssuanceLibraryMockContract>;
    deployExchangeIssuanceLibraryAsync(from?: Address): Promise<ExchangeIssuanceLibraryMockContract>;
    deployTokenFlushMockAsync(core: CoreContract, vault: VaultContract, transferProxy: TransferProxyContract, from?: Address): Promise<TokenFlushMockContract>;
    deployRebalanceMockAsync(from?: Address): Promise<RebalanceMockContract>;
    deployRebalanceStateSetTokenMockAsync(combinedTokenArray: Address[], inflowArray: BigNumber[], outflowArray: BigNumber[], name?: string, symbol?: string, decimals?: BigNumber, from?: Address): Promise<RebalanceStateSetTokenMockContract>;
    deployRebalancingSetIssuanceMockAsync(core: CoreContract, vault: VaultContract, from?: Address): Promise<RebalancingSetIssuanceMockContract>;
    deployERC20WrapperLibraryAsync(from?: Address): Promise<ERC20WrapperMockContract>;
    deploySetMathAsync(from?: Address): Promise<SetMathMockContract>;
    deploySetTokenLibraryAsync(from?: Address): Promise<SetTokenLibraryMockContract>;
    deploySetUSDValuationMockAsync(from?: Address): Promise<SetUSDValuationMockContract>;
    deployZeroExOrderLibraryAsync(from?: Address): Promise<ZeroExOrderLibraryMockContract>;
    deployPlaceBidMockAsync(from?: Address): Promise<PlaceBidMockContract>;
    ceilLog10(value: BigNumber): BigNumber;
}
