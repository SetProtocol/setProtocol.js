import { Address } from 'set-protocol-utils';
import { CoreContract, CoreMockContract, LiquidatorMockContract, SetTokenContract, RebalanceAuctionModuleContract, RebalancingSetTokenContract, RebalancingSetTokenV2Contract, RebalancingSetTokenV3Contract, VaultContract, WhiteListContract } from '../contracts';
import { BigNumber } from 'bignumber.js';
import { RebalancingHelper } from './rebalancingHelper';
declare type CoreLikeContract = CoreMockContract | CoreContract;
declare type RebalancingV2LikeContract = RebalancingSetTokenV2Contract | RebalancingSetTokenV3Contract;
export declare class RebalancingSetV2Helper extends RebalancingHelper {
    /**
     * addressConfig [factory, manager, liquidator, initialSet, componentWhiteList,
     *                liquidatorWhiteList, feeRecipient]
     * [0]factory                   Factory used to create the Rebalancing Set
     * [1]manager                   Address that is able to propose the next Set
     * [2]liquidator                Address of the liquidator contract
     * [3]initialSet                Initial set that collateralizes the Rebalancing set
     * [4]componentWhiteList        Whitelist that nextSet components are checked against during propose
     * [5]liquidatorWhiteList       Whitelist of valid liquidators
     * [6]feeRecipient              Address that receives any incentive fees
     *
     * uintConfig [unitShares, naturalUnit, rebalanceInterval, rebalanceFailPeriod, lastRebalanceTimestamp,
     *             entryFee, rebalanceFee]
     * [0]initialUnitShares         Units of currentSet that equals one share
     * [1]naturalUnit               The minimum multiple of Sets that can be issued or redeemed
     * [2]rebalanceInterval:        Minimum amount of time between rebalances
     * [3]rebalanceFailPeriod:      Time after auctionStart where something in the rebalance has gone wrong
     * [4]lastRebalanceTimestamp:   Time of the last rebalance; Allows customized deployments
     * [5]entryFee:                 Mint fee represented in a scaled percentage value
     * [6]rebalanceFee:             Rebalance fee represented in a scaled percentage value
     *
     */
    deployRebalancingSetTokenV2Async(addressConfig: Address[], bigNumberConfig: BigNumber[], name?: string, symbol?: string, from?: Address): Promise<RebalancingSetTokenV2Contract>;
    createRebalancingTokenV2Async(core: CoreLikeContract, factory: Address, componentAddresses: Address[], units: BigNumber[], naturalUnit: BigNumber, callData?: string, name?: string, symbol?: string, from?: Address): Promise<RebalancingSetTokenV2Contract>;
    createDefaultRebalancingSetTokenV2Async(core: CoreLikeContract, factory: Address, manager: Address, liquidator: Address, feeRecipient: Address, rebalanceFeeCalculator: Address, initialSet: Address, failRebalancePeriod: BigNumber, lastRebalanceTimestamp: BigNumber, entryFee?: BigNumber, rebalanceFee?: BigNumber, initialUnitShares?: BigNumber): Promise<RebalancingSetTokenV2Contract>;
    transitionToRebalanceV2Async(core: CoreLikeContract, rebalancingComponentWhiteList: WhiteListContract, rebalancingSetToken: RebalancingV2LikeContract, nextSetToken: SetTokenContract, caller: Address, liquidatorData?: string): Promise<void>;
    transitionToDrawdownV2Async(core: CoreLikeContract, rebalancingComponentWhiteList: WhiteListContract, rebalancingSetToken: RebalancingV2LikeContract, rebalanceAuctionModule: RebalanceAuctionModuleContract, liquidatorMock: LiquidatorMockContract, nextSetToken: SetTokenContract, manager: Address, liquidatorData?: string, caller?: Address): Promise<void>;
    failRebalanceToDrawdownAsync(rebalancingSetToken: RebalancingV2LikeContract, liquidatorMock: LiquidatorMockContract, rebalanceAuctionModule: RebalanceAuctionModuleContract, caller?: Address): Promise<void>;
    placeBidAsync(rebalanceAuctionModule: RebalanceAuctionModuleContract, rebalancingSetTokenAddress: Address, bidQuantity: BigNumber, allowPartialFill?: boolean, caller?: Address): Promise<void>;
    endFailedRebalanceAsync(rebalancingSetToken: RebalancingSetTokenContract, caller?: Address): Promise<void>;
    getFailedWithdrawComponentsAsync(nextSetToken: SetTokenContract, currentSetToken: SetTokenContract): Promise<Address[]>;
    getSetIssueQuantity(setToken: SetTokenContract, rebalancingSetToken: RebalancingV2LikeContract, vault: VaultContract): Promise<BigNumber>;
    calculateMaxIssueAmount(nextSetToken: SetTokenContract, rebalancingSetToken: RebalancingV2LikeContract, vault: VaultContract): Promise<BigNumber>;
    calculateEntryFee(rebalancingSetToken: RebalancingV2LikeContract, quantity: BigNumber): Promise<BigNumber>;
    calculateRebalanceFeeInflation(feePercentage: BigNumber, totalSupply: BigNumber): Promise<BigNumber>;
    getExpectedUnitSharesV2(core: CoreMockContract, rebalancingSetToken: RebalancingV2LikeContract, newSet: SetTokenContract, vault: VaultContract): Promise<BigNumber>;
}
export {};
