/// <reference types="node" />
import { Address } from 'set-protocol-utils';
import { BigNumber } from 'bignumber.js';
import { FeeCalculatorMockContract, FixedFeeCalculatorContract, FixedFeeCalculatorMockContract, PerformanceFeeCalculatorContract, RebalancingSetFeeMockContract } from '../contracts';
export declare class FeeCalculatorHelper {
    private _contractOwnerAddress;
    constructor(contractOwnerAddress: Address);
    deployFixedFeeCalculatorAsync(from?: Address): Promise<FixedFeeCalculatorContract>;
    deployFixedFeeCalculatorMockAsync(from?: Address): Promise<FixedFeeCalculatorMockContract>;
    deployPerformanceFeeCalculatorAsync(core: Address, oracleWhiteList: Address, maxProfitFeePercentage: BigNumber, maxStreamingFeePercentage: BigNumber, from?: Address): Promise<PerformanceFeeCalculatorContract>;
    deployFeeCalculatorMockAsync(from?: Address): Promise<FeeCalculatorMockContract>;
    deployRebalancingSetFeeMockAsync(unitShares: BigNumber, naturalUnit: BigNumber, currentSet: Address, feeCalculator: Address, from?: Address): Promise<RebalancingSetFeeMockContract>;
    generateFixedRebalanceFeeCallData(feeQuantity: BigNumber): string;
    generateAdjustFeeCallData(feeType: BigNumber, newFeePercentage: BigNumber): string;
    generatePerformanceFeeCallData(profitPeriod: BigNumber, highWatermarkResetPeriod: BigNumber, profitFeePercentage: BigNumber, streamingFeePercentage: BigNumber): string;
    generatePerformanceFeeCallDataBuffer(profitPeriod: BigNumber, highWatermarkResetPeriod: BigNumber, profitFeePercentage: BigNumber, streamingFeePercentage: BigNumber): Buffer[];
    calculateAccruedFeesAsync(feeState: any, rebalancingSetTokenValue: BigNumber, timeStamp: BigNumber): Promise<BigNumber>;
    calculateNewHighWatermarkAsync(feeState: any, rebalancingSetTokenValue: BigNumber, timeStamp: BigNumber): Promise<BigNumber>;
    calculateAccruedProfitFeeAsync(feeState: any, rebalancingSetValue: BigNumber, streamingFee: BigNumber): BigNumber;
    calculateAccruedStreamingFee(streamingFee: BigNumber, elapsedTime: BigNumber): BigNumber;
}
