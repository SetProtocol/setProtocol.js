import { Address } from 'set-protocol-utils';
import { BigNumber } from 'bignumber.js';
import { UpdatableOracleMockContract } from 'set-protocol-oracles';
import { CoreMockContract, OracleWhiteListContract, SetTokenContract, SetTokenFactoryContract, StandardTokenMockContract, TransferProxyContract, VaultContract } from '../contracts';
import { CoreHelper } from './coreHelper';
import { ERC20Helper } from './erc20Helper';
import { OracleHelper } from 'set-protocol-oracles';
export declare class RebalanceTestSetup {
    private _contractOwnerAddress;
    private _coreHelper;
    private _erc20Helper;
    private _oracleHelper;
    core: CoreMockContract;
    transferProxy: TransferProxyContract;
    vault: VaultContract;
    setTokenFactory: SetTokenFactoryContract;
    component1: StandardTokenMockContract;
    component2: StandardTokenMockContract;
    component3: StandardTokenMockContract;
    component1Price: BigNumber;
    component2Price: BigNumber;
    component3Price: BigNumber;
    set1: SetTokenContract;
    set2: SetTokenContract;
    set3: SetTokenContract;
    set1Components: Address[];
    set2Components: Address[];
    set3Components: Address[];
    set1Units: BigNumber[];
    set2Units: BigNumber[];
    set3Units: BigNumber[];
    set1NaturalUnit: BigNumber;
    set2NaturalUnit: BigNumber;
    set3NaturalUnit: BigNumber;
    component1Oracle: UpdatableOracleMockContract;
    component2Oracle: UpdatableOracleMockContract;
    component3Oracle: UpdatableOracleMockContract;
    oracleWhiteList: OracleWhiteListContract;
    constructor(contractOwnerAddress: Address, coreHelper: CoreHelper, erc20Helper: ERC20Helper, oracleHelper: OracleHelper);
    initialize(from?: Address): Promise<void>;
}
