import { Address } from 'set-protocol-utils';
import { AuthorizableContract, CoreContract, CoreMockContract, CTokenExchangeIssuanceModuleContract, ExchangeIssuanceModuleContract, LimitOneUpgradeMockContract, OracleWhiteListContract, RebalancingSetCTokenExchangeIssuanceModuleContract, RebalancingSetCTokenIssuanceModuleContract, RebalancingSetExchangeIssuanceModuleContract, RebalancingSetIssuanceModuleContract, RebalanceAuctionModuleContract, RebalanceAuctionModuleMockContract, RebalancingSetTokenContract, RebalancingSetTokenFactoryContract, RebalancingSetTokenV2FactoryContract, RebalancingSetTokenV3FactoryContract, SetTokenContract, SetTokenFactoryContract, TimeLockUpgradeMockContract, TimeLockUpgradeV2MockContract, TransferProxyContract, UnrestrictedTimeLockUpgradeMockContract, VaultContract, WethMockContract, WhiteListContract } from '../contracts';
import { BigNumber } from 'bignumber.js';
declare type CoreLikeContract = CoreMockContract | CoreContract;
export declare class CoreHelper {
    private _tokenOwnerAddress;
    private _contractOwnerAddress;
    constructor(tokenOwnerAddress: Address, contractOwnerAddress: Address);
    deployTransferProxyAsync(from?: Address): Promise<TransferProxyContract>;
    deployVaultAsync(from?: Address): Promise<VaultContract>;
    deployAuthorizableAsync(from?: Address): Promise<AuthorizableContract>;
    deploySetTokenFactoryAsync(coreAddress: Address, from?: Address): Promise<SetTokenFactoryContract>;
    deployRebalancingSetTokenFactoryAsync(coreAddress: Address, componentWhitelistAddress: Address, minimumRebalanceInterval?: BigNumber, minimumProposalPeriod?: BigNumber, minimumTimeToPivot?: BigNumber, maximumTimeToPivot?: BigNumber, minimumNaturalUnit?: BigNumber, maximumNaturalUnit?: BigNumber, from?: Address): Promise<RebalancingSetTokenFactoryContract>;
    deployRebalancingSetTokenV2FactoryAsync(coreAddress: Address, componentWhitelistAddress: Address, liquidatorWhitelistAddress: Address, feeCalculatorWhitelistAddress: Address, minimumRebalanceInterval?: BigNumber, minimumFailRebalancePeriod?: BigNumber, maximumFailRebalancePeriod?: BigNumber, minimumNaturalUnit?: BigNumber, maximumNaturalUnit?: BigNumber, from?: Address): Promise<RebalancingSetTokenV2FactoryContract>;
    deployRebalancingSetTokenV3FactoryAsync(coreAddress: Address, componentWhitelistAddress: Address, liquidatorWhitelistAddress: Address, feeCalculatorWhitelistAddress: Address, minimumRebalanceInterval?: BigNumber, minimumFailRebalancePeriod?: BigNumber, maximumFailRebalancePeriod?: BigNumber, minimumNaturalUnit?: BigNumber, maximumNaturalUnit?: BigNumber, from?: Address): Promise<RebalancingSetTokenV3FactoryContract>;
    deploySetTokenAsync(factory: Address, componentAddresses: Address[], units: BigNumber[], naturalUnit: BigNumber, name?: string, symbol?: string, from?: Address): Promise<SetTokenContract>;
    deployCoreAndDependenciesAsync(from?: Address): Promise<CoreContract>;
    deployCoreAsync(transferProxy: TransferProxyContract, vault: VaultContract, from?: Address): Promise<CoreContract>;
    deployCoreMockAsync(transferProxy: TransferProxyContract, vault: VaultContract, from?: Address): Promise<CoreMockContract>;
    deployTimeLockUpgradeMockAsync(from?: Address): Promise<TimeLockUpgradeMockContract>;
    deployTimeLockUpgradeV2MockAsync(from?: Address): Promise<TimeLockUpgradeV2MockContract>;
    deployUnrestrictedTimeLockUpgradeMockAsync(from?: Address): Promise<UnrestrictedTimeLockUpgradeMockContract>;
    deployLimitOneUpgradeMockAsync(from?: Address): Promise<LimitOneUpgradeMockContract>;
    deployWhiteListAsync(initialAddresses?: Address[], from?: Address): Promise<WhiteListContract>;
    deployOracleWhiteListAsync(initialTokenAddresses?: Address[], initialOracleAddresses?: Address[], from?: Address): Promise<OracleWhiteListContract>;
    deployRebalanceAuctionModuleAsync(core: CoreLikeContract, vault: VaultContract, from?: Address): Promise<RebalanceAuctionModuleContract>;
    deployRebalanceAuctionModuleMockAsync(core: CoreLikeContract, vault: VaultContract, from?: Address): Promise<RebalanceAuctionModuleMockContract>;
    deployExchangeIssuanceModuleAsync(core: CoreLikeContract, vault: VaultContract, from?: Address): Promise<ExchangeIssuanceModuleContract>;
    deployCTokenExchangeIssuanceModuleAsync(core: Address, vault: Address, transferProxy: Address, cTokenWhiteList: Address, from?: Address): Promise<CTokenExchangeIssuanceModuleContract>;
    deployRebalancingSetCTokenExchangeIssuanceModuleAsync(core: Address, transferProxy: Address, exchangeIssuanceModule: Address, wrappedEther: Address, vault: Address, cTokenWhiteList: Address, from?: Address): Promise<RebalancingSetCTokenExchangeIssuanceModuleContract>;
    deployRebalancingSetCTokenIssuanceModuleAsync(core: Address, vault: Address, transferProxy: Address, weth: Address, cTokenWhiteList: Address, from?: Address): Promise<RebalancingSetCTokenIssuanceModuleContract>;
    deployRebalancingSetExchangeIssuanceModuleAsync(core: Address, transferProxy: Address, exchangeIssuanceModule: Address, wrappedEther: Address, vault: Address, from?: Address): Promise<RebalancingSetExchangeIssuanceModuleContract>;
    deployRebalancingSetIssuanceModuleAsync(core: CoreLikeContract, vault: VaultContract, transferProxy: TransferProxyContract, weth: WethMockContract, from?: Address): Promise<RebalancingSetIssuanceModuleContract>;
    linkRebalancingLibrariesAsync(contract: any): Promise<void>;
    addFactoryAsync(core: CoreLikeContract, setTokenFactory: SetTokenFactoryContract | RebalancingSetTokenFactoryContract, from?: Address): Promise<void>;
    addModuleAsync(core: CoreLikeContract, moduleAddress: Address, from?: Address): Promise<void>;
    setDefaultStateAndAuthorizationsAsync(core: CoreLikeContract, vault: VaultContract, transferProxy: TransferProxyContract, setTokenFactory: SetTokenFactoryContract, from?: Address): Promise<void>;
    addAuthorizationAsync(contract: AuthorizableContract, toAuthorize: Address, from?: Address): Promise<void>;
    incrementAccountBalanceAsync(vault: VaultContract, account: Address, token: Address, quantity: BigNumber, from?: Address): Promise<void>;
    getVaultBalancesForTokensForOwner(tokens: Address[], vault: VaultContract, owner: Address): Promise<BigNumber[]>;
    addTokensToWhiteList(tokenAddresses: Address[], whiteList: WhiteListContract, from?: Address): Promise<void>;
    addTokenToWhiteList(address: Address, whiteList: WhiteListContract, from?: Address): Promise<void>;
    addAddressToWhiteList(address: Address, whiteList: WhiteListContract, from?: Address): Promise<void>;
    createSetTokenAsync(core: CoreLikeContract, factory: Address, componentAddresses: Address[], units: BigNumber[], naturalUnit: BigNumber, name?: string, symbol?: string, callData?: string, from?: Address): Promise<SetTokenContract>;
    depositFromUser(core: CoreLikeContract, token: Address, quantity: BigNumber, from?: Address): Promise<void>;
    depositTo(core: CoreLikeContract, to: Address, token: Address, quantity: BigNumber, from?: Address): Promise<void>;
    getRebalancingInstanceFromAddress(rebalancingTokenAddress: Address, from?: Address): Promise<RebalancingSetTokenContract>;
    issueSetTokenAsync(core: CoreLikeContract, token: Address, quantity: BigNumber, from?: Address): Promise<void>;
    maskForAllComponents(numComponents: number): BigNumber;
    maskForComponentsAtIndexes(indexes: number[]): BigNumber;
    /**
     * OperationStates
     * 0 = Operational
     * 1 = Shut Down
     */
    setOperationStateAsync(core: CoreLikeContract, operationState: BigNumber, from?: Address): Promise<void>;
    addDefaultExchanges(core: CoreLikeContract, from?: Address): Promise<void>;
    addExchange(core: CoreLikeContract, exchangeId: number, exchangeAddress: Address, from?: Address): Promise<void>;
    getSetInstance(setTokenAddress: Address, from?: Address): Promise<SetTokenContract>;
}
export {};
