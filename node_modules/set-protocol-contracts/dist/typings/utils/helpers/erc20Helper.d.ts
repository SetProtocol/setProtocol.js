import { Address } from 'set-protocol-utils';
import { BigNumber } from 'bignumber.js';
import { BadTokenMockContract, InvalidReturnTokenMockContract, NoXferReturnTokenMockContract, StandardTokenMockContract, StandardTokenWithFeeMockContract, NoDecimalTokenMockContract, WethMockContract } from '../contracts';
export declare class ERC20Helper {
    private _senderAccountAddress;
    constructor(senderAccountAddress: Address);
    deployTokenAsync(initialAccount: Address, decimals?: number, initialTokenAmount?: BigNumber): Promise<StandardTokenMockContract>;
    deployTokensAsync(tokenCount: number, initialAccount: Address): Promise<StandardTokenMockContract[]>;
    deployTokenWithFeeAsync(initialAccount: Address, fee?: BigNumber): Promise<StandardTokenWithFeeMockContract>;
    deployTokenNoXferReturnAsync(initialAccount: Address, fee?: BigNumber): Promise<NoXferReturnTokenMockContract>;
    deployTokenInvalidReturnAsync(initialAccount: Address, fee?: BigNumber): Promise<InvalidReturnTokenMockContract>;
    deployTokenWithNoDecimalAsync(initialAccount: Address): Promise<NoDecimalTokenMockContract>;
    deployTokenWithInvalidBalancesAsync(initialAccount: Address): Promise<BadTokenMockContract>;
    zrxToken(): StandardTokenMockContract;
    kyberReserveToken(tokenAddress: Address): StandardTokenMockContract;
    deployWrappedEtherAsync(initialAccount: Address, initialTokenAmount?: BigNumber): Promise<WethMockContract>;
    approveTransferAsync(token: StandardTokenMockContract | WethMockContract, to: Address, from?: Address): Promise<void>;
    approveTransfersAsync(tokens: (StandardTokenMockContract | WethMockContract)[], to: Address, from?: Address): Promise<void>;
    transferTokenAsync(token: StandardTokenMockContract, to: Address, quantity: BigNumber, from?: Address): Promise<void>;
    transferTokensAsync(tokens: (StandardTokenMockContract | WethMockContract)[], to: Address, amount: BigNumber, from?: Address): Promise<void>;
    approveInvalidTransferAsync(token: InvalidReturnTokenMockContract, to: Address, from?: Address): Promise<void>;
    approveInvalidTransfersAsync(tokens: InvalidReturnTokenMockContract[], to: Address, from?: Address): Promise<void>;
    getTokenBalances(tokens: StandardTokenMockContract[], owner: Address): Promise<BigNumber[]>;
    getTokenAllowances(tokens: StandardTokenMockContract[], owner: Address, spender: Address): Promise<BigNumber[]>;
    getTokenSupplies(tokens: StandardTokenMockContract[]): Promise<BigNumber[]>;
    getTokenInstanceAsync(token: Address): Promise<StandardTokenMockContract>;
    retrieveTokenInstancesAsync(tokens: Address[]): Promise<StandardTokenMockContract[]>;
    getTokensDecimalsAsync(tokens: Address[]): Promise<BigNumber[]>;
}
