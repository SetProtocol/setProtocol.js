export declare const CTokenExchangeIssuanceModule: {
    "contractName": string;
    "abi": ({
        "constant": boolean;
        "inputs": any[];
        "name": string;
        "outputs": {
            "name": string;
            "type": string;
        }[];
        "payable": boolean;
        "stateMutability": string;
        "type": string;
        "anonymous"?: undefined;
    } | {
        "inputs": {
            "name": string;
            "type": string;
        }[];
        "payable": boolean;
        "stateMutability": string;
        "type": string;
        "constant"?: undefined;
        "name"?: undefined;
        "outputs"?: undefined;
        "anonymous"?: undefined;
    } | {
        "anonymous": boolean;
        "inputs": {
            "indexed": boolean;
            "name": string;
            "type": string;
        }[];
        "name": string;
        "type": string;
        "constant"?: undefined;
        "outputs"?: undefined;
        "payable"?: undefined;
        "stateMutability"?: undefined;
    } | {
        "constant": boolean;
        "inputs": ({
            "components": {
                "name": string;
                "type": string;
            }[];
            "name": string;
            "type": string;
        } | {
            "name": string;
            "type": string;
            "components"?: undefined;
        })[];
        "name": string;
        "outputs": any[];
        "payable": boolean;
        "stateMutability": string;
        "type": string;
        "anonymous"?: undefined;
    })[];
    "metadata": string;
    "bytecode": string;
    "deployedBytecode": string;
    "sourceMap": string;
    "deployedSourceMap": string;
    "source": string;
    "sourcePath": string;
    "compiler": {
        "name": string;
        "version": string;
    };
    "networks": {};
    "schemaVersion": string;
    "updatedAt": string;
    "devdoc": {
        "author": string;
        "methods": {
            "constructor": {
                "params": {
                    "_cTokenWhiteList": string;
                    "_core": string;
                    "_transferProxy": string;
                    "_vault": string;
                };
            };
            "exchangeIssue((address,uint256,uint8[],address[],uint256[],address[],uint256[]),bytes)": {
                "params": {
                    "_exchangeIssuanceParams": string;
                    "_orderData": string;
                };
            };
            "exchangeRedeem((address,uint256,uint8[],address[],uint256[],address[],uint256[]),bytes)": {
                "params": {
                    "_exchangeIssuanceParams": string;
                    "_orderData": string;
                };
            };
        };
        "title": string;
    };
    "userdoc": {
        "methods": {
            "constructor": string;
            "exchangeIssue((address,uint256,uint8[],address[],uint256[],address[],uint256[]),bytes)": {
                "notice": string;
            };
            "exchangeRedeem((address,uint256,uint8[],address[],uint256[],address[],uint256[]),bytes)": {
                "notice": string;
            };
        };
    };
};
