export declare const LinearAuctionLiquidator: {
    "contractName": string;
    "abi": ({
        "constant": boolean;
        "inputs": {
            "name": string;
            "type": string;
        }[];
        "name": string;
        "outputs": ({
            "components": {
                "name": string;
                "type": string;
            }[];
            "name": string;
            "type": string;
        } | {
            "name": string;
            "type": string;
            "components"?: undefined;
        })[];
        "payable": boolean;
        "stateMutability": string;
        "type": string;
    } | {
        "inputs": {
            "name": string;
            "type": string;
        }[];
        "payable": boolean;
        "stateMutability": string;
        "type": string;
        "constant"?: undefined;
        "name"?: undefined;
        "outputs"?: undefined;
    })[];
    "metadata": string;
    "bytecode": string;
    "deployedBytecode": string;
    "sourceMap": string;
    "deployedSourceMap": string;
    "source": string;
    "sourcePath": string;
    "compiler": {
        "name": string;
        "version": string;
    };
    "networks": {};
    "schemaVersion": string;
    "updatedAt": string;
    "devdoc": {
        "author": string;
        "methods": {
            "constructor": {
                "params": {
                    "_auctionPeriod": string;
                    "_core": string;
                    "_name": string;
                    "_oracleWhiteList": string;
                    "_rangeEnd": string;
                    "_rangeStart": string;
                };
            };
            "getBidPrice(address,uint256)": {
                "params": {
                    "_quantity": string;
                    "_set": string;
                };
                "return": string;
            };
            "placeBid(uint256)": {
                "params": {
                    "_quantity": string;
                };
                "return": string;
            };
            "startRebalance(address,address,uint256,bytes)": {
                "params": {
                    "_currentSet": string;
                    "_liquidatorData": string;
                    "_nextSet": string;
                    "_startingCurrentSetQuantity": string;
                };
            };
        };
        "title": string;
    };
    "userdoc": {
        "methods": {
            "constructor": string;
            "endFailedRebalance()": {
                "notice": string;
            };
            "getBidPrice(address,uint256)": {
                "notice": string;
            };
            "placeBid(uint256)": {
                "notice": string;
            };
            "settleRebalance()": {
                "notice": string;
            };
            "startRebalance(address,address,uint256,bytes)": {
                "notice": string;
            };
        };
    };
};
