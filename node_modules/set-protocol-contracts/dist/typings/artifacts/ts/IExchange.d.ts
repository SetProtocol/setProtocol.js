export declare const IExchange: {
    "contractName": string;
    "abi": ({
        "constant": boolean;
        "inputs": ({
            "components": {
                "name": string;
                "type": string;
            }[];
            "name": string;
            "type": string;
        } | {
            "name": string;
            "type": string;
            "components"?: undefined;
        })[];
        "name": string;
        "outputs": {
            "components": ({
                "components": {
                    "name": string;
                    "type": string;
                }[];
                "name": string;
                "type": string;
            } | {
                "name": string;
                "type": string;
                "components"?: undefined;
            })[];
            "name": string;
            "type": string;
        }[];
        "payable": boolean;
        "stateMutability": string;
        "type": string;
    } | {
        "constant": boolean;
        "inputs": {
            "name": string;
            "type": string;
        }[];
        "name": string;
        "outputs": {
            "name": string;
            "type": string;
        }[];
        "payable": boolean;
        "stateMutability": string;
        "type": string;
    })[];
    "metadata": string;
    "bytecode": string;
    "deployedBytecode": string;
    "sourceMap": string;
    "deployedSourceMap": string;
    "source": string;
    "sourcePath": string;
    "compiler": {
        "name": string;
        "version": string;
    };
    "networks": {};
    "schemaVersion": string;
    "updatedAt": string;
    "devdoc": {
        "methods": {
            "batchCancelOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])": {
                "details": string;
                "params": {
                    "orders": string;
                };
            };
            "batchFillOrKillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])": {
                "details": string;
                "params": {
                    "orders": string;
                    "signatures": string;
                    "takerAssetFillAmounts": string;
                };
                "return": string;
            };
            "batchFillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])": {
                "details": string;
                "params": {
                    "orders": string;
                    "signatures": string;
                    "takerAssetFillAmounts": string;
                };
                "return": string;
            };
            "batchFillOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])": {
                "details": string;
                "params": {
                    "orders": string;
                    "signatures": string;
                    "takerAssetFillAmounts": string;
                };
                "return": string;
            };
            "cancelOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
                "details": string;
                "params": {
                    "order": string;
                };
            };
            "cancelOrdersUpTo(uint256)": {
                "details": string;
                "params": {
                    "targetOrderEpoch": string;
                };
            };
            "executeTransaction(uint256,address,bytes,bytes)": {
                "details": string;
                "params": {
                    "data": string;
                    "salt": string;
                    "signature": string;
                    "signerAddress": string;
                };
            };
            "fillOrKillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)": {
                "details": string;
                "params": {
                    "order": string;
                    "signature": string;
                    "takerAssetFillAmount": string;
                };
            };
            "fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)": {
                "details": string;
                "params": {
                    "order": string;
                    "signature": string;
                    "takerAssetFillAmount": string;
                };
                "return": string;
            };
            "fillOrderNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)": {
                "details": string;
                "params": {
                    "order": string;
                    "signature": string;
                    "takerAssetFillAmount": string;
                };
                "return": string;
            };
            "getAssetProxy(bytes4)": {
                "details": string;
                "params": {
                    "assetProxyId": string;
                };
                "return": string;
            };
            "getOrderInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes))": {
                "details": string;
                "params": {
                    "order": string;
                };
                "return": string;
            };
            "isValidSignature(bytes32,address,bytes)": {
                "details": string;
                "params": {
                    "hash": string;
                    "signature": string;
                    "signerAddress": string;
                };
                "return": string;
            };
            "marketBuyOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])": {
                "details": string;
                "params": {
                    "makerAssetFillAmount": string;
                    "orders": string;
                    "signatures": string;
                };
                "return": string;
            };
            "marketBuyOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])": {
                "details": string;
                "params": {
                    "makerAssetFillAmount": string;
                    "orders": string;
                    "signatures": string;
                };
                "return": string;
            };
            "marketSellOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])": {
                "details": string;
                "params": {
                    "orders": string;
                    "signatures": string;
                    "takerAssetFillAmount": string;
                };
                "return": string;
            };
            "marketSellOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])": {
                "details": string;
                "params": {
                    "orders": string;
                    "signatures": string;
                    "takerAssetFillAmount": string;
                };
                "return": string;
            };
            "matchOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes,bytes)": {
                "details": string;
                "params": {
                    "leftOrder": string;
                    "leftSignature": string;
                    "rightOrder": string;
                    "rightSignature": string;
                };
                "return": string;
            };
            "preSign(bytes32,address,bytes)": {
                "details": string;
                "params": {
                    "signature": string;
                    "signerAddress": string;
                };
            };
            "registerAssetProxy(bytes4,address,address)": {
                "details": string;
                "params": {
                    "assetProxyId": string;
                    "newAssetProxy": string;
                    "oldAssetProxy": string;
                };
            };
            "setSignatureValidatorApproval(address,bool)": {
                "details": string;
                "params": {
                    "approval": string;
                    "validatorAddress": string;
                };
            };
        };
    };
    "userdoc": {
        "methods": {};
    };
};
