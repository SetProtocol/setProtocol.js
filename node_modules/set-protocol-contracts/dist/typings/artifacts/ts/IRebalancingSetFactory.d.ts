export declare const IRebalancingSetFactory: {
    "contractName": string;
    "abi": {
        "constant": boolean;
        "inputs": {
            "name": string;
            "type": string;
        }[];
        "name": string;
        "outputs": {
            "name": string;
            "type": string;
        }[];
        "payable": boolean;
        "stateMutability": string;
        "type": string;
    }[];
    "metadata": string;
    "bytecode": string;
    "deployedBytecode": string;
    "sourceMap": string;
    "deployedSourceMap": string;
    "source": string;
    "sourcePath": string;
    "compiler": {
        "name": string;
        "version": string;
    };
    "networks": {};
    "schemaVersion": string;
    "updatedAt": string;
    "devdoc": {
        "author": string;
        "methods": {
            "core()": {
                "return": string;
            };
            "createSet(address[],uint256[],uint256,bytes32,bytes32,bytes)": {
                "params": {
                    "_callData": string;
                    "_components": string;
                    "_name": string;
                    "_naturalUnit": string;
                    "_symbol": string;
                    "_units": string;
                };
                "return": string;
            };
            "maximumNaturalUnit()": {
                "return": string;
            };
            "maximumTimeToPivot()": {
                "return": string;
            };
            "minimumNaturalUnit()": {
                "return": string;
            };
            "minimumProposalPeriod()": {
                "return": string;
            };
            "minimumRebalanceInterval()": {
                "return": string;
            };
            "minimumTimeToPivot()": {
                "return": string;
            };
            "rebalanceAuctionModule()": {
                "return": string;
            };
        };
        "title": string;
    };
    "userdoc": {
        "methods": {
            "core()": {
                "notice": string;
            };
            "createSet(address[],uint256[],uint256,bytes32,bytes32,bytes)": {
                "notice": string;
            };
            "maximumNaturalUnit()": {
                "notice": string;
            };
            "maximumTimeToPivot()": {
                "notice": string;
            };
            "minimumNaturalUnit()": {
                "notice": string;
            };
            "minimumProposalPeriod()": {
                "notice": string;
            };
            "minimumRebalanceInterval()": {
                "notice": string;
            };
            "minimumTimeToPivot()": {
                "notice": string;
            };
            "rebalanceAuctionModule()": {
                "notice": string;
            };
        };
    };
};
