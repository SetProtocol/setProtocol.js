import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class IVaultContract extends BaseContract {
    withdrawTo: {
        sendTransactionAsync(_token: string, _to: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_token: string, _to: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_token: string, _to: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_token: string, _to: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    incrementTokenOwner: {
        sendTransactionAsync(_token: string, _owner: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_token: string, _owner: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_token: string, _owner: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_token: string, _owner: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    decrementTokenOwner: {
        sendTransactionAsync(_token: string, _owner: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_token: string, _owner: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_token: string, _owner: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_token: string, _owner: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    transferBalance: {
        sendTransactionAsync(_token: string, _from: string, _to: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_token: string, _from: string, _to: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_token: string, _from: string, _to: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_token: string, _from: string, _to: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    batchWithdrawTo: {
        sendTransactionAsync(_tokens: string[], _to: string, _quantities: BigNumber[], txData?: Tx): Promise<string>;
        estimateGasAsync(_tokens: string[], _to: string, _quantities: BigNumber[], txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_tokens: string[], _to: string, _quantities: BigNumber[], txData?: Tx): string;
        callAsync(_tokens: string[], _to: string, _quantities: BigNumber[], txData?: Tx): Promise<void>;
    };
    batchIncrementTokenOwner: {
        sendTransactionAsync(_tokens: string[], _owner: string, _quantities: BigNumber[], txData?: Tx): Promise<string>;
        estimateGasAsync(_tokens: string[], _owner: string, _quantities: BigNumber[], txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_tokens: string[], _owner: string, _quantities: BigNumber[], txData?: Tx): string;
        callAsync(_tokens: string[], _owner: string, _quantities: BigNumber[], txData?: Tx): Promise<void>;
    };
    batchDecrementTokenOwner: {
        sendTransactionAsync(_tokens: string[], _owner: string, _quantities: BigNumber[], txData?: Tx): Promise<string>;
        estimateGasAsync(_tokens: string[], _owner: string, _quantities: BigNumber[], txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_tokens: string[], _owner: string, _quantities: BigNumber[], txData?: Tx): string;
        callAsync(_tokens: string[], _owner: string, _quantities: BigNumber[], txData?: Tx): Promise<void>;
    };
    batchTransferBalance: {
        sendTransactionAsync(_tokens: string[], _from: string, _to: string, _quantities: BigNumber[], txData?: Tx): Promise<string>;
        estimateGasAsync(_tokens: string[], _from: string, _to: string, _quantities: BigNumber[], txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_tokens: string[], _from: string, _to: string, _quantities: BigNumber[], txData?: Tx): string;
        callAsync(_tokens: string[], _from: string, _to: string, _quantities: BigNumber[], txData?: Tx): Promise<void>;
    };
    getOwnerBalance: {
        callAsync(_token: string, _owner: string, defaultBlock?: any): Promise<BigNumber>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<IVaultContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<IVaultContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
