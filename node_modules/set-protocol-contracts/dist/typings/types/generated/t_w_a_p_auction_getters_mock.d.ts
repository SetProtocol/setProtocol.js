import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class TWAPAuctionGettersMockContract extends BaseContract {
    minimumBid: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    getCombinedCurrentSetUnits: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber[]>;
    };
    getCombinedNextSetUnits: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber[]>;
    };
    twapAuctionState: {
        callAsync(defaultBlock?: any): Promise<[{
            auction: {
                maxNaturalUnit: BigNumber;
                minimumBid: BigNumber;
                startTime: BigNumber;
                startingCurrentSets: BigNumber;
                remainingCurrentSets: BigNumber;
                combinedTokenArray: string[];
                combinedCurrentSetUnits: BigNumber[];
                combinedNextSetUnits: BigNumber[];
            };
            endTime: BigNumber;
            startPrice: BigNumber;
            endPrice: BigNumber;
        }, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;
    };
    getLastChunkAuctionEnd: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    remainingCurrentSets: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    startingCurrentSets: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    getChunkSize: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    getCombinedTokenArray: {
        callAsync(_set: string, defaultBlock?: any): Promise<string[]>;
    };
    getChunkAuctionPeriod: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    getTotalSetsRemaining: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    auctionState: {
        callAsync(defaultBlock?: any): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;
    };
    getOrderSize: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    getOrderRemaining: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    setState: {
        sendTransactionAsync(_state: {
            orderSize: BigNumber;
            orderRemaining: BigNumber;
            lastChunkAuctionEnd: BigNumber;
            chunkAuctionPeriod: BigNumber;
            chunkSize: BigNumber;
            remainingCurrentSets: BigNumber;
        }, txData?: Tx): Promise<string>;
        estimateGasAsync(_state: {
            orderSize: BigNumber;
            orderRemaining: BigNumber;
            lastChunkAuctionEnd: BigNumber;
            chunkAuctionPeriod: BigNumber;
            chunkSize: BigNumber;
            remainingCurrentSets: BigNumber;
        }, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_state: {
            orderSize: BigNumber;
            orderRemaining: BigNumber;
            lastChunkAuctionEnd: BigNumber;
            chunkAuctionPeriod: BigNumber;
            chunkSize: BigNumber;
            remainingCurrentSets: BigNumber;
        }, txData?: Tx): string;
        callAsync(_state: {
            orderSize: BigNumber;
            orderRemaining: BigNumber;
            lastChunkAuctionEnd: BigNumber;
            chunkAuctionPeriod: BigNumber;
            chunkSize: BigNumber;
            remainingCurrentSets: BigNumber;
        }, txData?: Tx): Promise<void>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<TWAPAuctionGettersMockContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<TWAPAuctionGettersMockContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
