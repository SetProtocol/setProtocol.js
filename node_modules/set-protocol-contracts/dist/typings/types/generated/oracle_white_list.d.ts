import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class OracleWhiteListContract extends BaseContract {
    timeLockedUpgrades: {
        callAsync(index_0: string, defaultBlock?: any): Promise<BigNumber>;
    };
    oracleWhiteList: {
        callAsync(index_0: string, defaultBlock?: any): Promise<string>;
    };
    renounceOwnership: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    timeLockPeriod: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    owner: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    isOwner: {
        callAsync(defaultBlock?: any): Promise<boolean>;
    };
    setTimeLockPeriod: {
        sendTransactionAsync(_timeLockPeriod: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_timeLockPeriod: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_timeLockPeriod: BigNumber, txData?: Tx): string;
        callAsync(_timeLockPeriod: BigNumber, txData?: Tx): Promise<void>;
    };
    removeRegisteredUpgrade: {
        sendTransactionAsync(_upgradeHash: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_upgradeHash: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_upgradeHash: string, txData?: Tx): string;
        callAsync(_upgradeHash: string, txData?: Tx): Promise<void>;
    };
    addresses: {
        callAsync(index_0: BigNumber, defaultBlock?: any): Promise<string>;
    };
    transferOwnership: {
        sendTransactionAsync(newOwner: string, txData?: Tx): Promise<string>;
        estimateGasAsync(newOwner: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(newOwner: string, txData?: Tx): string;
        callAsync(newOwner: string, txData?: Tx): Promise<void>;
    };
    addTokenOraclePair: {
        sendTransactionAsync(_tokenAddress: string, _oracleAddress: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_tokenAddress: string, _oracleAddress: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_tokenAddress: string, _oracleAddress: string, txData?: Tx): string;
        callAsync(_tokenAddress: string, _oracleAddress: string, txData?: Tx): Promise<void>;
    };
    removeTokenOraclePair: {
        sendTransactionAsync(_tokenAddress: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_tokenAddress: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_tokenAddress: string, txData?: Tx): string;
        callAsync(_tokenAddress: string, txData?: Tx): Promise<void>;
    };
    editTokenOraclePair: {
        sendTransactionAsync(_tokenAddress: string, _oracleAddress: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_tokenAddress: string, _oracleAddress: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_tokenAddress: string, _oracleAddress: string, txData?: Tx): string;
        callAsync(_tokenAddress: string, _oracleAddress: string, txData?: Tx): Promise<void>;
    };
    validAddresses: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    getOracleAddressesByToken: {
        callAsync(_tokenAddresses: string[], defaultBlock?: any): Promise<string[]>;
    };
    getOracleAddressByToken: {
        callAsync(_tokenAddress: string, defaultBlock?: any): Promise<string>;
    };
    areValidAddresses: {
        callAsync(_tokenAddresses: string[], defaultBlock?: any): Promise<boolean>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<OracleWhiteListContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<OracleWhiteListContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
