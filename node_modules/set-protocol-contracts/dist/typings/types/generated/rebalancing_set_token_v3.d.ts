import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class RebalancingSetTokenV3Contract extends BaseContract {
    unitShares: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    setLiquidator: {
        sendTransactionAsync(_newLiquidator: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_newLiquidator: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_newLiquidator: string, txData?: Tx): string;
        callAsync(_newLiquidator: string, txData?: Tx): Promise<void>;
    };
    getUnits: {
        callAsync(defaultBlock?: any): Promise<BigNumber[]>;
    };
    name: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    entryFee: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    approve: {
        sendTransactionAsync(spender: string, value: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(spender: string, value: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(spender: string, value: BigNumber, txData?: Tx): string;
        callAsync(spender: string, value: BigNumber, txData?: Tx): Promise<boolean>;
    };
    liquidatorWhiteList: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    rebalanceInterval: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    totalSupply: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    rebalanceFailPeriod: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    tokenIsComponent: {
        callAsync(_tokenAddress: string, defaultBlock?: any): Promise<boolean>;
    };
    transferFrom: {
        sendTransactionAsync(from: string, to: string, value: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(from: string, to: string, value: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(from: string, to: string, value: BigNumber, txData?: Tx): string;
        callAsync(from: string, to: string, value: BigNumber, txData?: Tx): Promise<boolean>;
    };
    proposalPeriod: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    rebalanceFee: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    currentSet: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    decimals: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    increaseAllowance: {
        sendTransactionAsync(spender: string, addedValue: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(spender: string, addedValue: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(spender: string, addedValue: BigNumber, txData?: Tx): string;
        callAsync(spender: string, addedValue: BigNumber, txData?: Tx): Promise<boolean>;
    };
    liquidator: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    mint: {
        sendTransactionAsync(_issuer: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_issuer: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_issuer: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_issuer: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    naturalUnit: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    startingCurrentSetAmount: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    initialize: {
        sendTransactionAsync(_rebalanceFeeCalldata: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_rebalanceFeeCalldata: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_rebalanceFeeCalldata: string, txData?: Tx): string;
        callAsync(_rebalanceFeeCalldata: string, txData?: Tx): Promise<void>;
    };
    rebalanceFeeCalculator: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    feeRecipient: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    manager: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    componentWhiteList: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    getCombinedTokenArrayLength: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    biddingParameters: {
        callAsync(defaultBlock?: any): Promise<[BigNumber, BigNumber]>;
    };
    balanceOf: {
        callAsync(owner: string, defaultBlock?: any): Promise<BigNumber>;
    };
    endFailedAuction: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    startRebalance: {
        sendTransactionAsync(_nextSet: string, _liquidatorData: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_nextSet: string, _liquidatorData: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_nextSet: string, _liquidatorData: string, txData?: Tx): string;
        callAsync(_nextSet: string, _liquidatorData: string, txData?: Tx): Promise<void>;
    };
    getCombinedTokenArray: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    rebalanceIndex: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    endFailedRebalance: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    symbol: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    auctionLibrary: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    placeBid: {
        sendTransactionAsync(_quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_quantity: BigNumber, txData?: Tx): string;
        callAsync(_quantity: BigNumber, txData?: Tx): Promise<[string[], BigNumber[], BigNumber[]]>;
    };
    getComponents: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    rebalanceStartTime: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    getBidPrice: {
        callAsync(_quantity: BigNumber, defaultBlock?: any): Promise<[BigNumber[], BigNumber[]]>;
    };
    burn: {
        sendTransactionAsync(_from: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_from: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_from: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_from: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    getAuctionPriceParameters: {
        callAsync(defaultBlock?: any): Promise<BigNumber[]>;
    };
    getBiddingParameters: {
        callAsync(defaultBlock?: any): Promise<BigNumber[]>;
    };
    decreaseAllowance: {
        sendTransactionAsync(spender: string, subtractedValue: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(spender: string, subtractedValue: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(spender: string, subtractedValue: BigNumber, txData?: Tx): string;
        callAsync(spender: string, subtractedValue: BigNumber, txData?: Tx): Promise<boolean>;
    };
    transfer: {
        sendTransactionAsync(to: string, value: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(to: string, value: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(to: string, value: BigNumber, txData?: Tx): string;
        callAsync(to: string, value: BigNumber, txData?: Tx): Promise<boolean>;
    };
    proposalStartTime: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    lastRebalanceTimestamp: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    factory: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    nextSet: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    getCombinedNextSetUnits: {
        callAsync(defaultBlock?: any): Promise<BigNumber[]>;
    };
    SCALE_FACTOR: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    setManager: {
        sendTransactionAsync(_newManager: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_newManager: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_newManager: string, txData?: Tx): string;
        callAsync(_newManager: string, txData?: Tx): Promise<void>;
    };
    auctionPriceParameters: {
        callAsync(defaultBlock?: any): Promise<{}>;
    };
    allowance: {
        callAsync(owner: string, spender: string, defaultBlock?: any): Promise<BigNumber>;
    };
    setFeeRecipient: {
        sendTransactionAsync(_newFeeRecipient: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_newFeeRecipient: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_newFeeRecipient: string, txData?: Tx): string;
        callAsync(_newFeeRecipient: string, txData?: Tx): Promise<void>;
    };
    setEntryFee: {
        sendTransactionAsync(_newEntryFee: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_newEntryFee: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_newEntryFee: BigNumber, txData?: Tx): string;
        callAsync(_newEntryFee: BigNumber, txData?: Tx): Promise<void>;
    };
    getFailedAuctionWithdrawComponents: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    getCombinedCurrentUnits: {
        callAsync(defaultBlock?: any): Promise<BigNumber[]>;
    };
    hasBidded: {
        callAsync(defaultBlock?: any): Promise<boolean>;
    };
    core: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    rebalanceState: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    vault: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    settleRebalance: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    actualizeFee: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    adjustFee: {
        sendTransactionAsync(_newFeeData: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_newFeeData: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_newFeeData: string, txData?: Tx): string;
        callAsync(_newFeeData: string, txData?: Tx): Promise<void>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<RebalancingSetTokenV3Contract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<RebalancingSetTokenV3Contract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
