import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class RebalancingSetIssuanceModuleContract extends BaseContract {
    weth: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    vaultInstance: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    transferProxy: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    coreInstance: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    core: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    vault: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    issueRebalancingSet: {
        sendTransactionAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _keepChangeInVault: boolean, txData?: Tx): Promise<string>;
        estimateGasAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _keepChangeInVault: boolean, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _keepChangeInVault: boolean, txData?: Tx): string;
        callAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _keepChangeInVault: boolean, txData?: Tx): Promise<void>;
    };
    issueRebalancingSetWrappingEther: {
        sendTransactionAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _keepChangeInVault: boolean, txData?: Tx): Promise<string>;
        estimateGasAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _keepChangeInVault: boolean, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _keepChangeInVault: boolean, txData?: Tx): string;
        callAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _keepChangeInVault: boolean, txData?: Tx): Promise<void>;
    };
    redeemRebalancingSet: {
        sendTransactionAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _keepChangeInVault: boolean, txData?: Tx): Promise<string>;
        estimateGasAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _keepChangeInVault: boolean, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _keepChangeInVault: boolean, txData?: Tx): string;
        callAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _keepChangeInVault: boolean, txData?: Tx): Promise<void>;
    };
    redeemRebalancingSetUnwrappingEther: {
        sendTransactionAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _keepChangeInVault: boolean, txData?: Tx): Promise<string>;
        estimateGasAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _keepChangeInVault: boolean, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _keepChangeInVault: boolean, txData?: Tx): string;
        callAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _keepChangeInVault: boolean, txData?: Tx): Promise<void>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<RebalancingSetIssuanceModuleContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<RebalancingSetIssuanceModuleContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
