import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber, UInt } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class ICoreContract extends BaseContract {
    transferProxy: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    vault: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    exchangeIds: {
        callAsync(_exchangeId: UInt, defaultBlock?: any): Promise<string>;
    };
    validSets: {
        callAsync(index_0: string, defaultBlock?: any): Promise<boolean>;
    };
    validModules: {
        callAsync(index_0: string, defaultBlock?: any): Promise<boolean>;
    };
    validPriceLibraries: {
        callAsync(_priceLibrary: string, defaultBlock?: any): Promise<boolean>;
    };
    issue: {
        sendTransactionAsync(_set: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_set: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_set: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_set: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    issueTo: {
        sendTransactionAsync(_recipient: string, _set: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_recipient: string, _set: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_recipient: string, _set: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_recipient: string, _set: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    issueInVault: {
        sendTransactionAsync(_set: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_set: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_set: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_set: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    redeem: {
        sendTransactionAsync(_set: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_set: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_set: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_set: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    redeemTo: {
        sendTransactionAsync(_recipient: string, _set: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_recipient: string, _set: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_recipient: string, _set: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_recipient: string, _set: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    redeemInVault: {
        sendTransactionAsync(_set: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_set: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_set: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_set: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    redeemAndWithdrawTo: {
        sendTransactionAsync(_set: string, _to: string, _quantity: BigNumber, _toExclude: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_set: string, _to: string, _quantity: BigNumber, _toExclude: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_set: string, _to: string, _quantity: BigNumber, _toExclude: BigNumber, txData?: Tx): string;
        callAsync(_set: string, _to: string, _quantity: BigNumber, _toExclude: BigNumber, txData?: Tx): Promise<void>;
    };
    batchDeposit: {
        sendTransactionAsync(_tokens: string[], _quantities: BigNumber[], txData?: Tx): Promise<string>;
        estimateGasAsync(_tokens: string[], _quantities: BigNumber[], txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_tokens: string[], _quantities: BigNumber[], txData?: Tx): string;
        callAsync(_tokens: string[], _quantities: BigNumber[], txData?: Tx): Promise<void>;
    };
    batchWithdraw: {
        sendTransactionAsync(_tokens: string[], _quantities: BigNumber[], txData?: Tx): Promise<string>;
        estimateGasAsync(_tokens: string[], _quantities: BigNumber[], txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_tokens: string[], _quantities: BigNumber[], txData?: Tx): string;
        callAsync(_tokens: string[], _quantities: BigNumber[], txData?: Tx): Promise<void>;
    };
    deposit: {
        sendTransactionAsync(_token: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_token: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_token: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_token: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    withdraw: {
        sendTransactionAsync(_token: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_token: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_token: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_token: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    internalTransfer: {
        sendTransactionAsync(_token: string, _to: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_token: string, _to: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_token: string, _to: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_token: string, _to: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    createSet: {
        sendTransactionAsync(_factory: string, _components: string[], _units: BigNumber[], _naturalUnit: BigNumber, _name: string, _symbol: string, _callData: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_factory: string, _components: string[], _units: BigNumber[], _naturalUnit: BigNumber, _name: string, _symbol: string, _callData: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_factory: string, _components: string[], _units: BigNumber[], _naturalUnit: BigNumber, _name: string, _symbol: string, _callData: string, txData?: Tx): string;
        callAsync(_factory: string, _components: string[], _units: BigNumber[], _naturalUnit: BigNumber, _name: string, _symbol: string, _callData: string, txData?: Tx): Promise<string>;
    };
    depositModule: {
        sendTransactionAsync(_from: string, _to: string, _token: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_from: string, _to: string, _token: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_from: string, _to: string, _token: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_from: string, _to: string, _token: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    withdrawModule: {
        sendTransactionAsync(_from: string, _to: string, _token: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_from: string, _to: string, _token: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_from: string, _to: string, _token: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_from: string, _to: string, _token: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    batchDepositModule: {
        sendTransactionAsync(_from: string, _to: string, _tokens: string[], _quantities: BigNumber[], txData?: Tx): Promise<string>;
        estimateGasAsync(_from: string, _to: string, _tokens: string[], _quantities: BigNumber[], txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_from: string, _to: string, _tokens: string[], _quantities: BigNumber[], txData?: Tx): string;
        callAsync(_from: string, _to: string, _tokens: string[], _quantities: BigNumber[], txData?: Tx): Promise<void>;
    };
    batchWithdrawModule: {
        sendTransactionAsync(_from: string, _to: string, _tokens: string[], _quantities: BigNumber[], txData?: Tx): Promise<string>;
        estimateGasAsync(_from: string, _to: string, _tokens: string[], _quantities: BigNumber[], txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_from: string, _to: string, _tokens: string[], _quantities: BigNumber[], txData?: Tx): string;
        callAsync(_from: string, _to: string, _tokens: string[], _quantities: BigNumber[], txData?: Tx): Promise<void>;
    };
    issueModule: {
        sendTransactionAsync(_owner: string, _recipient: string, _set: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_owner: string, _recipient: string, _set: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_owner: string, _recipient: string, _set: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_owner: string, _recipient: string, _set: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    redeemModule: {
        sendTransactionAsync(_burnAddress: string, _incrementAddress: string, _set: string, _quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_burnAddress: string, _incrementAddress: string, _set: string, _quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_burnAddress: string, _incrementAddress: string, _set: string, _quantity: BigNumber, txData?: Tx): string;
        callAsync(_burnAddress: string, _incrementAddress: string, _set: string, _quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    batchIncrementTokenOwnerModule: {
        sendTransactionAsync(_tokens: string[], _owner: string, _quantities: BigNumber[], txData?: Tx): Promise<string>;
        estimateGasAsync(_tokens: string[], _owner: string, _quantities: BigNumber[], txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_tokens: string[], _owner: string, _quantities: BigNumber[], txData?: Tx): string;
        callAsync(_tokens: string[], _owner: string, _quantities: BigNumber[], txData?: Tx): Promise<void>;
    };
    batchDecrementTokenOwnerModule: {
        sendTransactionAsync(_tokens: string[], _owner: string, _quantities: BigNumber[], txData?: Tx): Promise<string>;
        estimateGasAsync(_tokens: string[], _owner: string, _quantities: BigNumber[], txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_tokens: string[], _owner: string, _quantities: BigNumber[], txData?: Tx): string;
        callAsync(_tokens: string[], _owner: string, _quantities: BigNumber[], txData?: Tx): Promise<void>;
    };
    batchTransferBalanceModule: {
        sendTransactionAsync(_tokens: string[], _from: string, _to: string, _quantities: BigNumber[], txData?: Tx): Promise<string>;
        estimateGasAsync(_tokens: string[], _from: string, _to: string, _quantities: BigNumber[], txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_tokens: string[], _from: string, _to: string, _quantities: BigNumber[], txData?: Tx): string;
        callAsync(_tokens: string[], _from: string, _to: string, _quantities: BigNumber[], txData?: Tx): Promise<void>;
    };
    transferModule: {
        sendTransactionAsync(_token: string, _quantity: BigNumber, _from: string, _to: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_token: string, _quantity: BigNumber, _from: string, _to: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_token: string, _quantity: BigNumber, _from: string, _to: string, txData?: Tx): string;
        callAsync(_token: string, _quantity: BigNumber, _from: string, _to: string, txData?: Tx): Promise<void>;
    };
    batchTransferModule: {
        sendTransactionAsync(_tokens: string[], _quantities: BigNumber[], _from: string, _to: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_tokens: string[], _quantities: BigNumber[], _from: string, _to: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_tokens: string[], _quantities: BigNumber[], _from: string, _to: string, txData?: Tx): string;
        callAsync(_tokens: string[], _quantities: BigNumber[], _from: string, _to: string, txData?: Tx): Promise<void>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<ICoreContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<ICoreContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
