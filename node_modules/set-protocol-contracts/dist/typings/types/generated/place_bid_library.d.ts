import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber, UInt } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class PlaceBidLibraryContract extends BaseContract {
    validatePlaceBid: {
        callAsync(_quantity: BigNumber, _coreAddress: string, _biddingParameters: {
            minimumBid: BigNumber;
            remainingCurrentSets: BigNumber;
            combinedCurrentUnits: BigNumber[];
            combinedNextSetUnits: BigNumber[];
            combinedTokenArray: string[];
        }, defaultBlock?: any): Promise<void>;
    };
    getBidPrice: {
        callAsync(_quantity: BigNumber, _auctionLibrary: string, _biddingParameters: {
            minimumBid: BigNumber;
            remainingCurrentSets: BigNumber;
            combinedCurrentUnits: BigNumber[];
            combinedNextSetUnits: BigNumber[];
            combinedTokenArray: string[];
        }, _auctionPriceParameters: {
            auctionStartTime: BigNumber;
            auctionTimeToPivot: BigNumber;
            auctionStartPrice: BigNumber;
            auctionPivotPrice: BigNumber;
        }, _rebalanceState: UInt, defaultBlock?: any): Promise<[BigNumber[], BigNumber[]]>;
    };
    createTokenFlowArrays: {
        callAsync(_unitsMultiplier: BigNumber, _priceNumerator: BigNumber, _priceDivisor: BigNumber, _biddingParameters: {
            minimumBid: BigNumber;
            remainingCurrentSets: BigNumber;
            combinedCurrentUnits: BigNumber[];
            combinedNextSetUnits: BigNumber[];
            combinedTokenArray: string[];
        }, defaultBlock?: any): Promise<[BigNumber[], BigNumber[]]>;
    };
    calculateTokenFlows: {
        callAsync(_currentUnit: BigNumber, _nextSetUnit: BigNumber, _unitsMultiplier: BigNumber, _priceNumerator: BigNumber, _priceDivisor: BigNumber, defaultBlock?: any): Promise<[BigNumber, BigNumber]>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<PlaceBidLibraryContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<PlaceBidLibraryContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
