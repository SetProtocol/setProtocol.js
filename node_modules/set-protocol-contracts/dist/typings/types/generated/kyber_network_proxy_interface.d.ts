import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class KyberNetworkProxyInterfaceContract extends BaseContract {
    getExpectedRate: {
        callAsync(src: string, dest: string, srcQty: BigNumber, defaultBlock?: any): Promise<[BigNumber, BigNumber]>;
    };
    trade: {
        sendTransactionAsync(src: string, srcAmount: BigNumber, dest: string, destAddress: string, maxDestAmount: BigNumber, minConversionRate: BigNumber, walletId: string, txData?: Tx): Promise<string>;
        estimateGasAsync(src: string, srcAmount: BigNumber, dest: string, destAddress: string, maxDestAmount: BigNumber, minConversionRate: BigNumber, walletId: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(src: string, srcAmount: BigNumber, dest: string, destAddress: string, maxDestAmount: BigNumber, minConversionRate: BigNumber, walletId: string, txData?: Tx): string;
        callAsync(src: string, srcAmount: BigNumber, dest: string, destAddress: string, maxDestAmount: BigNumber, minConversionRate: BigNumber, walletId: string, txData?: Tx): Promise<BigNumber>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<KyberNetworkProxyInterfaceContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<KyberNetworkProxyInterfaceContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
