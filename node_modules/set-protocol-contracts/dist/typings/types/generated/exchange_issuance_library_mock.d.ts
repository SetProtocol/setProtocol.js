import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber, UInt } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class ExchangeIssuanceLibraryMockContract extends BaseContract {
    testValidateQuantity: {
        callAsync(_set: string, _quantity: BigNumber, defaultBlock?: any): Promise<void>;
    };
    testValidatePostExchangeReceiveTokenBalances: {
        callAsync(_vault: string, _receiveTokens: string[], _requiredBalances: BigNumber[], _userToCheck: string, defaultBlock?: any): Promise<void>;
    };
    testValidateReceiveTokens: {
        callAsync(_receiveTokens: string[], _receiveTokenAmounts: BigNumber[], defaultBlock?: any): Promise<void>;
    };
    testValidateSendTokenParams: {
        callAsync(_core: string, _sendTokenExchangeIds: UInt[], _sendTokens: string[], _sendTokenAmounts: BigNumber[], defaultBlock?: any): Promise<void>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<ExchangeIssuanceLibraryMockContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<ExchangeIssuanceLibraryMockContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
