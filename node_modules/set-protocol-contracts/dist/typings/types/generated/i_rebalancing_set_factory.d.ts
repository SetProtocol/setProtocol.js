import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class IRebalancingSetFactoryContract extends BaseContract {
    createSet: {
        sendTransactionAsync(_components: string[], _units: BigNumber[], _naturalUnit: BigNumber, _name: string, _symbol: string, _callData: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_components: string[], _units: BigNumber[], _naturalUnit: BigNumber, _name: string, _symbol: string, _callData: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_components: string[], _units: BigNumber[], _naturalUnit: BigNumber, _name: string, _symbol: string, _callData: string, txData?: Tx): string;
        callAsync(_components: string[], _units: BigNumber[], _naturalUnit: BigNumber, _name: string, _symbol: string, _callData: string, txData?: Tx): Promise<string>;
    };
    core: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<string>;
    };
    minimumRebalanceInterval: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<BigNumber>;
    };
    minimumProposalPeriod: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<BigNumber>;
    };
    minimumTimeToPivot: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<BigNumber>;
    };
    maximumTimeToPivot: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<BigNumber>;
    };
    minimumNaturalUnit: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<BigNumber>;
    };
    maximumNaturalUnit: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<BigNumber>;
    };
    rebalanceAuctionModule: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<string>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<IRebalancingSetFactoryContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<IRebalancingSetFactoryContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
