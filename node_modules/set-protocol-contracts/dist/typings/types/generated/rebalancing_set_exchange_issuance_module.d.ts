import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber, UInt } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class RebalancingSetExchangeIssuanceModuleContract extends BaseContract {
    transferProxyInstance: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    exchangeIssuanceModuleInstance: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    vaultInstance: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    wethInstance: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    coreInstance: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    issueRebalancingSetWithEther: {
        sendTransactionAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _exchangeIssuanceParams: {
            setAddress: string;
            quantity: BigNumber;
            sendTokenExchangeIds: UInt[];
            sendTokens: string[];
            sendTokenAmounts: BigNumber[];
            receiveTokens: string[];
            receiveTokenAmounts: BigNumber[];
        }, _orderData: string, _keepChangeInVault: boolean, txData?: Tx): Promise<string>;
        estimateGasAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _exchangeIssuanceParams: {
            setAddress: string;
            quantity: BigNumber;
            sendTokenExchangeIds: UInt[];
            sendTokens: string[];
            sendTokenAmounts: BigNumber[];
            receiveTokens: string[];
            receiveTokenAmounts: BigNumber[];
        }, _orderData: string, _keepChangeInVault: boolean, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _exchangeIssuanceParams: {
            setAddress: string;
            quantity: BigNumber;
            sendTokenExchangeIds: UInt[];
            sendTokens: string[];
            sendTokenAmounts: BigNumber[];
            receiveTokens: string[];
            receiveTokenAmounts: BigNumber[];
        }, _orderData: string, _keepChangeInVault: boolean, txData?: Tx): string;
        callAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _exchangeIssuanceParams: {
            setAddress: string;
            quantity: BigNumber;
            sendTokenExchangeIds: UInt[];
            sendTokens: string[];
            sendTokenAmounts: BigNumber[];
            receiveTokens: string[];
            receiveTokenAmounts: BigNumber[];
        }, _orderData: string, _keepChangeInVault: boolean, txData?: Tx): Promise<void>;
    };
    issueRebalancingSetWithERC20: {
        sendTransactionAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _paymentTokenAddress: string, _paymentTokenQuantity: BigNumber, _exchangeIssuanceParams: {
            setAddress: string;
            quantity: BigNumber;
            sendTokenExchangeIds: UInt[];
            sendTokens: string[];
            sendTokenAmounts: BigNumber[];
            receiveTokens: string[];
            receiveTokenAmounts: BigNumber[];
        }, _orderData: string, _keepChangeInVault: boolean, txData?: Tx): Promise<string>;
        estimateGasAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _paymentTokenAddress: string, _paymentTokenQuantity: BigNumber, _exchangeIssuanceParams: {
            setAddress: string;
            quantity: BigNumber;
            sendTokenExchangeIds: UInt[];
            sendTokens: string[];
            sendTokenAmounts: BigNumber[];
            receiveTokens: string[];
            receiveTokenAmounts: BigNumber[];
        }, _orderData: string, _keepChangeInVault: boolean, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _paymentTokenAddress: string, _paymentTokenQuantity: BigNumber, _exchangeIssuanceParams: {
            setAddress: string;
            quantity: BigNumber;
            sendTokenExchangeIds: UInt[];
            sendTokens: string[];
            sendTokenAmounts: BigNumber[];
            receiveTokens: string[];
            receiveTokenAmounts: BigNumber[];
        }, _orderData: string, _keepChangeInVault: boolean, txData?: Tx): string;
        callAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _paymentTokenAddress: string, _paymentTokenQuantity: BigNumber, _exchangeIssuanceParams: {
            setAddress: string;
            quantity: BigNumber;
            sendTokenExchangeIds: UInt[];
            sendTokens: string[];
            sendTokenAmounts: BigNumber[];
            receiveTokens: string[];
            receiveTokenAmounts: BigNumber[];
        }, _orderData: string, _keepChangeInVault: boolean, txData?: Tx): Promise<void>;
    };
    redeemRebalancingSetIntoEther: {
        sendTransactionAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _exchangeIssuanceParams: {
            setAddress: string;
            quantity: BigNumber;
            sendTokenExchangeIds: UInt[];
            sendTokens: string[];
            sendTokenAmounts: BigNumber[];
            receiveTokens: string[];
            receiveTokenAmounts: BigNumber[];
        }, _orderData: string, _keepChangeInVault: boolean, txData?: Tx): Promise<string>;
        estimateGasAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _exchangeIssuanceParams: {
            setAddress: string;
            quantity: BigNumber;
            sendTokenExchangeIds: UInt[];
            sendTokens: string[];
            sendTokenAmounts: BigNumber[];
            receiveTokens: string[];
            receiveTokenAmounts: BigNumber[];
        }, _orderData: string, _keepChangeInVault: boolean, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _exchangeIssuanceParams: {
            setAddress: string;
            quantity: BigNumber;
            sendTokenExchangeIds: UInt[];
            sendTokens: string[];
            sendTokenAmounts: BigNumber[];
            receiveTokens: string[];
            receiveTokenAmounts: BigNumber[];
        }, _orderData: string, _keepChangeInVault: boolean, txData?: Tx): string;
        callAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _exchangeIssuanceParams: {
            setAddress: string;
            quantity: BigNumber;
            sendTokenExchangeIds: UInt[];
            sendTokens: string[];
            sendTokenAmounts: BigNumber[];
            receiveTokens: string[];
            receiveTokenAmounts: BigNumber[];
        }, _orderData: string, _keepChangeInVault: boolean, txData?: Tx): Promise<void>;
    };
    redeemRebalancingSetIntoERC20: {
        sendTransactionAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _outputTokenAddress: string, _exchangeIssuanceParams: {
            setAddress: string;
            quantity: BigNumber;
            sendTokenExchangeIds: UInt[];
            sendTokens: string[];
            sendTokenAmounts: BigNumber[];
            receiveTokens: string[];
            receiveTokenAmounts: BigNumber[];
        }, _orderData: string, _keepChangeInVault: boolean, txData?: Tx): Promise<string>;
        estimateGasAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _outputTokenAddress: string, _exchangeIssuanceParams: {
            setAddress: string;
            quantity: BigNumber;
            sendTokenExchangeIds: UInt[];
            sendTokens: string[];
            sendTokenAmounts: BigNumber[];
            receiveTokens: string[];
            receiveTokenAmounts: BigNumber[];
        }, _orderData: string, _keepChangeInVault: boolean, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _outputTokenAddress: string, _exchangeIssuanceParams: {
            setAddress: string;
            quantity: BigNumber;
            sendTokenExchangeIds: UInt[];
            sendTokens: string[];
            sendTokenAmounts: BigNumber[];
            receiveTokens: string[];
            receiveTokenAmounts: BigNumber[];
        }, _orderData: string, _keepChangeInVault: boolean, txData?: Tx): string;
        callAsync(_rebalancingSetAddress: string, _rebalancingSetQuantity: BigNumber, _outputTokenAddress: string, _exchangeIssuanceParams: {
            setAddress: string;
            quantity: BigNumber;
            sendTokenExchangeIds: UInt[];
            sendTokens: string[];
            sendTokenAmounts: BigNumber[];
            receiveTokens: string[];
            receiveTokenAmounts: BigNumber[];
        }, _orderData: string, _keepChangeInVault: boolean, txData?: Tx): Promise<void>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<RebalancingSetExchangeIssuanceModuleContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<RebalancingSetExchangeIssuanceModuleContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
