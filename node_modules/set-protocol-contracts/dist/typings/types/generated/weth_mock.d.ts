import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class WethMockContract extends BaseContract {
    name: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    approve: {
        sendTransactionAsync(guy: string, wad: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(guy: string, wad: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(guy: string, wad: BigNumber, txData?: Tx): string;
        callAsync(guy: string, wad: BigNumber, txData?: Tx): Promise<boolean>;
    };
    totalSupply: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    transferFrom: {
        sendTransactionAsync(src: string, dst: string, wad: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(src: string, dst: string, wad: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(src: string, dst: string, wad: BigNumber, txData?: Tx): string;
        callAsync(src: string, dst: string, wad: BigNumber, txData?: Tx): Promise<boolean>;
    };
    withdraw: {
        sendTransactionAsync(wad: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(wad: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(wad: BigNumber, txData?: Tx): string;
        callAsync(wad: BigNumber, txData?: Tx): Promise<void>;
    };
    decimals: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    balanceOf: {
        callAsync(index_0: string, defaultBlock?: any): Promise<BigNumber>;
    };
    symbol: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    transfer: {
        sendTransactionAsync(dst: string, wad: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(dst: string, wad: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(dst: string, wad: BigNumber, txData?: Tx): string;
        callAsync(dst: string, wad: BigNumber, txData?: Tx): Promise<boolean>;
    };
    deposit: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    allowance: {
        callAsync(index_0: string, index_1: string, defaultBlock?: any): Promise<BigNumber>;
    };
    changeAllowanceProxy: {
        sendTransactionAsync(_owner: string, _spender: string, _value: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_owner: string, _spender: string, _value: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_owner: string, _spender: string, _value: BigNumber, txData?: Tx): string;
        callAsync(_owner: string, _spender: string, _value: BigNumber, txData?: Tx): Promise<void>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<WethMockContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<WethMockContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
