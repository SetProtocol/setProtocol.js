import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class TwoAssetPriceBoundedLinearAuctionMockContract extends BaseContract {
    auctionPeriod: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    auctionInfo: {
        callAsync(defaultBlock?: any): Promise<[{
            maxNaturalUnit: BigNumber;
            minimumBid: BigNumber;
            startTime: BigNumber;
            startingCurrentSets: BigNumber;
            remainingCurrentSets: BigNumber;
            combinedTokenArray: string[];
            combinedCurrentSetUnits: BigNumber[];
            combinedNextSetUnits: BigNumber[];
        }, BigNumber, BigNumber, BigNumber]>;
    };
    rangeEnd: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    rangeStart: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    oracleWhiteList: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    validateTwoAssetPriceBoundedAuctionMock: {
        callAsync(_currentSet: string, _nextSet: string, defaultBlock?: any): Promise<void>;
    };
    calculateMinimumBid: {
        sendTransactionAsync(_currentSet: string, _nextSet: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_currentSet: string, _nextSet: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_currentSet: string, _nextSet: string, txData?: Tx): string;
        callAsync(_currentSet: string, _nextSet: string, txData?: Tx): Promise<BigNumber>;
    };
    calculateStartPriceMock: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    calculateEndPriceMock: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    parameterizeAuction: {
        sendTransactionAsync(_combinedTokenArray: string[], _combinedCurrentSetUnits: BigNumber[], _combinedNextSetUnits: BigNumber[], txData?: Tx): Promise<string>;
        estimateGasAsync(_combinedTokenArray: string[], _combinedCurrentSetUnits: BigNumber[], _combinedNextSetUnits: BigNumber[], txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_combinedTokenArray: string[], _combinedCurrentSetUnits: BigNumber[], _combinedNextSetUnits: BigNumber[], txData?: Tx): string;
        callAsync(_combinedTokenArray: string[], _combinedCurrentSetUnits: BigNumber[], _combinedNextSetUnits: BigNumber[], txData?: Tx): Promise<void>;
    };
    getCombinedTokenArray: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<TwoAssetPriceBoundedLinearAuctionMockContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<TwoAssetPriceBoundedLinearAuctionMockContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
