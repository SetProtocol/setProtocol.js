import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class FactoryUtilsLibraryContract extends BaseContract {
    validateRebalanceSetCalldata: {
        callAsync(_parameters: {
            manager: string;
            liquidator: string;
            feeRecipient: string;
            rebalanceFeeCalculator: string;
            rebalanceInterval: BigNumber;
            rebalanceFailPeriod: BigNumber;
            lastRebalanceTimestamp: BigNumber;
            entryFee: BigNumber;
            rebalanceFeeCalculatorData: string;
        }, _liquidatorWhitelist: string, _feeCalculatorWhitelist: string, _minimumRebalanceInterval: BigNumber, _minimumFailRebalancePeriod: BigNumber, _maximumFailRebalancePeriod: BigNumber, defaultBlock?: any): Promise<void>;
    };
    parseRebalanceSetCallData: {
        callAsync(_callData: string, defaultBlock?: any): Promise<{}>;
    };
    validateRebalancingSet: {
        callAsync(_setDetails: {
            naturalUnit: BigNumber;
            components: string[];
            units: BigNumber[];
        }, _core: string, _sender: string, _minimumNaturalUnit: BigNumber, _maximumNaturalUnit: BigNumber, defaultBlock?: any): Promise<void>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<FactoryUtilsLibraryContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<FactoryUtilsLibraryContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
