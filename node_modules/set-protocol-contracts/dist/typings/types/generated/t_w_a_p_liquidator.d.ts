import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class TWAPLiquidatorContract extends BaseContract {
    minimumBid: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    name: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    auctionPeriod: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    expectedChunkAuctionLength: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    getCombinedCurrentSetUnits: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber[]>;
    };
    AUCTION_COMPLETION_BUFFER: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    auctions: {
        callAsync(index_0: string, defaultBlock?: any): Promise<[{
            auction: {
                maxNaturalUnit: BigNumber;
                minimumBid: BigNumber;
                startTime: BigNumber;
                startingCurrentSets: BigNumber;
                remainingCurrentSets: BigNumber;
                combinedTokenArray: string[];
                combinedCurrentSetUnits: BigNumber[];
                combinedNextSetUnits: BigNumber[];
            };
            endTime: BigNumber;
            startPrice: BigNumber;
            endPrice: BigNumber;
        }, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;
    };
    getCombinedNextSetUnits: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber[]>;
    };
    getLastChunkAuctionEnd: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    remainingCurrentSets: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    startingCurrentSets: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    getChunkSize: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    rangeEnd: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    renounceOwnership: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    getCombinedTokenArray: {
        callAsync(_set: string, defaultBlock?: any): Promise<string[]>;
    };
    rangeStart: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    getChunkAuctionPeriod: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    getTotalSetsRemaining: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    getOrderSize: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    owner: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    isOwner: {
        callAsync(defaultBlock?: any): Promise<boolean>;
    };
    oracleWhiteList: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    getOrderRemaining: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    core: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    transferOwnership: {
        sendTransactionAsync(newOwner: string, txData?: Tx): Promise<string>;
        estimateGasAsync(newOwner: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(newOwner: string, txData?: Tx): string;
        callAsync(newOwner: string, txData?: Tx): Promise<void>;
    };
    chunkSizeWhiteList: {
        callAsync(index_0: string, defaultBlock?: any): Promise<[BigNumber, BigNumber]>;
    };
    startRebalance: {
        sendTransactionAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, _liquidatorData: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, _liquidatorData: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, _liquidatorData: string, txData?: Tx): string;
        callAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, _liquidatorData: string, txData?: Tx): Promise<void>;
    };
    placeBid: {
        sendTransactionAsync(_quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_quantity: BigNumber, txData?: Tx): string;
        callAsync(_quantity: BigNumber, txData?: Tx): Promise<{}>;
    };
    getBidPrice: {
        callAsync(_set: string, _quantity: BigNumber, defaultBlock?: any): Promise<{}>;
    };
    iterateChunkAuction: {
        sendTransactionAsync(_set: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_set: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_set: string, txData?: Tx): string;
        callAsync(_set: string, txData?: Tx): Promise<void>;
    };
    settleRebalance: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    endFailedRebalance: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    setChunkSizeBounds: {
        sendTransactionAsync(_assetOne: string, _assetTwo: string, _assetPairBounds: {
            min: BigNumber;
            max: BigNumber;
        }, txData?: Tx): Promise<string>;
        estimateGasAsync(_assetOne: string, _assetTwo: string, _assetPairBounds: {
            min: BigNumber;
            max: BigNumber;
        }, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_assetOne: string, _assetTwo: string, _assetPairBounds: {
            min: BigNumber;
            max: BigNumber;
        }, txData?: Tx): string;
        callAsync(_assetOne: string, _assetTwo: string, _assetPairBounds: {
            min: BigNumber;
            max: BigNumber;
        }, txData?: Tx): Promise<void>;
    };
    hasRebalanceFailed: {
        callAsync(_set: string, defaultBlock?: any): Promise<boolean>;
    };
    auctionPriceParameters: {
        callAsync(_set: string, defaultBlock?: any): Promise<{}>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<TWAPLiquidatorContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<TWAPLiquidatorContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
