import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class IAssetProxyContract extends BaseContract {
    addAuthorizedAddress: {
        sendTransactionAsync(target: string, txData?: Tx): Promise<string>;
        estimateGasAsync(target: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(target: string, txData?: Tx): string;
        callAsync(target: string, txData?: Tx): Promise<void>;
    };
    removeAuthorizedAddress: {
        sendTransactionAsync(target: string, txData?: Tx): Promise<string>;
        estimateGasAsync(target: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(target: string, txData?: Tx): string;
        callAsync(target: string, txData?: Tx): Promise<void>;
    };
    removeAuthorizedAddressAtIndex: {
        sendTransactionAsync(target: string, index: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(target: string, index: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(target: string, index: BigNumber, txData?: Tx): string;
        callAsync(target: string, index: BigNumber, txData?: Tx): Promise<void>;
    };
    getAuthorizedAddresses: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    transferOwnership: {
        sendTransactionAsync(newOwner: string, txData?: Tx): Promise<string>;
        estimateGasAsync(newOwner: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(newOwner: string, txData?: Tx): string;
        callAsync(newOwner: string, txData?: Tx): Promise<void>;
    };
    transferFrom: {
        sendTransactionAsync(assetData: string, from: string, to: string, amount: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(assetData: string, from: string, to: string, amount: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(assetData: string, from: string, to: string, amount: BigNumber, txData?: Tx): string;
        callAsync(assetData: string, from: string, to: string, amount: BigNumber, txData?: Tx): Promise<void>;
    };
    getProxyId: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<IAssetProxyContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<IAssetProxyContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
