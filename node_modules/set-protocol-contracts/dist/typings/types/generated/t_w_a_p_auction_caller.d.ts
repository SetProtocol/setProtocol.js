import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class TWAPAuctionCallerContract extends BaseContract {
    rebalanceFailPeriod: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    twapAuction: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    validateLiquidatorData: {
        sendTransactionAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, _liquidatorData: {
            chunkSizeValue: BigNumber;
            chunkAuctionPeriod: BigNumber;
        }, txData?: Tx): Promise<string>;
        estimateGasAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, _liquidatorData: {
            chunkSizeValue: BigNumber;
            chunkAuctionPeriod: BigNumber;
        }, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, _liquidatorData: {
            chunkSizeValue: BigNumber;
            chunkAuctionPeriod: BigNumber;
        }, txData?: Tx): string;
        callAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, _liquidatorData: {
            chunkSizeValue: BigNumber;
            chunkAuctionPeriod: BigNumber;
        }, txData?: Tx): Promise<void>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<TWAPAuctionCallerContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<TWAPAuctionCallerContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
