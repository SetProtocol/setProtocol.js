import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class RebalancingSetStateContract extends BaseContract {
    unitShares: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    entryFee: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    liquidatorWhiteList: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    rebalanceInterval: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    rebalanceFailPeriod: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    currentSet: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    liquidator: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    naturalUnit: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    rebalanceFeeCalculator: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    feeRecipient: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    manager: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    componentWhiteList: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    rebalanceIndex: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    rebalanceStartTime: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    lastRebalanceTimestamp: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    factory: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    nextSet: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    hasBidded: {
        callAsync(defaultBlock?: any): Promise<boolean>;
    };
    core: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    rebalanceState: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    vault: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    setManager: {
        sendTransactionAsync(_newManager: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_newManager: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_newManager: string, txData?: Tx): string;
        callAsync(_newManager: string, txData?: Tx): Promise<void>;
    };
    setEntryFee: {
        sendTransactionAsync(_newEntryFee: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_newEntryFee: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_newEntryFee: BigNumber, txData?: Tx): string;
        callAsync(_newEntryFee: BigNumber, txData?: Tx): Promise<void>;
    };
    setLiquidator: {
        sendTransactionAsync(_newLiquidator: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_newLiquidator: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_newLiquidator: string, txData?: Tx): string;
        callAsync(_newLiquidator: string, txData?: Tx): Promise<void>;
    };
    setFeeRecipient: {
        sendTransactionAsync(_newFeeRecipient: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_newFeeRecipient: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_newFeeRecipient: string, txData?: Tx): string;
        callAsync(_newFeeRecipient: string, txData?: Tx): Promise<void>;
    };
    rebalanceFee: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    getComponents: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    getUnits: {
        callAsync(defaultBlock?: any): Promise<BigNumber[]>;
    };
    tokenIsComponent: {
        callAsync(_tokenAddress: string, defaultBlock?: any): Promise<boolean>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<RebalancingSetStateContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<RebalancingSetStateContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
