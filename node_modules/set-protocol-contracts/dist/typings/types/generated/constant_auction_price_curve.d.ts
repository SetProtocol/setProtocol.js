import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class ConstantAuctionPriceCurveContract extends BaseContract {
    MIN_PIVOT_PRICE_DIVISOR: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    MAX_PIVOT_PRICE_NUMERATOR: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    priceNumerator: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    priceDivisor: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    validateAuctionPriceParameters: {
        callAsync(_auctionPriceParameters: {
            auctionStartTime: BigNumber;
            auctionTimeToPivot: BigNumber;
            auctionStartPrice: BigNumber;
            auctionPivotPrice: BigNumber;
        }, defaultBlock?: any): Promise<void>;
    };
    getCurrentPrice: {
        callAsync(index_0: {
            auctionStartTime: BigNumber;
            auctionTimeToPivot: BigNumber;
            auctionStartPrice: BigNumber;
            auctionPivotPrice: BigNumber;
        }, defaultBlock?: any): Promise<[BigNumber, BigNumber]>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<ConstantAuctionPriceCurveContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<ConstantAuctionPriceCurveContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
