import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber, UInt } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class CoreAdminContract extends BaseContract {
    validFactories: {
        callAsync(_factory: string, defaultBlock?: any): Promise<boolean>;
    };
    timeLockedUpgrades: {
        callAsync(index_0: string, defaultBlock?: any): Promise<BigNumber>;
    };
    exchanges: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    setTokens: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    exchangeIds: {
        callAsync(_exchangeId: UInt, defaultBlock?: any): Promise<string>;
    };
    validModules: {
        callAsync(_module: string, defaultBlock?: any): Promise<boolean>;
    };
    transferProxy: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    renounceOwnership: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    operationState: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    timeLockPeriod: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    owner: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    isOwner: {
        callAsync(defaultBlock?: any): Promise<boolean>;
    };
    setTimeLockPeriod: {
        sendTransactionAsync(_timeLockPeriod: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_timeLockPeriod: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_timeLockPeriod: BigNumber, txData?: Tx): string;
        callAsync(_timeLockPeriod: BigNumber, txData?: Tx): Promise<void>;
    };
    validPriceLibraries: {
        callAsync(_priceLibrary: string, defaultBlock?: any): Promise<boolean>;
    };
    state: {
        callAsync(defaultBlock?: any): Promise<[BigNumber, string, string, string, string]>;
    };
    priceLibraries: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    disabledSets: {
        callAsync(_set: string, defaultBlock?: any): Promise<boolean>;
    };
    transferOwnership: {
        sendTransactionAsync(newOwner: string, txData?: Tx): Promise<string>;
        estimateGasAsync(newOwner: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(newOwner: string, txData?: Tx): string;
        callAsync(newOwner: string, txData?: Tx): Promise<void>;
    };
    modules: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    vault: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    factories: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    validSets: {
        callAsync(_set: string, defaultBlock?: any): Promise<boolean>;
    };
    addFactory: {
        sendTransactionAsync(_factory: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_factory: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_factory: string, txData?: Tx): string;
        callAsync(_factory: string, txData?: Tx): Promise<void>;
    };
    removeFactory: {
        sendTransactionAsync(_factory: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_factory: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_factory: string, txData?: Tx): string;
        callAsync(_factory: string, txData?: Tx): Promise<void>;
    };
    addExchange: {
        sendTransactionAsync(_exchangeId: UInt, _exchange: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_exchangeId: UInt, _exchange: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_exchangeId: UInt, _exchange: string, txData?: Tx): string;
        callAsync(_exchangeId: UInt, _exchange: string, txData?: Tx): Promise<void>;
    };
    removeExchange: {
        sendTransactionAsync(_exchangeId: UInt, _exchange: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_exchangeId: UInt, _exchange: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_exchangeId: UInt, _exchange: string, txData?: Tx): string;
        callAsync(_exchangeId: UInt, _exchange: string, txData?: Tx): Promise<void>;
    };
    addModule: {
        sendTransactionAsync(_module: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_module: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_module: string, txData?: Tx): string;
        callAsync(_module: string, txData?: Tx): Promise<void>;
    };
    removeModule: {
        sendTransactionAsync(_module: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_module: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_module: string, txData?: Tx): string;
        callAsync(_module: string, txData?: Tx): Promise<void>;
    };
    disableSet: {
        sendTransactionAsync(_set: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_set: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_set: string, txData?: Tx): string;
        callAsync(_set: string, txData?: Tx): Promise<void>;
    };
    reenableSet: {
        sendTransactionAsync(_set: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_set: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_set: string, txData?: Tx): string;
        callAsync(_set: string, txData?: Tx): Promise<void>;
    };
    addPriceLibrary: {
        sendTransactionAsync(_priceLibrary: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_priceLibrary: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_priceLibrary: string, txData?: Tx): string;
        callAsync(_priceLibrary: string, txData?: Tx): Promise<void>;
    };
    removePriceLibrary: {
        sendTransactionAsync(_priceLibrary: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_priceLibrary: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_priceLibrary: string, txData?: Tx): string;
        callAsync(_priceLibrary: string, txData?: Tx): Promise<void>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<CoreAdminContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<CoreAdminContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
