import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class KyberNetworkWrapperContract extends BaseContract {
    setTransferProxy: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    KYBER_TRADE_LENGTH: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    kyberNetworkProxy: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    core: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    conversionRate: {
        callAsync(_sourceTokens: string[], _destinationTokens: string[], _quantities: BigNumber[], defaultBlock?: any): Promise<[BigNumber[], BigNumber[]]>;
    };
    exchange: {
        sendTransactionAsync(_exchangeData: {
            caller: string;
            orderCount: BigNumber;
        }, _tradesData: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_exchangeData: {
            caller: string;
            orderCount: BigNumber;
        }, _tradesData: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_exchangeData: {
            caller: string;
            orderCount: BigNumber;
        }, _tradesData: string, txData?: Tx): string;
        callAsync(_exchangeData: {
            caller: string;
            orderCount: BigNumber;
        }, _tradesData: string, txData?: Tx): Promise<{}>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<KyberNetworkWrapperContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<KyberNetworkWrapperContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
