import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class CommonMathMockContract extends BaseContract {
    testMaxUInt256: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    testSafePower: {
        callAsync(a: BigNumber, pow: BigNumber, defaultBlock?: any): Promise<BigNumber>;
    };
    testScaleFactor: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    testScale: {
        callAsync(a: BigNumber, defaultBlock?: any): Promise<BigNumber>;
    };
    testDeScale: {
        callAsync(a: BigNumber, defaultBlock?: any): Promise<BigNumber>;
    };
    testDivCeil: {
        callAsync(a: BigNumber, b: BigNumber, defaultBlock?: any): Promise<BigNumber>;
    };
    testGetPartialAmount: {
        callAsync(_principal: BigNumber, _numerator: BigNumber, _denominator: BigNumber, defaultBlock?: any): Promise<BigNumber>;
    };
    testCeilLog10: {
        callAsync(_value: BigNumber, defaultBlock?: any): Promise<BigNumber>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<CommonMathMockContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<CommonMathMockContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
