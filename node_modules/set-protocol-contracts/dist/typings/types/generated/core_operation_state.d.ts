import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber, UInt } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class CoreOperationStateContract extends BaseContract {
    validFactories: {
        callAsync(_factory: string, defaultBlock?: any): Promise<boolean>;
    };
    exchanges: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    setTokens: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    exchangeIds: {
        callAsync(_exchangeId: UInt, defaultBlock?: any): Promise<string>;
    };
    validModules: {
        callAsync(_module: string, defaultBlock?: any): Promise<boolean>;
    };
    transferProxy: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    renounceOwnership: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    operationState: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    owner: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    isOwner: {
        callAsync(defaultBlock?: any): Promise<boolean>;
    };
    validPriceLibraries: {
        callAsync(_priceLibrary: string, defaultBlock?: any): Promise<boolean>;
    };
    state: {
        callAsync(defaultBlock?: any): Promise<[BigNumber, string, string, string, string]>;
    };
    priceLibraries: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    disabledSets: {
        callAsync(_set: string, defaultBlock?: any): Promise<boolean>;
    };
    transferOwnership: {
        sendTransactionAsync(newOwner: string, txData?: Tx): Promise<string>;
        estimateGasAsync(newOwner: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(newOwner: string, txData?: Tx): string;
        callAsync(newOwner: string, txData?: Tx): Promise<void>;
    };
    modules: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    vault: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    factories: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    validSets: {
        callAsync(_set: string, defaultBlock?: any): Promise<boolean>;
    };
    setOperationState: {
        sendTransactionAsync(_operationState: UInt, txData?: Tx): Promise<string>;
        estimateGasAsync(_operationState: UInt, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_operationState: UInt, txData?: Tx): string;
        callAsync(_operationState: UInt, txData?: Tx): Promise<void>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<CoreOperationStateContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<CoreOperationStateContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
