import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class AuctionGettersMockContract extends BaseContract {
    minimumBid: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    getCombinedCurrentSetUnits: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber[]>;
    };
    getCombinedNextSetUnits: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber[]>;
    };
    remainingCurrentSets: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    startingCurrentSets: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    getCombinedTokenArray: {
        callAsync(_set: string, defaultBlock?: any): Promise<string[]>;
    };
    auctionState: {
        callAsync(defaultBlock?: any): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;
    };
    setState: {
        sendTransactionAsync(_state: {
            maxNaturalUnit: BigNumber;
            minimumBid: BigNumber;
            startTime: BigNumber;
            startingCurrentSets: BigNumber;
            remainingCurrentSets: BigNumber;
            combinedTokenArray: string[];
            combinedCurrentSetUnits: BigNumber[];
            combinedNextSetUnits: BigNumber[];
        }, txData?: Tx): Promise<string>;
        estimateGasAsync(_state: {
            maxNaturalUnit: BigNumber;
            minimumBid: BigNumber;
            startTime: BigNumber;
            startingCurrentSets: BigNumber;
            remainingCurrentSets: BigNumber;
            combinedTokenArray: string[];
            combinedCurrentSetUnits: BigNumber[];
            combinedNextSetUnits: BigNumber[];
        }, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_state: {
            maxNaturalUnit: BigNumber;
            minimumBid: BigNumber;
            startTime: BigNumber;
            startingCurrentSets: BigNumber;
            remainingCurrentSets: BigNumber;
            combinedTokenArray: string[];
            combinedCurrentSetUnits: BigNumber[];
            combinedNextSetUnits: BigNumber[];
        }, txData?: Tx): string;
        callAsync(_state: {
            maxNaturalUnit: BigNumber;
            minimumBid: BigNumber;
            startTime: BigNumber;
            startingCurrentSets: BigNumber;
            remainingCurrentSets: BigNumber;
            combinedTokenArray: string[];
            combinedCurrentSetUnits: BigNumber[];
            combinedNextSetUnits: BigNumber[];
        }, txData?: Tx): Promise<void>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<AuctionGettersMockContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<AuctionGettersMockContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
