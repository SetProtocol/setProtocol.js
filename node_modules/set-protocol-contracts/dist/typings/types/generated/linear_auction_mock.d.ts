import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class LinearAuctionMockContract extends BaseContract {
    auctionPeriod: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    rangeEnd: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    rangeStart: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    auction: {
        callAsync(defaultBlock?: any): Promise<[{
            maxNaturalUnit: BigNumber;
            minimumBid: BigNumber;
            startTime: BigNumber;
            startingCurrentSets: BigNumber;
            remainingCurrentSets: BigNumber;
            combinedTokenArray: string[];
            combinedCurrentSetUnits: BigNumber[];
            combinedNextSetUnits: BigNumber[];
        }, BigNumber, BigNumber, BigNumber]>;
    };
    oracleWhiteList: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    initializeLinearAuction: {
        sendTransactionAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, txData?: Tx): string;
        callAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, txData?: Tx): Promise<void>;
    };
    reduceRemainingCurrentSets: {
        sendTransactionAsync(_quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_quantity: BigNumber, txData?: Tx): string;
        callAsync(_quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    hasAuctionFailed: {
        callAsync(defaultBlock?: any): Promise<boolean>;
    };
    getPrice: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    getTokenFlow: {
        callAsync(_quantity: BigNumber, defaultBlock?: any): Promise<{}>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<LinearAuctionMockContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<LinearAuctionMockContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
