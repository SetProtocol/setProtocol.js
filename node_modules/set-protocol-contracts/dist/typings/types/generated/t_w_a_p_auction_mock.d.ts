import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class TWAPAuctionMockContract extends BaseContract {
    auctionPeriod: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    expectedChunkAuctionLength: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    AUCTION_COMPLETION_BUFFER: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    rangeEnd: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    twapState: {
        callAsync(defaultBlock?: any): Promise<[{
            auction: {
                maxNaturalUnit: BigNumber;
                minimumBid: BigNumber;
                startTime: BigNumber;
                startingCurrentSets: BigNumber;
                remainingCurrentSets: BigNumber;
                combinedTokenArray: string[];
                combinedCurrentSetUnits: BigNumber[];
                combinedNextSetUnits: BigNumber[];
            };
            endTime: BigNumber;
            startPrice: BigNumber;
            endPrice: BigNumber;
        }, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;
    };
    rangeStart: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    oracleWhiteList: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    chunkSizeWhiteList: {
        callAsync(index_0: string, defaultBlock?: any): Promise<[BigNumber, BigNumber]>;
    };
    testInitializeTWAPAuction: {
        sendTransactionAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, _liquidatorData: {
            chunkSizeValue: BigNumber;
            chunkAuctionPeriod: BigNumber;
        }, txData?: Tx): Promise<string>;
        estimateGasAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, _liquidatorData: {
            chunkSizeValue: BigNumber;
            chunkAuctionPeriod: BigNumber;
        }, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, _liquidatorData: {
            chunkSizeValue: BigNumber;
            chunkAuctionPeriod: BigNumber;
        }, txData?: Tx): string;
        callAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, _liquidatorData: {
            chunkSizeValue: BigNumber;
            chunkAuctionPeriod: BigNumber;
        }, txData?: Tx): Promise<void>;
    };
    testAuctionNextChunk: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    testParseLiquidatorData: {
        callAsync(_liquidatorData: string, defaultBlock?: any): Promise<{}>;
    };
    testValidateLiquidatorData: {
        sendTransactionAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, _liquidatorData: {
            chunkSizeValue: BigNumber;
            chunkAuctionPeriod: BigNumber;
        }, txData?: Tx): Promise<string>;
        estimateGasAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, _liquidatorData: {
            chunkSizeValue: BigNumber;
            chunkAuctionPeriod: BigNumber;
        }, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, _liquidatorData: {
            chunkSizeValue: BigNumber;
            chunkAuctionPeriod: BigNumber;
        }, txData?: Tx): string;
        callAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, _liquidatorData: {
            chunkSizeValue: BigNumber;
            chunkAuctionPeriod: BigNumber;
        }, txData?: Tx): Promise<void>;
    };
    testValidateNextChunkAuction: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    testGetAssetPairHashFromCollateral: {
        callAsync(_currentSet: string, _nextSet: string, defaultBlock?: any): Promise<string>;
    };
    testGetAssetPairHash: {
        callAsync(_assetOne: string, _assetTwo: string, defaultBlock?: any): Promise<string>;
    };
    setRemainingCurrentSets: {
        sendTransactionAsync(_value: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_value: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_value: BigNumber, txData?: Tx): string;
        callAsync(_value: BigNumber, txData?: Tx): Promise<void>;
    };
    setLastChunkAuctionEnd: {
        sendTransactionAsync(_value: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_value: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_value: BigNumber, txData?: Tx): string;
        callAsync(_value: BigNumber, txData?: Tx): Promise<void>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<TWAPAuctionMockContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<TWAPAuctionMockContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
