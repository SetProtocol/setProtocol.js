import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class LiquidatorMockContract extends BaseContract {
    currentSet: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    placeBidQuantity: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    endFailedRebalanceHasBeenCalled: {
        callAsync(defaultBlock?: any): Promise<boolean>;
    };
    priceNumerator: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    hasFailed: {
        callAsync(defaultBlock?: any): Promise<boolean>;
    };
    liquidatorData: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    hasSettled: {
        callAsync(defaultBlock?: any): Promise<boolean>;
    };
    nextSet: {
        callAsync(defaultBlock?: any): Promise<string>;
    };
    priceDivisor: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    startRebalanceTime: {
        callAsync(defaultBlock?: any): Promise<BigNumber>;
    };
    getBidPrice: {
        callAsync(_set: string, _quantity: BigNumber, defaultBlock?: any): Promise<{}>;
    };
    placeBid: {
        sendTransactionAsync(_quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_quantity: BigNumber, txData?: Tx): string;
        callAsync(_quantity: BigNumber, txData?: Tx): Promise<{}>;
    };
    startRebalance: {
        sendTransactionAsync(_currentSet: string, _nextSet: string, startingCurrentSetAmount_: BigNumber, _liquidatorData: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_currentSet: string, _nextSet: string, startingCurrentSetAmount_: BigNumber, _liquidatorData: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_currentSet: string, _nextSet: string, startingCurrentSetAmount_: BigNumber, _liquidatorData: string, txData?: Tx): string;
        callAsync(_currentSet: string, _nextSet: string, startingCurrentSetAmount_: BigNumber, _liquidatorData: string, txData?: Tx): Promise<void>;
    };
    setAuctionPriceParameters: {
        sendTransactionAsync(_auctionStartTime: BigNumber, _auctionTimeToPivot: BigNumber, _auctionStartPrice: BigNumber, _auctionPivotPrice: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_auctionStartTime: BigNumber, _auctionTimeToPivot: BigNumber, _auctionStartPrice: BigNumber, _auctionPivotPrice: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_auctionStartTime: BigNumber, _auctionTimeToPivot: BigNumber, _auctionStartPrice: BigNumber, _auctionPivotPrice: BigNumber, txData?: Tx): string;
        callAsync(_auctionStartTime: BigNumber, _auctionTimeToPivot: BigNumber, _auctionStartPrice: BigNumber, _auctionPivotPrice: BigNumber, txData?: Tx): Promise<void>;
    };
    settleRebalance: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    hasRebalanceFailed: {
        callAsync(_set: string, defaultBlock?: any): Promise<boolean>;
    };
    endFailedRebalance: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    setHasFailed: {
        sendTransactionAsync(_hasFailed: boolean, txData?: Tx): Promise<string>;
        estimateGasAsync(_hasFailed: boolean, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_hasFailed: boolean, txData?: Tx): string;
        callAsync(_hasFailed: boolean, txData?: Tx): Promise<void>;
    };
    setPriceNumerator: {
        sendTransactionAsync(_priceNumerator: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_priceNumerator: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_priceNumerator: BigNumber, txData?: Tx): string;
        callAsync(_priceNumerator: BigNumber, txData?: Tx): Promise<void>;
    };
    auctionPriceParameters: {
        callAsync(_set: string, defaultBlock?: any): Promise<{}>;
    };
    getAuctionPriceParameters: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber[]>;
    };
    minimumBid: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    remainingCurrentSets: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    startingCurrentSets: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber>;
    };
    getCombinedTokenArray: {
        callAsync(_set: string, defaultBlock?: any): Promise<string[]>;
    };
    getCombinedCurrentSetUnits: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber[]>;
    };
    getCombinedNextSetUnits: {
        callAsync(_set: string, defaultBlock?: any): Promise<BigNumber[]>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<LiquidatorMockContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<LiquidatorMockContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
