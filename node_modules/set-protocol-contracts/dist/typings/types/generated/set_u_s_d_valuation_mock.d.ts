import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class SetUSDValuationMockContract extends BaseContract {
    calculateSetTokenDollarValue: {
        sendTransactionAsync(_set: string, _oracleWhitelist: string, txData?: Tx): Promise<string>;
        estimateGasAsync(_set: string, _oracleWhitelist: string, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_set: string, _oracleWhitelist: string, txData?: Tx): string;
        callAsync(_set: string, _oracleWhitelist: string, txData?: Tx): Promise<BigNumber>;
    };
    calculateTokenAllocationAmountUSD: {
        sendTransactionAsync(_tokenPrice: BigNumber, _naturalUnit: BigNumber, _unit: BigNumber, _tokenDecimal: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_tokenPrice: BigNumber, _naturalUnit: BigNumber, _unit: BigNumber, _tokenDecimal: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_tokenPrice: BigNumber, _naturalUnit: BigNumber, _unit: BigNumber, _tokenDecimal: BigNumber, txData?: Tx): string;
        callAsync(_tokenPrice: BigNumber, _naturalUnit: BigNumber, _unit: BigNumber, _tokenDecimal: BigNumber, txData?: Tx): Promise<BigNumber>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<SetUSDValuationMockContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<SetUSDValuationMockContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
