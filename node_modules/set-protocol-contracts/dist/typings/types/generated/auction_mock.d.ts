import Web3 from 'web3';
import Contract from "web3/eth/contract";
import { Tx } from "web3/eth/types";
import { BigNumber } from 'set-protocol-utils';
import { BaseContract } from '../base_contract';
export declare class AuctionMockContract extends BaseContract {
    auction: {
        callAsync(defaultBlock?: any): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;
    };
    initializeAuction: {
        sendTransactionAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, txData?: Tx): string;
        callAsync(_currentSet: string, _nextSet: string, _startingCurrentSetQuantity: BigNumber, txData?: Tx): Promise<void>;
    };
    reduceRemainingCurrentSets: {
        sendTransactionAsync(_quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_quantity: BigNumber, txData?: Tx): string;
        callAsync(_quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    validateBidQuantity: {
        sendTransactionAsync(_quantity: BigNumber, txData?: Tx): Promise<string>;
        estimateGasAsync(_quantity: BigNumber, txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(_quantity: BigNumber, txData?: Tx): string;
        callAsync(_quantity: BigNumber, txData?: Tx): Promise<void>;
    };
    validateAuctionCompletion: {
        sendTransactionAsync(txData?: Tx): Promise<string>;
        estimateGasAsync(txData?: Tx): Promise<number>;
        getABIEncodedTransactionData(txData?: Tx): string;
        callAsync(txData?: Tx): Promise<void>;
    };
    isAuctionActive: {
        callAsync(defaultBlock?: any): Promise<boolean>;
    };
    combinedTokenArray: {
        callAsync(defaultBlock?: any): Promise<string[]>;
    };
    combinedCurrentSetUnits: {
        callAsync(defaultBlock?: any): Promise<BigNumber[]>;
    };
    combinedNextSetUnits: {
        callAsync(defaultBlock?: any): Promise<BigNumber[]>;
    };
    deploy(data: string, args: any[]): Promise<any>;
    static deployed(web3: Web3, defaults: Tx): Promise<AuctionMockContract>;
    static at(address: string, web3: Web3, defaults: Tx): Promise<AuctionMockContract>;
    constructor(web3ContractInstance: Contract, defaults: Tx);
}
