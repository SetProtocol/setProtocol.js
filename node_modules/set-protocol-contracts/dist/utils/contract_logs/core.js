"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = require("bignumber.js");
function SetTokenCreated(_coreAddress, _setTokenAddress, _factory, _components, _units, _naturalUnit, _name, _symbol) {
    return {
        event: 'SetTokenCreated',
        address: _coreAddress,
        args: {
            _setTokenAddress: _setTokenAddress,
            _factory: _factory,
            _components: _components,
            _units: _units,
            _naturalUnit: _naturalUnit,
            _name: _name,
            _symbol: _symbol,
        },
    };
}
exports.SetTokenCreated = SetTokenCreated;
function OperationStateChanged(_coreAddress, _prevState, _newState) {
    return {
        event: 'OperationStateChanged',
        address: _coreAddress,
        args: {
            _prevState: _prevState,
            _newState: _newState,
        },
    };
}
exports.OperationStateChanged = OperationStateChanged;
function UpgradeRegistered(_coreAddress, _upgradeHash, _timestamp) {
    return {
        event: 'UpgradeRegistered',
        address: _coreAddress,
        args: {
            _upgradeHash: _upgradeHash,
            _timestamp: _timestamp,
        },
    };
}
exports.UpgradeRegistered = UpgradeRegistered;
function UpgradeRegisteredV2(_coreAddress, _upgradeHash, _timestamp, _upgradeData) {
    return {
        event: 'UpgradeRegistered',
        address: _coreAddress,
        args: {
            _upgradeHash: _upgradeHash,
            _timestamp: _timestamp,
            _upgradeData: _upgradeData,
        },
    };
}
exports.UpgradeRegisteredV2 = UpgradeRegisteredV2;
function RemoveRegisteredUpgrade(_coreAddress, _upgradeHash) {
    return {
        event: 'RemoveRegisteredUpgrade',
        address: _coreAddress,
        args: {
            _upgradeHash: _upgradeHash,
        },
    };
}
exports.RemoveRegisteredUpgrade = RemoveRegisteredUpgrade;
/**** Core Issuance Logs ****/
function SetIssued(_coreAddress, _setAddress, _quantity) {
    return {
        event: 'SetIssued',
        address: _coreAddress,
        args: {
            _setAddress: _setAddress,
            _quantity: _quantity,
        },
    };
}
exports.SetIssued = SetIssued;
function SetRedeemed(_coreAddress, _setAddress, _quantity) {
    return {
        event: 'SetRedeemed',
        address: _coreAddress,
        args: {
            _setAddress: _setAddress,
            _quantity: _quantity,
        },
    };
}
exports.SetRedeemed = SetRedeemed;
/**** Core Internal Logs ****/
function FactoryAdded(_coreAddress, _factory) {
    return {
        event: 'FactoryAdded',
        address: _coreAddress,
        args: {
            _factory: _factory,
        },
    };
}
exports.FactoryAdded = FactoryAdded;
function FactoryRemoved(_coreAddress, _factory) {
    return {
        event: 'FactoryRemoved',
        address: _coreAddress,
        args: {
            _factory: _factory,
        },
    };
}
exports.FactoryRemoved = FactoryRemoved;
function ExchangeAdded(_coreAddress, _exchangeId, _exchange) {
    return {
        event: 'ExchangeAdded',
        address: _coreAddress,
        args: {
            _exchangeId: _exchangeId,
            _exchange: _exchange,
        },
    };
}
exports.ExchangeAdded = ExchangeAdded;
function ExchangeRemoved(_coreAddress, _exchangeId) {
    return {
        event: 'ExchangeRemoved',
        address: _coreAddress,
        args: {
            _exchangeId: _exchangeId,
        },
    };
}
exports.ExchangeRemoved = ExchangeRemoved;
function ModuleAdded(_coreAddress, _module) {
    return {
        event: 'ModuleAdded',
        address: _coreAddress,
        args: {
            _module: _module,
        },
    };
}
exports.ModuleAdded = ModuleAdded;
function ModuleRemoved(_coreAddress, _module) {
    return {
        event: 'ModuleRemoved',
        address: _coreAddress,
        args: {
            _module: _module,
        },
    };
}
exports.ModuleRemoved = ModuleRemoved;
function SetDisabled(_coreAddress, _set) {
    return {
        event: 'SetDisabled',
        address: _coreAddress,
        args: {
            _set: _set,
        },
    };
}
exports.SetDisabled = SetDisabled;
function SetReenabled(_coreAddress, _set) {
    return {
        event: 'SetReenabled',
        address: _coreAddress,
        args: {
            _set: _set,
        },
    };
}
exports.SetReenabled = SetReenabled;
function PriceLibraryAdded(_coreAddress, _priceLibrary) {
    return {
        event: 'PriceLibraryAdded',
        address: _coreAddress,
        args: {
            _priceLibrary: _priceLibrary,
        },
    };
}
exports.PriceLibraryAdded = PriceLibraryAdded;
function PriceLibraryRemoved(_coreAddress, _priceLibrary) {
    return {
        event: 'PriceLibraryRemoved',
        address: _coreAddress,
        args: {
            _priceLibrary: _priceLibrary,
        },
    };
}
exports.PriceLibraryRemoved = PriceLibraryRemoved;
function ProtocolFeeRecipientChanged(_coreAddress, _feeRecipient) {
    return {
        event: 'ProtocolFeeRecipientChanged',
        address: _coreAddress,
        args: {
            _feeRecipient: _feeRecipient,
        },
    };
}
exports.ProtocolFeeRecipientChanged = ProtocolFeeRecipientChanged;
function ProtocolFeeChanged(_coreAddress, _sender, _fee) {
    return {
        event: 'ProtocolFeeChanged',
        address: _coreAddress,
        args: {
            _sender: _sender,
            _fee: _fee,
        },
    };
}
exports.ProtocolFeeChanged = ProtocolFeeChanged;
/********** Other Log Utilities **********/
function extractNewSetTokenAddressFromLogs(logs) {
    var createLog = logs[logs.length - 1];
    var args = createLog.args;
    return args._setTokenAddress;
}
exports.extractNewSetTokenAddressFromLogs = extractNewSetTokenAddressFromLogs;
function getExpectedTransferLogs(from, to, values, contractAddresses) {
    var logs = [];
    var i;
    for (i = 0; i < contractAddresses.length; i++) {
        if (values[i].greaterThan(new bignumber_js_1.BigNumber(0))) {
            logs.push({
                event: 'Transfer',
                address: contractAddresses[i],
                args: {
                    from: from,
                    to: to,
                    value: values[i],
                },
            });
        }
    }
    return logs;
}
exports.getExpectedTransferLogs = getExpectedTransferLogs;
