"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getExpectedTransferLog(from, to, value, contractAddress) {
    return [{
            event: 'Transfer',
            address: contractAddress,
            args: {
                from: from,
                to: to,
                value: value,
            },
        }];
}
exports.getExpectedTransferLog = getExpectedTransferLog;
function getExpectedNewEntryFeeLog(newEntryFee, oldEntryFee, contractAddress) {
    return [{
            event: 'NewEntryFee',
            address: contractAddress,
            args: {
                newEntryFee: newEntryFee,
                oldEntryFee: oldEntryFee,
            },
        }];
}
exports.getExpectedNewEntryFeeLog = getExpectedNewEntryFeeLog;
function getExpectedNewManagerAddedLog(newManager, oldManager, contractAddress) {
    return [{
            event: 'NewManagerAdded',
            address: contractAddress,
            args: {
                newManager: newManager,
                oldManager: oldManager,
            },
        }];
}
exports.getExpectedNewManagerAddedLog = getExpectedNewManagerAddedLog;
function getExpectedNewLiquidatorAddedLog(newLiquidator, oldLiquidator, contractAddress) {
    return [{
            event: 'NewLiquidatorAdded',
            address: contractAddress,
            args: {
                newLiquidator: newLiquidator,
                oldLiquidator: oldLiquidator,
            },
        }];
}
exports.getExpectedNewLiquidatorAddedLog = getExpectedNewLiquidatorAddedLog;
function getExpectedEntryFeePaidLog(feeRecipient, feeQuantity, contractAddress) {
    return [{
            event: 'EntryFeePaid',
            address: contractAddress,
            args: {
                feeRecipient: feeRecipient,
                feeQuantity: feeQuantity,
            },
        }];
}
exports.getExpectedEntryFeePaidLog = getExpectedEntryFeePaidLog;
function getExpectedNewFeeRecipientAddedLog(newFeeRecipient, oldFeeRecipient, contractAddress) {
    return [{
            event: 'NewFeeRecipient',
            address: contractAddress,
            args: {
                newFeeRecipient: newFeeRecipient,
                oldFeeRecipient: oldFeeRecipient,
            },
        }];
}
exports.getExpectedNewFeeRecipientAddedLog = getExpectedNewFeeRecipientAddedLog;
function getExpectedRebalanceStartedLog(oldSet, newSet, rebalanceIndex, currentSetQuantity, contractAddress) {
    return [{
            event: 'RebalanceStarted',
            address: contractAddress,
            args: {
                oldSet: oldSet,
                newSet: newSet,
                rebalanceIndex: rebalanceIndex,
                currentSetQuantity: currentSetQuantity,
            },
        }];
}
exports.getExpectedRebalanceStartedLog = getExpectedRebalanceStartedLog;
function getExpectedRebalanceSettledLog(feeRecipient, feeQuantity, feePercentage, rebalanceIndex, issueQuantity, unitShares, contractAddress) {
    return [{
            event: 'RebalanceSettled',
            address: contractAddress,
            args: {
                feeRecipient: feeRecipient,
                feeQuantity: feeQuantity,
                feePercentage: feePercentage,
                rebalanceIndex: rebalanceIndex,
                issueQuantity: issueQuantity,
                unitShares: unitShares,
            },
        }];
}
exports.getExpectedRebalanceSettledLog = getExpectedRebalanceSettledLog;
