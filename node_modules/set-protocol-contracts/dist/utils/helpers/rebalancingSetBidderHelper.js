"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = require("bignumber.js");
var contracts_1 = require("../contracts");
var web3Helper_1 = require("../web3Helper");
var ERC20Wrapper = artifacts.require('ERC20Wrapper');
var RebalancingSetEthBidder = artifacts.require('RebalancingSetEthBidder');
var RebalancingSetCTokenBidder = artifacts.require('RebalancingSetCTokenBidder');
var RebalancingSetBidderHelper = /** @class */ (function () {
    function RebalancingSetBidderHelper(contractOwnerAddress) {
        this._contractOwnerAddress = contractOwnerAddress;
    }
    /* ============ Deployment ============ */
    RebalancingSetBidderHelper.prototype.deployRebalancingSetEthBidderAsync = function (rebalanceAuctionModuleAddress, transferProxyAddress, wethAddress, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var rebalancingSetEthBidderContract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, web3Helper_1.linkLibrariesToDeploy(RebalancingSetEthBidder, [ERC20Wrapper], this._contractOwnerAddress)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, RebalancingSetEthBidder.new(rebalanceAuctionModuleAddress, transferProxyAddress, wethAddress, web3Helper_1.txnFrom(from))];
                    case 2:
                        rebalancingSetEthBidderContract = _a.sent();
                        return [2 /*return*/, new contracts_1.RebalancingSetEthBidderContract(web3Helper_1.getContractInstance(rebalancingSetEthBidderContract), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    RebalancingSetBidderHelper.prototype.deployRebalancingSetCTokenBidderAsync = function (rebalanceAuctionModuleAddress, transferProxyAddress, cTokenAddressesArray, underlyingAddressesArray, dataDescription, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var rebalancingSetCTokenBidderContract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, web3Helper_1.linkLibrariesToDeploy(RebalancingSetCTokenBidder, [ERC20Wrapper], this._contractOwnerAddress)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, RebalancingSetCTokenBidder.new(rebalanceAuctionModuleAddress, transferProxyAddress, cTokenAddressesArray, underlyingAddressesArray, dataDescription, web3Helper_1.txnFrom(from))];
                    case 2:
                        rebalancingSetCTokenBidderContract = _a.sent();
                        return [2 /*return*/, new contracts_1.RebalancingSetCTokenBidderContract(web3Helper_1.getContractInstance(rebalancingSetCTokenBidderContract), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    RebalancingSetBidderHelper.prototype.replaceFlowsWithCTokenUnderlyingAsync = function (expectedTokenFlows, combinedTokenArray, cTokenAddressesArray, underlyingAddressesArray, cTokenExchangeRateArray) {
        var inflowArray = [];
        var outflowArray = [];
        var cTokenToUnderlyingObject = this.constructObjectFromArray(cTokenAddressesArray, underlyingAddressesArray);
        var cTokenToExchangeRateObject = this.constructObjectFromArray(cTokenAddressesArray, cTokenExchangeRateArray);
        for (var i = 0; i < combinedTokenArray.length; i++) {
            // Check if address is cToken
            if (cTokenToUnderlyingObject[combinedTokenArray[i]]) {
                var cTokenConversion = cTokenToExchangeRateObject[combinedTokenArray[i]].div(Math.pow(10, 18));
                var newInflow = expectedTokenFlows['inflowArray'][i]
                    .mul(cTokenConversion)
                    .round(0, bignumber_js_1.BigNumber.ROUND_DOWN);
                newInflow = newInflow.div(cTokenConversion).gte(expectedTokenFlows['inflowArray'][i])
                    ? newInflow
                    : newInflow.add(1);
                var newOutflow = expectedTokenFlows['outflowArray'][i]
                    .mul(cTokenConversion)
                    .round(0, bignumber_js_1.BigNumber.ROUND_DOWN);
                newOutflow = newOutflow.div(cTokenConversion).gte(expectedTokenFlows['outflowArray'][i])
                    ? newOutflow
                    : newOutflow.add(1);
                inflowArray.push(newInflow);
                outflowArray.push(newOutflow);
            }
            else {
                inflowArray.push(expectedTokenFlows['inflowArray'][i]);
                outflowArray.push(expectedTokenFlows['outflowArray'][i]);
            }
        }
        return { inflowArray: inflowArray, outflowArray: outflowArray };
    };
    RebalancingSetBidderHelper.prototype.constructObjectFromArray = function (array1, array2) {
        return array1.reduce(function (accumulator, currentValue, index) {
            var _a;
            return __assign({}, accumulator, (_a = {}, _a[currentValue] = array2[index], _a));
        }, {});
    };
    return RebalancingSetBidderHelper;
}());
exports.RebalancingSetBidderHelper = RebalancingSetBidderHelper;
