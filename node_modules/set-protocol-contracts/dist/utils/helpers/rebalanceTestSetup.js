"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = require("bignumber.js");
var units_1 = require("../units");
var RebalanceTestSetup = /** @class */ (function () {
    function RebalanceTestSetup(contractOwnerAddress, coreHelper, erc20Helper, oracleHelper) {
        this._contractOwnerAddress = contractOwnerAddress;
        this._coreHelper = coreHelper;
        this._erc20Helper = erc20Helper;
        this._oracleHelper = oracleHelper;
    }
    /* ============ Deployment ============ */
    RebalanceTestSetup.prototype.initialize = function (from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
            return __generator(this, function (_q) {
                switch (_q.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this._coreHelper.deployTransferProxyAsync()];
                    case 1:
                        _a.transferProxy = _q.sent();
                        _b = this;
                        return [4 /*yield*/, this._coreHelper.deployVaultAsync()];
                    case 2:
                        _b.vault = _q.sent();
                        _c = this;
                        return [4 /*yield*/, this._coreHelper.deployCoreMockAsync(this.transferProxy, this.vault)];
                    case 3:
                        _c.core = _q.sent();
                        _d = this;
                        return [4 /*yield*/, this._coreHelper.deploySetTokenFactoryAsync(this.core.address)];
                    case 4:
                        _d.setTokenFactory = _q.sent();
                        return [4 /*yield*/, this._coreHelper.setDefaultStateAndAuthorizationsAsync(this.core, this.vault, this.transferProxy, this.setTokenFactory)];
                    case 5:
                        _q.sent();
                        _e = this;
                        return [4 /*yield*/, this._erc20Helper.deployTokenAsync(this._contractOwnerAddress, 18)];
                    case 6:
                        _e.component1 = _q.sent();
                        _f = this;
                        return [4 /*yield*/, this._erc20Helper.deployTokenAsync(this._contractOwnerAddress, 6)];
                    case 7:
                        _f.component2 = _q.sent();
                        _g = this;
                        return [4 /*yield*/, this._erc20Helper.deployTokenAsync(this._contractOwnerAddress, 8)];
                    case 8:
                        _g.component3 = _q.sent();
                        this.set1Components = [this.component1.address, this.component2.address];
                        this.set1Units = [new bignumber_js_1.BigNumber(Math.pow(10, 13)), new bignumber_js_1.BigNumber(1280)];
                        this.set1NaturalUnit = new bignumber_js_1.BigNumber(Math.pow(10, 13));
                        _h = this;
                        return [4 /*yield*/, this._coreHelper.createSetTokenAsync(this.core, this.setTokenFactory.address, this.set1Components, this.set1Units, this.set1NaturalUnit)];
                    case 9:
                        _h.set1 = _q.sent();
                        this.set2Components = [this.component1.address, this.component2.address];
                        this.set2Units = [new bignumber_js_1.BigNumber(Math.pow(10, 13)), new bignumber_js_1.BigNumber(5120)];
                        this.set2NaturalUnit = new bignumber_js_1.BigNumber(Math.pow(10, 13));
                        _j = this;
                        return [4 /*yield*/, this._coreHelper.createSetTokenAsync(this.core, this.setTokenFactory.address, this.set2Components, this.set2Units, this.set2NaturalUnit)];
                    case 10:
                        _j.set2 = _q.sent();
                        this.set3Components = [this.component1.address, this.component3.address];
                        this.set3Units = [new bignumber_js_1.BigNumber(Math.pow(10, 13)), new bignumber_js_1.BigNumber(5120)];
                        this.set3NaturalUnit = new bignumber_js_1.BigNumber(Math.pow(10, 13));
                        _k = this;
                        return [4 /*yield*/, this._coreHelper.createSetTokenAsync(this.core, this.setTokenFactory.address, this.set3Components, this.set3Units, this.set3NaturalUnit)];
                    case 11:
                        _k.set3 = _q.sent();
                        this.component1Price = units_1.ether(128);
                        this.component2Price = units_1.ether(1);
                        this.component3Price = units_1.ether(7500);
                        _l = this;
                        return [4 /*yield*/, this._oracleHelper.deployUpdatableOracleMockAsync(this.component1Price)];
                    case 12:
                        _l.component1Oracle = _q.sent();
                        _m = this;
                        return [4 /*yield*/, this._oracleHelper.deployUpdatableOracleMockAsync(this.component2Price)];
                    case 13:
                        _m.component2Oracle = _q.sent();
                        _o = this;
                        return [4 /*yield*/, this._oracleHelper.deployUpdatableOracleMockAsync(this.component3Price)];
                    case 14:
                        _o.component3Oracle = _q.sent();
                        _p = this;
                        return [4 /*yield*/, this._coreHelper.deployOracleWhiteListAsync([this.component1.address, this.component2.address, this.component3.address], [this.component1Oracle.address, this.component2Oracle.address, this.component3Oracle.address])];
                    case 15:
                        _p.oracleWhiteList = _q.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return RebalanceTestSetup;
}());
exports.RebalanceTestSetup = RebalanceTestSetup;
