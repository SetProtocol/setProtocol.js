"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __importStar(require("lodash"));
var setProtocolUtils = __importStar(require("set-protocol-utils"));
var contracts_1 = require("../contracts");
var bignumber_js_1 = require("bignumber.js");
var constants_1 = require("../constants");
var core_1 = require("../contract_logs/core");
var web3Helper_1 = require("../web3Helper");
var web3 = web3Helper_1.getWeb3();
var ConstantAuctionPriceCurve = web3Helper_1.importArtifactsFromSource('ConstantAuctionPriceCurve');
var LinearAuctionPriceCurve = web3Helper_1.importArtifactsFromSource('LinearAuctionPriceCurve');
var RebalancingSetToken = web3Helper_1.importArtifactsFromSource('RebalancingSetToken');
var SetToken = web3Helper_1.importArtifactsFromSource('SetToken');
var UpdatableConstantAuctionPriceCurve = web3Helper_1.importArtifactsFromSource('UpdatableConstantAuctionPriceCurve');
var SetTestUtils = setProtocolUtils.SetProtocolTestUtils, SetUtils = setProtocolUtils.SetProtocolUtils;
var setTestUtils = new SetTestUtils(web3);
var SET_FULL_TOKEN_UNITS = SetUtils.CONSTANTS.SET_FULL_TOKEN_UNITS;
var RebalancingHelper = /** @class */ (function () {
    function RebalancingHelper(tokenOwnerAddress, coreHelper, erc20Helper, blockchain) {
        this._tokenOwnerAddress = tokenOwnerAddress;
        this._coreHelper = coreHelper;
        this._erc20Helper = erc20Helper;
        this._blockchain = blockchain;
    }
    /* ============ Deployment ============ */
    RebalancingHelper.prototype.deployRebalancingSetTokenAsync = function (factory, tokenManager, initialSet, initialShareRatio, initialNaturalUnit, proposalPeriod, rebalanceCoolOffPeriod, rebalancingComponentWhiteListAddress, name, symbol, from) {
        if (name === void 0) { name = 'Rebalancing Set'; }
        if (symbol === void 0) { symbol = 'RBSET'; }
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleRebalancingToken, rebalancingToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._coreHelper.linkRebalancingLibrariesAsync(RebalancingSetToken)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, RebalancingSetToken.new(factory, tokenManager, initialSet, initialShareRatio, initialNaturalUnit, proposalPeriod, rebalanceCoolOffPeriod, rebalancingComponentWhiteListAddress, name, symbol, web3Helper_1.txnFrom(from))];
                    case 2:
                        truffleRebalancingToken = _a.sent();
                        rebalancingToken = new contracts_1.RebalancingSetTokenContract(new web3.eth.Contract(truffleRebalancingToken.abi, truffleRebalancingToken.address), web3Helper_1.txnFrom(from));
                        return [2 /*return*/, rebalancingToken];
                }
            });
        });
    };
    RebalancingHelper.prototype.createRebalancingTokenAsync = function (core, factory, componentAddresses, units, naturalUnit, callData, name, symbol, from) {
        if (callData === void 0) { callData = ''; }
        if (name === void 0) { name = 'Rebalancing Set Token'; }
        if (symbol === void 0) { symbol = 'RBSET'; }
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var encodedName, encodedSymbol, txHash, logs, setAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        encodedName = SetUtils.stringToBytes(name);
                        encodedSymbol = SetUtils.stringToBytes(symbol);
                        return [4 /*yield*/, core.createSet.sendTransactionAsync(factory, componentAddresses, units, naturalUnit, encodedName, encodedSymbol, callData, web3Helper_1.txnFrom(from))];
                    case 1:
                        txHash = _a.sent();
                        return [4 /*yield*/, setTestUtils.getLogsFromTxHash(txHash)];
                    case 2:
                        logs = _a.sent();
                        setAddress = core_1.extractNewSetTokenAddressFromLogs(logs);
                        return [4 /*yield*/, contracts_1.RebalancingSetTokenContract.at(setAddress, web3, web3Helper_1.txnFrom(from))];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RebalancingHelper.prototype.createSetTokensAsync = function (core, factory, transferProxy, tokenCount, naturalUnits, from) {
        if (naturalUnits === void 0) { naturalUnits = undefined; }
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var naturalUnit, setTokenArray, components, indexArray, _a, _b, _i, index, minimumDecimal, idx, componentOneDecimal, componentTwoDecimal, setComponents, setComponentAddresses, setComponentUnits, setToken;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        setTokenArray = [];
                        return [4 /*yield*/, this._erc20Helper.deployTokensAsync(tokenCount + 1, from)];
                    case 1:
                        components = _c.sent();
                        return [4 /*yield*/, this._erc20Helper.approveTransfersAsync(components, transferProxy, from)];
                    case 2:
                        _c.sent();
                        indexArray = _.times(tokenCount, Number);
                        _a = [];
                        for (_b in indexArray)
                            _a.push(_b);
                        _i = 0;
                        _c.label = 3;
                    case 3:
                        if (!(_i < _a.length)) return [3 /*break*/, 9];
                        index = _a[_i];
                        minimumDecimal = void 0;
                        idx = Number(index);
                        return [4 /*yield*/, components[idx].decimals.callAsync()];
                    case 4:
                        componentOneDecimal = _c.sent();
                        return [4 /*yield*/, components[idx + 1].decimals.callAsync()];
                    case 5:
                        componentTwoDecimal = _c.sent();
                        // Determine minimum natural unit if not passed in
                        if (naturalUnits) {
                            naturalUnit = naturalUnits[idx];
                            minimumDecimal = 18 - naturalUnit.e;
                        }
                        else {
                            minimumDecimal = Math.min(componentOneDecimal.toNumber(), componentTwoDecimal.toNumber());
                            naturalUnit = new bignumber_js_1.BigNumber(Math.pow(10, (18 - minimumDecimal)));
                        }
                        setComponents = components.slice(idx, idx + 2);
                        setComponentAddresses = _.map(setComponents, function (token) { return token.address; });
                        setComponentUnits = [
                            new bignumber_js_1.BigNumber(Math.pow(10, (componentOneDecimal.toNumber() - minimumDecimal))).mul(new bignumber_js_1.BigNumber(idx + 1)),
                            new bignumber_js_1.BigNumber(Math.pow(10, (componentTwoDecimal.toNumber() - minimumDecimal))).mul(new bignumber_js_1.BigNumber(idx + 1)),
                        ];
                        return [4 /*yield*/, this._coreHelper.createSetTokenAsync(core, factory, setComponentAddresses, setComponentUnits, naturalUnit)];
                    case 6:
                        setToken = _c.sent();
                        return [4 /*yield*/, setToken.approve.sendTransactionAsync(transferProxy, constants_1.UNLIMITED_ALLOWANCE_IN_BASE_UNITS, web3Helper_1.txnFrom(from))];
                    case 7:
                        _c.sent();
                        setTokenArray.push(setToken);
                        _c.label = 8;
                    case 8:
                        _i++;
                        return [3 /*break*/, 3];
                    case 9: return [2 /*return*/, setTokenArray];
                }
            });
        });
    };
    RebalancingHelper.prototype.issueRebalancingSetFromBaseComponentsAsync = function (core, transferProxyAddress, rebalancingSetAddress, rebalancingSetQuantity, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var rebalancingSet, currentSetAddress, currentSetInstance, baseSetNaturalUnit, rebalancingSetUnitShares, rebalancingSetNaturalUnit, currentSetRequiredAmountUnrounded, currentSetRequiredAmount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._coreHelper.getRebalancingInstanceFromAddress(rebalancingSetAddress)];
                    case 1:
                        rebalancingSet = _a.sent();
                        return [4 /*yield*/, rebalancingSet.currentSet.callAsync()];
                    case 2:
                        currentSetAddress = _a.sent();
                        return [4 /*yield*/, this._coreHelper.getSetInstance(currentSetAddress)];
                    case 3:
                        currentSetInstance = _a.sent();
                        return [4 /*yield*/, currentSetInstance.naturalUnit.callAsync()];
                    case 4:
                        baseSetNaturalUnit = _a.sent();
                        return [4 /*yield*/, rebalancingSet.unitShares.callAsync()];
                    case 5:
                        rebalancingSetUnitShares = _a.sent();
                        return [4 /*yield*/, rebalancingSet.naturalUnit.callAsync()];
                    case 6:
                        rebalancingSetNaturalUnit = _a.sent();
                        currentSetRequiredAmountUnrounded = rebalancingSetQuantity
                            .mul(rebalancingSetUnitShares)
                            .div(rebalancingSetNaturalUnit)
                            .round(0, 3);
                        currentSetRequiredAmount = currentSetRequiredAmountUnrounded.sub(currentSetRequiredAmountUnrounded.modulo(baseSetNaturalUnit)).add(baseSetNaturalUnit);
                        return [4 /*yield*/, core.issue.sendTransactionAsync(currentSetAddress, currentSetRequiredAmount, web3Helper_1.txnFrom(from))];
                    case 7:
                        _a.sent();
                        return [4 /*yield*/, currentSetInstance.approve.sendTransactionAsync(transferProxyAddress, constants_1.UNLIMITED_ALLOWANCE_IN_BASE_UNITS, web3Helper_1.txnFrom(from))];
                    case 8:
                        _a.sent();
                        return [4 /*yield*/, core.issue.sendTransactionAsync(rebalancingSet.address, rebalancingSetQuantity, web3Helper_1.txnFrom(from))];
                    case 9:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RebalancingHelper.prototype.redeemRebalancingSetToBaseComponentsAsync = function (core, transferProxyAddress, rebalancingSetAddress, rebalancingSetQuantity, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var rebalancingSet, currentSetAddress, currentSetInstance, baseSetNaturalUnit, rebalancingSetUnitShares, rebalancingSetNaturalUnit, currentSetRequiredAmountUnrounded, currentSetRequiredAmount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._coreHelper.getRebalancingInstanceFromAddress(rebalancingSetAddress)];
                    case 1:
                        rebalancingSet = _a.sent();
                        return [4 /*yield*/, rebalancingSet.currentSet.callAsync()];
                    case 2:
                        currentSetAddress = _a.sent();
                        return [4 /*yield*/, this._coreHelper.getSetInstance(currentSetAddress)];
                    case 3:
                        currentSetInstance = _a.sent();
                        return [4 /*yield*/, currentSetInstance.naturalUnit.callAsync()];
                    case 4:
                        baseSetNaturalUnit = _a.sent();
                        return [4 /*yield*/, rebalancingSet.unitShares.callAsync()];
                    case 5:
                        rebalancingSetUnitShares = _a.sent();
                        return [4 /*yield*/, rebalancingSet.naturalUnit.callAsync()];
                    case 6:
                        rebalancingSetNaturalUnit = _a.sent();
                        currentSetRequiredAmountUnrounded = rebalancingSetQuantity
                            .mul(rebalancingSetUnitShares)
                            .div(rebalancingSetNaturalUnit)
                            .round(0, 3);
                        currentSetRequiredAmount = currentSetRequiredAmountUnrounded.sub(currentSetRequiredAmountUnrounded.modulo(baseSetNaturalUnit));
                        return [4 /*yield*/, core.redeemAndWithdrawTo.sendTransactionAsync(rebalancingSet.address, from, rebalancingSetQuantity, new bignumber_js_1.BigNumber(0), web3Helper_1.txnFrom(from))];
                    case 7:
                        _a.sent();
                        return [4 /*yield*/, core.redeemAndWithdrawTo.sendTransactionAsync(currentSetAddress, from, currentSetRequiredAmount, new bignumber_js_1.BigNumber(0), web3Helper_1.txnFrom(from))];
                    case 8:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* ============ Price Libraries ============ */
    RebalancingHelper.prototype.deployLinearAuctionPriceCurveAsync = function (priceDivisor, usesStartPrice, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleLinearAuctionPriceCurve;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, LinearAuctionPriceCurve.new(priceDivisor, usesStartPrice, web3Helper_1.txnFrom(from))];
                    case 1:
                        truffleLinearAuctionPriceCurve = _a.sent();
                        return [2 /*return*/, new contracts_1.LinearAuctionPriceCurveContract(web3Helper_1.getContractInstance(truffleLinearAuctionPriceCurve), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    RebalancingHelper.prototype.deployConstantAuctionPriceCurveAsync = function (priceNumerator, priceDivisor, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleConstantAuctionPriceCurve;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, ConstantAuctionPriceCurve.new(priceNumerator, priceDivisor, web3Helper_1.txnFrom(from))];
                    case 1:
                        truffleConstantAuctionPriceCurve = _a.sent();
                        return [2 /*return*/, new contracts_1.ConstantAuctionPriceCurveContract(web3Helper_1.getContractInstance(truffleConstantAuctionPriceCurve), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    RebalancingHelper.prototype.deployUpdatableConstantAuctionPriceCurveAsync = function (priceNumerator, priceDivisor, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleUpdatableConstantAuctionPriceCurve;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, UpdatableConstantAuctionPriceCurve.new(priceNumerator, priceDivisor, web3Helper_1.txnFrom(from))];
                    case 1:
                        truffleUpdatableConstantAuctionPriceCurve = _a.sent();
                        return [2 /*return*/, new contracts_1.UpdatableConstantAuctionPriceCurveContract(new web3.eth.Contract(truffleUpdatableConstantAuctionPriceCurve.abi, truffleUpdatableConstantAuctionPriceCurve.address), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    RebalancingHelper.prototype.addPriceLibraryAsync = function (core, priceLibrary, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, core.addPriceLibrary.sendTransactionAsync(priceLibrary.address, web3Helper_1.txnFrom(from))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RebalancingHelper.prototype.createDefaultRebalancingSetTokenAsync = function (core, factory, manager, initialSet, proposalPeriod, initialUnitShares) {
        if (initialUnitShares === void 0) { initialUnitShares = constants_1.DEFAULT_UNIT_SHARES; }
        return __awaiter(this, void 0, void 0, function () {
            var rebalanceInterval, callData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rebalanceInterval = constants_1.ONE_DAY_IN_SECONDS;
                        callData = SetUtils.generateRebalancingSetTokenCallData(manager, proposalPeriod, rebalanceInterval);
                        return [4 /*yield*/, this.createRebalancingTokenAsync(core, factory, [initialSet], [initialUnitShares], constants_1.DEFAULT_REBALANCING_NATURAL_UNIT, callData)];
                    case 1: 
                    // Create rebalancingSetToken
                    return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RebalancingHelper.prototype.defaultTransitionToProposeAsync = function (core, rebalancingComponentWhiteList, rebalancingSetToken, nextSetToken, auctionLibrary, caller) {
        return __awaiter(this, void 0, void 0, function () {
            var auctionTimeToPivot, auctionStartPrice, auctionPivotPrice, nextSetTokenComponentAddresses;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        auctionTimeToPivot = constants_1.DEFAULT_REBALANCE_TIME_TO_PIVOT;
                        auctionStartPrice = constants_1.DEFAULT_REBALANCE_START_PRICE;
                        auctionPivotPrice = constants_1.DEFAULT_AUCTION_PRICE_NUMERATOR;
                        return [4 /*yield*/, nextSetToken.getComponents.callAsync()];
                    case 1:
                        nextSetTokenComponentAddresses = _a.sent();
                        return [4 /*yield*/, this._coreHelper.addTokensToWhiteList(nextSetTokenComponentAddresses, rebalancingComponentWhiteList)];
                    case 2:
                        _a.sent();
                        // Transition to propose
                        return [4 /*yield*/, this.transitionToProposeAsync(core, rebalancingSetToken, nextSetToken, auctionLibrary, auctionTimeToPivot, auctionStartPrice, auctionPivotPrice, caller)];
                    case 3:
                        // Transition to propose
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RebalancingHelper.prototype.transitionToProposeAsync = function (core, rebalancingSetToken, nextSetToken, auctionLibrary, auctionTimeToPivot, auctionStartPrice, auctionPivotPrice, caller) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // Transition to propose, auctionLibrary MUST be approved priceLibrary on Core already
                    return [4 /*yield*/, this._blockchain.increaseTimeAsync(constants_1.ONE_DAY_IN_SECONDS.add(1))];
                    case 1:
                        // Transition to propose, auctionLibrary MUST be approved priceLibrary on Core already
                        _a.sent();
                        return [4 /*yield*/, rebalancingSetToken.propose.sendTransactionAsync(nextSetToken.address, auctionLibrary, auctionTimeToPivot, auctionStartPrice, auctionPivotPrice, { from: caller, gas: constants_1.DEFAULT_GAS })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RebalancingHelper.prototype.defaultTransitionToRebalanceAsync = function (core, rebalancingComponentWhiteList, rebalancingSetToken, nextSetToken, auctionLibrary, caller) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // Transition to propose
                    return [4 /*yield*/, this.defaultTransitionToProposeAsync(core, rebalancingComponentWhiteList, rebalancingSetToken, nextSetToken, auctionLibrary, caller)];
                    case 1:
                        // Transition to propose
                        _a.sent();
                        // Transition to rebalance
                        return [4 /*yield*/, this._blockchain.increaseTimeAsync(constants_1.ONE_DAY_IN_SECONDS.add(1))];
                    case 2:
                        // Transition to rebalance
                        _a.sent();
                        return [4 /*yield*/, rebalancingSetToken.startRebalance.sendTransactionAsync({ from: caller, gas: constants_1.DEFAULT_GAS })];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RebalancingHelper.prototype.transitionToRebalanceAsync = function (core, rebalancingSetToken, nextSetToken, auctionLibrary, auctionTimeToPivot, auctionStartPrice, auctionPivotPrice, caller) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.transitionToProposeAsync(core, rebalancingSetToken, nextSetToken, auctionLibrary, auctionTimeToPivot, auctionStartPrice, auctionPivotPrice, caller)];
                    case 1:
                        _a.sent();
                        // Transition to rebalance
                        return [4 /*yield*/, this._blockchain.increaseTimeAsync(constants_1.ONE_DAY_IN_SECONDS.add(1))];
                    case 2:
                        // Transition to rebalance
                        _a.sent();
                        return [4 /*yield*/, rebalancingSetToken.startRebalance.sendTransactionAsync({ from: caller, gas: constants_1.DEFAULT_GAS })];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RebalancingHelper.prototype.placeBidAsync = function (rebalanceAuctionModule, rebalancingSetTokenAddress, bidQuantity, allowPartialFill, caller) {
        if (allowPartialFill === void 0) { allowPartialFill = false; }
        if (caller === void 0) { caller = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, rebalanceAuctionModule.bid.sendTransactionAsync(rebalancingSetTokenAddress, bidQuantity, allowPartialFill, { from: caller, gas: constants_1.DEFAULT_GAS })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RebalancingHelper.prototype.endFailedRebalanceAsync = function (rebalancingSetToken, caller) {
        if (caller === void 0) { caller = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, rebalancingSetToken.endFailedAuction.sendTransactionAsync({ gas: constants_1.DEFAULT_GAS })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RebalancingHelper.prototype.constructInflowOutflowArraysAsync = function (rebalancingSetToken, quantity, priceNumerator) {
        return __awaiter(this, void 0, void 0, function () {
            var inflowArray, outflowArray, combinedCurrentUnits, combinedRebalanceUnits, priceDivisor, biddingParameters, minimumBid, coefficient, effectiveQuantity, i, flow;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        inflowArray = [];
                        outflowArray = [];
                        return [4 /*yield*/, rebalancingSetToken.getCombinedCurrentUnits.callAsync()];
                    case 1:
                        combinedCurrentUnits = _a.sent();
                        return [4 /*yield*/, rebalancingSetToken.getCombinedNextSetUnits.callAsync()];
                    case 2:
                        combinedRebalanceUnits = _a.sent();
                        priceDivisor = constants_1.DEFAULT_AUCTION_PRICE_DIVISOR;
                        return [4 /*yield*/, rebalancingSetToken.biddingParameters.callAsync()];
                    case 3:
                        biddingParameters = _a.sent();
                        minimumBid = new bignumber_js_1.BigNumber(biddingParameters[0]);
                        coefficient = minimumBid.div(priceDivisor);
                        effectiveQuantity = quantity.div(priceNumerator);
                        for (i = 0; i < combinedCurrentUnits.length; i++) {
                            flow = combinedRebalanceUnits[i].mul(priceDivisor).sub(combinedCurrentUnits[i].mul(priceNumerator));
                            if (flow.greaterThan(0)) {
                                inflowArray.push(effectiveQuantity.mul(flow).div(coefficient).round(0, 3));
                                outflowArray.push(new bignumber_js_1.BigNumber(0));
                            }
                            else {
                                outflowArray.push(flow.mul(new bignumber_js_1.BigNumber(-1)).mul(effectiveQuantity).div(coefficient).round(0, 3));
                                inflowArray.push(new bignumber_js_1.BigNumber(0));
                            }
                        }
                        return [2 /*return*/, { inflowArray: inflowArray, outflowArray: outflowArray }];
                }
            });
        });
    };
    // Used to construct expected combined unit arrays made during propose calls
    RebalancingHelper.prototype.constructCombinedUnitArrayAsync = function (rebalancingSetToken, targetSetToken, otherSetToken) {
        return __awaiter(this, void 0, void 0, function () {
            var combinedTokenArray, setTokenComponents, setTokenUnits, targetSetNaturalUnit, otherSetNaturalUnit, maxNaturalUnit, combinedSetTokenUnits;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, rebalancingSetToken.getCombinedTokenArray.callAsync()];
                    case 1:
                        combinedTokenArray = _a.sent();
                        return [4 /*yield*/, targetSetToken.getComponents.callAsync()];
                    case 2:
                        setTokenComponents = _a.sent();
                        return [4 /*yield*/, targetSetToken.getUnits.callAsync()];
                    case 3:
                        setTokenUnits = _a.sent();
                        return [4 /*yield*/, targetSetToken.naturalUnit.callAsync()];
                    case 4:
                        targetSetNaturalUnit = _a.sent();
                        return [4 /*yield*/, otherSetToken.naturalUnit.callAsync()];
                    case 5:
                        otherSetNaturalUnit = _a.sent();
                        maxNaturalUnit = Math.max(targetSetNaturalUnit.toNumber(), otherSetNaturalUnit.toNumber());
                        combinedSetTokenUnits = [];
                        combinedTokenArray.forEach(function (address) {
                            var index = setTokenComponents.indexOf(address);
                            if (index != -1) {
                                var totalTokenAmount = setTokenUnits[index].mul(maxNaturalUnit).div(targetSetNaturalUnit);
                                combinedSetTokenUnits.push(totalTokenAmount);
                            }
                            else {
                                combinedSetTokenUnits.push(new bignumber_js_1.BigNumber(0));
                            }
                        });
                        return [2 /*return*/, combinedSetTokenUnits];
                }
            });
        });
    };
    RebalancingHelper.prototype.getExpectedUnitSharesAndIssueAmount = function (core, rebalancingSetToken, newSet, vault) {
        return __awaiter(this, void 0, void 0, function () {
            var totalSupply, rebalancingNaturalUnit, newSetNaturalUnit, components, units, maxIssueAmount, i, componentAmount, componentIssueAmount, issueAmount, naturalUnitsOutstanding, unitShares;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, rebalancingSetToken.totalSupply.callAsync()];
                    case 1:
                        totalSupply = _a.sent();
                        return [4 /*yield*/, rebalancingSetToken.naturalUnit.callAsync()];
                    case 2:
                        rebalancingNaturalUnit = _a.sent();
                        return [4 /*yield*/, newSet.naturalUnit.callAsync()];
                    case 3:
                        newSetNaturalUnit = _a.sent();
                        return [4 /*yield*/, newSet.getComponents.callAsync()];
                    case 4:
                        components = _a.sent();
                        return [4 /*yield*/, newSet.getUnits.callAsync()];
                    case 5:
                        units = _a.sent();
                        maxIssueAmount = constants_1.UNLIMITED_ALLOWANCE_IN_BASE_UNITS;
                        i = 0;
                        _a.label = 6;
                    case 6:
                        if (!(i < components.length)) return [3 /*break*/, 9];
                        return [4 /*yield*/, vault.getOwnerBalance.callAsync(components[i], rebalancingSetToken.address)];
                    case 7:
                        componentAmount = _a.sent();
                        componentIssueAmount = componentAmount.div(units[i]).round(0, 3).mul(newSetNaturalUnit);
                        if (componentIssueAmount.lessThan(maxIssueAmount)) {
                            maxIssueAmount = componentIssueAmount;
                        }
                        _a.label = 8;
                    case 8:
                        i++;
                        return [3 /*break*/, 6];
                    case 9:
                        issueAmount = maxIssueAmount.div(newSetNaturalUnit).round(0, 3).mul(newSetNaturalUnit);
                        naturalUnitsOutstanding = totalSupply.div(rebalancingNaturalUnit);
                        unitShares = issueAmount.div(naturalUnitsOutstanding).round(0, 3);
                        return [2 /*return*/, { unitShares: unitShares, issueAmount: issueAmount }];
                }
            });
        });
    };
    RebalancingHelper.prototype.getExpectedLinearAuctionPrice = function (elapsedTime, auctionTimeToPivot, auctionPivotPrice, priceDivisorParam) {
        var priceNumerator;
        var priceDivisor;
        var timeIncrementsToZero = new bignumber_js_1.BigNumber(1000);
        if (elapsedTime.lessThanOrEqualTo(auctionTimeToPivot)) {
            priceNumerator = elapsedTime.mul(auctionPivotPrice).div(auctionTimeToPivot).round(0, 3);
            priceDivisor = priceDivisorParam;
        }
        else {
            var timeIncrements = elapsedTime.sub(auctionTimeToPivot).div(30).round(0, 3);
            if (timeIncrements.lessThan(timeIncrementsToZero)) {
                priceNumerator = auctionPivotPrice;
                priceDivisor = priceDivisorParam.sub(timeIncrements.mul(priceDivisorParam).div(1000).round(0, 3));
            }
            else {
                priceDivisor = new bignumber_js_1.BigNumber(1);
                priceNumerator = auctionPivotPrice.add(auctionPivotPrice.mul(timeIncrements.sub(1000)));
            }
        }
        return {
            priceNumerator: priceNumerator,
            priceDivisor: priceDivisor,
        };
    };
    RebalancingHelper.prototype.getExpectedOpenLinearAuctionPrice = function (elapsedTime, auctionTimeToPivot, auctionStartPrice, auctionPivotPrice, priceDivisorParam) {
        var priceNumerator;
        var priceDivisor;
        var timeIncrementsToZero = new bignumber_js_1.BigNumber(1000);
        if (elapsedTime.lessThanOrEqualTo(auctionTimeToPivot)) {
            priceNumerator = auctionStartPrice.add(elapsedTime.mul(auctionPivotPrice.sub(auctionStartPrice)).div(auctionTimeToPivot).round(0, 3));
            priceDivisor = priceDivisorParam;
        }
        else {
            var timeIncrements = elapsedTime.sub(auctionTimeToPivot).div(30).round(0, 3);
            if (timeIncrements.lessThan(timeIncrementsToZero)) {
                priceNumerator = auctionPivotPrice;
                priceDivisor = priceDivisorParam.sub(timeIncrements.mul(priceDivisorParam).div(1000).round(0, 3));
            }
            else {
                priceDivisor = new bignumber_js_1.BigNumber(1);
                priceNumerator = auctionPivotPrice.add(auctionPivotPrice.mul(timeIncrements.sub(1000)));
            }
        }
        return {
            priceNumerator: priceNumerator,
            priceDivisor: priceDivisor,
        };
    };
    RebalancingHelper.prototype.getExpectedGeneralNextSetParameters = function (tokenOnePrice, tokenTwoPrice, tokenOneMultiplier, tokenTwoMultiplier, decimalDifference, pricePrecision) {
        var units;
        var naturalUnit = pricePrecision.mul(decimalDifference);
        if (tokenTwoPrice.greaterThanOrEqualTo(tokenOnePrice)) {
            var tokenOneUnits = tokenTwoPrice.mul(decimalDifference).mul(pricePrecision).div(tokenOnePrice).round(0, 3);
            units = [tokenOneMultiplier.mul(tokenOneUnits), tokenTwoMultiplier.mul(pricePrecision)];
        }
        else {
            var tokenTwoUnits = tokenOnePrice.mul(pricePrecision).div(tokenTwoPrice).round(0, 3);
            units = [pricePrecision.mul(decimalDifference).mul(tokenOneMultiplier), tokenTwoUnits.mul(tokenTwoMultiplier)];
        }
        return {
            units: units,
            naturalUnit: naturalUnit,
        };
    };
    RebalancingHelper.prototype.getExpectedGeneralAuctionParameters = function (tokenOnePrice, tokenTwoPrice, tokenOneMultiplier, tokenTwoMultiplier, tokenOneDecimals, tokenTwoDecimals, pricePrecision, auctionTimeToPivot, currentSetToken) {
        return __awaiter(this, void 0, void 0, function () {
            var THIRTY_MINUTES_IN_SECONDS, nextSetParams, currentSetNaturalUnit, currentSetUnits, currentSetDollarAmount, nextSetDollarAmount, fairValue, onePercentSlippage, thirtyMinutePeriods, halfPriceRange, auctionStartPrice, auctionPivotPrice;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        THIRTY_MINUTES_IN_SECONDS = new bignumber_js_1.BigNumber(30 * 60);
                        nextSetParams = this.getExpectedGeneralNextSetParameters(tokenOnePrice, tokenTwoPrice, tokenOneMultiplier, tokenTwoMultiplier, tokenOneDecimals.div(tokenTwoDecimals), pricePrecision);
                        return [4 /*yield*/, currentSetToken.naturalUnit.callAsync()];
                    case 1:
                        currentSetNaturalUnit = _a.sent();
                        return [4 /*yield*/, currentSetToken.getUnits.callAsync()];
                    case 2:
                        currentSetUnits = _a.sent();
                        currentSetDollarAmount = this.computeTokenValue(currentSetUnits, currentSetNaturalUnit, tokenOnePrice, tokenTwoPrice, tokenOneDecimals, tokenTwoDecimals);
                        nextSetDollarAmount = this.computeTokenValue(nextSetParams['units'], nextSetParams['naturalUnit'], tokenOnePrice, tokenTwoPrice, tokenOneDecimals, tokenTwoDecimals);
                        fairValue = nextSetDollarAmount.div(currentSetDollarAmount).mul(1000).round(0, 3);
                        onePercentSlippage = fairValue.div(100).round(0, 3);
                        thirtyMinutePeriods = auctionTimeToPivot.div(THIRTY_MINUTES_IN_SECONDS).round(0, 3);
                        halfPriceRange = thirtyMinutePeriods.mul(onePercentSlippage).div(2).round(0, 3);
                        auctionStartPrice = fairValue.sub(halfPriceRange);
                        auctionPivotPrice = fairValue.add(halfPriceRange);
                        return [2 /*return*/, {
                                auctionStartPrice: auctionStartPrice,
                                auctionPivotPrice: auctionPivotPrice,
                            }];
                }
            });
        });
    };
    RebalancingHelper.prototype.getExpectedSetTokenAsync = function (setTokenAddress) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new contracts_1.SetTokenContract(web3Helper_1.getContractInstance(SetToken, setTokenAddress), { from: this._tokenOwnerAddress })];
            });
        });
    };
    RebalancingHelper.prototype.computeTokenValue = function (units, naturalUnit, tokenOnePrice, tokenTwoPrice, tokenOneDecimals, tokenTwoDecimals) {
        var tokenOneUnitsInFullToken = SET_FULL_TOKEN_UNITS.mul(units[0]).div(naturalUnit).round(0, 3);
        var tokenTwoUnitsInFullToken = SET_FULL_TOKEN_UNITS.mul(units[1]).div(naturalUnit).round(0, 3);
        var tokenOneDollarAmount = this.computeTokenDollarAmount(tokenOnePrice, tokenOneUnitsInFullToken, tokenOneDecimals);
        var tokenTwoDollarAmount = this.computeTokenDollarAmount(tokenTwoPrice, tokenTwoUnitsInFullToken, tokenTwoDecimals);
        return tokenOneDollarAmount.add(tokenTwoDollarAmount);
    };
    RebalancingHelper.prototype.computeTokenDollarAmount = function (tokenPrice, unitsInFullSet, tokenDecimals) {
        var VALUE_TO_CENTS_CONVERSION = new bignumber_js_1.BigNumber(Math.pow(10, 16));
        return tokenPrice
            .mul(unitsInFullSet)
            .div(tokenDecimals)
            .div(VALUE_TO_CENTS_CONVERSION)
            .round(0, 3);
    };
    /* ============ Bidding Convenience functions ============ */
    RebalancingHelper.prototype.getTimeToFairValue = function (auctionTimeToPivot) {
        return auctionTimeToPivot.div(2);
    };
    RebalancingHelper.prototype.calculateCurrentSetBidQuantity = function (startingCurrentSets, percentToBid, minimumBid) {
        return __awaiter(this, void 0, void 0, function () {
            var bidQuantity, normalizedQuantity;
            return __generator(this, function (_a) {
                bidQuantity = startingCurrentSets.mul(percentToBid).div(100);
                normalizedQuantity = bidQuantity.div(minimumBid).round(0, 3).mul(minimumBid);
                return [2 /*return*/, normalizedQuantity];
            });
        });
    };
    /* ============ Set Token Convenience function ============ */
    RebalancingHelper.prototype.getRebalancingSetInstance = function (rebalancingSetTokenAddress, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new contracts_1.RebalancingSetTokenContract(web3Helper_1.getContractInstance(RebalancingSetToken, rebalancingSetTokenAddress), web3Helper_1.txnFrom(from))];
            });
        });
    };
    return RebalancingHelper;
}());
exports.RebalancingHelper = RebalancingHelper;
