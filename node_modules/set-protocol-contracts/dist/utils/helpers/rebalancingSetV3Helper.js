"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var setProtocolUtils = __importStar(require("set-protocol-utils"));
var contracts_1 = require("../contracts");
var constants_1 = require("../constants");
var core_1 = require("../contract_logs/core");
var web3Helper_1 = require("../web3Helper");
var rebalancingSetV2Helper_1 = require("./rebalancingSetV2Helper");
var web3 = web3Helper_1.getWeb3();
var RebalancingSetTokenV3 = web3Helper_1.importArtifactsFromSource('RebalancingSetTokenV3');
var SetTestUtils = setProtocolUtils.SetProtocolTestUtils, SetUtils = setProtocolUtils.SetProtocolUtils;
var setTestUtils = new SetTestUtils(web3);
var RebalancingSetV3Helper = /** @class */ (function (_super) {
    __extends(RebalancingSetV3Helper, _super);
    function RebalancingSetV3Helper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /* ============ Deployment ============ */
    /**
     * addressConfig [factory, manager, liquidator, initialSet, componentWhiteList,
     *                liquidatorWhiteList, feeRecipient]
     * [0]factory                   Factory used to create the Rebalancing Set
     * [1]manager                   Address that is able to propose the next Set
     * [2]liquidator                Address of the liquidator contract
     * [3]initialSet                Initial set that collateralizes the Rebalancing set
     * [4]componentWhiteList        Whitelist that nextSet components are checked against during propose
     * [5]liquidatorWhiteList       Whitelist of valid liquidators
     * [6]feeRecipient              Address that receives any incentive fees
     *
     * uintConfig [unitShares, naturalUnit, rebalanceInterval, rebalanceFailPeriod, lastRebalanceTimestamp,
     *             entryFee, rebalanceFee]
     * [0]initialUnitShares         Units of currentSet that equals one share
     * [1]naturalUnit               The minimum multiple of Sets that can be issued or redeemed
     * [2]rebalanceInterval:        Minimum amount of time between rebalances
     * [3]rebalanceFailPeriod:      Time after auctionStart where something in the rebalance has gone wrong
     * [4]lastRebalanceTimestamp:   Time of the last rebalance; Allows customized deployments
     * [5]entryFee:                 Mint fee represented in a scaled percentage value
     * [6]rebalanceFee:             Rebalance fee represented in a scaled percentage value
     *
     */
    RebalancingSetV3Helper.prototype.deployRebalancingSetTokenV3Async = function (addressConfig, bigNumberConfig, name, symbol, from) {
        if (name === void 0) { name = 'Rebalancing Set'; }
        if (symbol === void 0) { symbol = 'RBSET'; }
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleRebalancingToken, rebalancingToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, RebalancingSetTokenV3.new(addressConfig, bigNumberConfig, name, symbol, { from: from, gas: constants_1.DEFAULT_GAS })];
                    case 1:
                        truffleRebalancingToken = _a.sent();
                        rebalancingToken = new contracts_1.RebalancingSetTokenV3Contract(web3Helper_1.getContractInstance(truffleRebalancingToken), { from: from, gas: constants_1.DEFAULT_GAS });
                        return [2 /*return*/, rebalancingToken];
                }
            });
        });
    };
    RebalancingSetV3Helper.prototype.createRebalancingTokenV3Async = function (core, factory, componentAddresses, units, naturalUnit, callData, name, symbol, from) {
        if (callData === void 0) { callData = ''; }
        if (name === void 0) { name = 'Rebalancing Set Token'; }
        if (symbol === void 0) { symbol = 'RBSET'; }
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var encodedName, encodedSymbol, txHash, logs, setAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        encodedName = SetUtils.stringToBytes(name);
                        encodedSymbol = SetUtils.stringToBytes(symbol);
                        return [4 /*yield*/, core.createSet.sendTransactionAsync(factory, componentAddresses, units, naturalUnit, encodedName, encodedSymbol, callData, { from: from })];
                    case 1:
                        txHash = _a.sent();
                        return [4 /*yield*/, setTestUtils.getLogsFromTxHash(txHash)];
                    case 2:
                        logs = _a.sent();
                        setAddress = core_1.extractNewSetTokenAddressFromLogs(logs);
                        return [4 /*yield*/, contracts_1.RebalancingSetTokenV3Contract.at(setAddress, web3, { from: from })];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RebalancingSetV3Helper.prototype.createDefaultRebalancingSetTokenV3Async = function (core, factory, manager, liquidator, feeRecipient, rebalanceFeeCalculator, initialSet, failRebalancePeriod, lastRebalanceTimestamp, entryFee, rebalanceFee, initialUnitShares) {
        if (entryFee === void 0) { entryFee = constants_1.ZERO; }
        if (rebalanceFee === void 0) { rebalanceFee = constants_1.ZERO; }
        if (initialUnitShares === void 0) { initialUnitShares = constants_1.DEFAULT_UNIT_SHARES; }
        return __awaiter(this, void 0, void 0, function () {
            var rebalanceInterval, rebalanceFeeCallData, callData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rebalanceInterval = constants_1.ONE_DAY_IN_SECONDS;
                        rebalanceFeeCallData = SetUtils.generateFixedFeeCalculatorCalldata(rebalanceFee);
                        callData = SetUtils.generateRebalancingSetTokenV2CallData(manager, liquidator, feeRecipient, rebalanceFeeCalculator, rebalanceInterval, failRebalancePeriod, lastRebalanceTimestamp, entryFee, rebalanceFeeCallData);
                        return [4 /*yield*/, this.createRebalancingTokenV3Async(core, factory, [initialSet], [initialUnitShares], constants_1.DEFAULT_REBALANCING_NATURAL_UNIT, callData)];
                    case 1: 
                    // Create rebalancingSetToken
                    return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RebalancingSetV3Helper.prototype.getExpectedIncentiveFeeUnitShares = function (rebalancingSetToken, currentSet, vault) {
        return __awaiter(this, void 0, void 0, function () {
            var totalSupply, naturalUnit, currentSetAmount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, rebalancingSetToken.totalSupply.callAsync()];
                    case 1:
                        totalSupply = _a.sent();
                        return [4 /*yield*/, rebalancingSetToken.naturalUnit.callAsync()];
                    case 2:
                        naturalUnit = _a.sent();
                        return [4 /*yield*/, vault.getOwnerBalance.callAsync(currentSet.address, rebalancingSetToken.address)];
                    case 3:
                        currentSetAmount = _a.sent();
                        return [2 /*return*/, currentSetAmount.mul(naturalUnit).div(totalSupply).round(0, 2)];
                }
            });
        });
    };
    RebalancingSetV3Helper.prototype.generateRebalancingSetTokenV3CallData = function (managerAddress, liquidatorAddress, feeRecipient, rebalanceFeeCalculator, rebalanceInterval, failRebalancePeriod, lastRebalanceTimestamp, entryFee, rebalanceFeeCalculatorCalldata) {
        return SetTestUtils.bufferArrayToHex([
            SetUtils.paddedBufferForPrimitive(managerAddress),
            SetUtils.paddedBufferForPrimitive(liquidatorAddress),
            SetUtils.paddedBufferForPrimitive(feeRecipient),
            SetUtils.paddedBufferForPrimitive(rebalanceFeeCalculator),
            SetUtils.paddedBufferForBigNumber(rebalanceInterval),
            SetUtils.paddedBufferForBigNumber(failRebalancePeriod),
            SetUtils.paddedBufferForBigNumber(lastRebalanceTimestamp),
            SetUtils.paddedBufferForBigNumber(entryFee),
        ].concat(rebalanceFeeCalculatorCalldata));
    };
    return RebalancingSetV3Helper;
}(rebalancingSetV2Helper_1.RebalancingSetV2Helper));
exports.RebalancingSetV3Helper = RebalancingSetV3Helper;
