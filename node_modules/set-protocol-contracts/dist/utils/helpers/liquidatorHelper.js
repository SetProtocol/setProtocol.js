"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = require("bignumber.js");
var contracts_1 = require("../contracts");
var web3Helper_1 = require("../web3Helper");
var constants_1 = require("../constants");
var units_1 = require("../units");
var AuctionMock = web3Helper_1.importArtifactsFromSource('AuctionMock');
var LinearAuctionLiquidator = web3Helper_1.importArtifactsFromSource('LinearAuctionLiquidator');
var LinearAuctionMock = web3Helper_1.importArtifactsFromSource('LinearAuctionMock');
var LiquidatorMock = web3Helper_1.importArtifactsFromSource('LiquidatorMock');
var LiquidatorProxy = web3Helper_1.importArtifactsFromSource('LiquidatorProxy');
var TwoAssetPriceBoundedLinearAuctionMock = web3Helper_1.importArtifactsFromSource('TwoAssetPriceBoundedLinearAuctionMock');
var LiquidatorHelper = /** @class */ (function () {
    function LiquidatorHelper(contractOwnerAddress, erc20Helper, valuationHelper) {
        this._contractOwnerAddress = contractOwnerAddress;
        this._erc20Helper = erc20Helper;
        this._valuationHelper = valuationHelper;
    }
    /* ============ Deployment ============ */
    LiquidatorHelper.prototype.deployAuctionMockAsync = function (from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var auctionMock;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, AuctionMock.new(web3Helper_1.txnFrom(from))];
                    case 1:
                        auctionMock = _a.sent();
                        return [2 /*return*/, new contracts_1.AuctionMockContract(web3Helper_1.getContractInstance(auctionMock), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    LiquidatorHelper.prototype.deployLiquidatorProxyAsync = function (liquidator, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var liquidatorProxy;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, LiquidatorProxy.new(liquidator, web3Helper_1.txnFrom(from))];
                    case 1:
                        liquidatorProxy = _a.sent();
                        return [2 /*return*/, new contracts_1.LiquidatorProxyContract(web3Helper_1.getContractInstance(liquidatorProxy), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    LiquidatorHelper.prototype.deployLinearAuctionMockAsync = function (oracleWhiteList, auctionPeriod, rangeStart, rangeEnd, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var linearAuctionMock;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, LinearAuctionMock.new(oracleWhiteList, auctionPeriod, rangeStart, rangeEnd, web3Helper_1.txnFrom(from))];
                    case 1:
                        linearAuctionMock = _a.sent();
                        return [2 /*return*/, new contracts_1.LinearAuctionMockContract(web3Helper_1.getContractInstance(linearAuctionMock), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    LiquidatorHelper.prototype.deployLinearAuctionLiquidatorAsync = function (core, oracleWhiteList, auctionPeriod, rangeStart, rangeEnd, name, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var linearAuctionLiquidator;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, LinearAuctionLiquidator.new(core, oracleWhiteList, auctionPeriod, rangeStart, rangeEnd, name, web3Helper_1.txnFrom(from))];
                    case 1:
                        linearAuctionLiquidator = _a.sent();
                        return [2 /*return*/, new contracts_1.LinearAuctionLiquidatorContract(web3Helper_1.getContractInstance(linearAuctionLiquidator), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    LiquidatorHelper.prototype.deployTwoAssetPriceBoundedLinearAuctionMock = function (oracleWhiteList, auctionPeriod, rangeStart, rangeEnd, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var mockContract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TwoAssetPriceBoundedLinearAuctionMock.new(oracleWhiteList, auctionPeriod, rangeStart, rangeEnd, web3Helper_1.txnFrom(from))];
                    case 1:
                        mockContract = _a.sent();
                        return [2 /*return*/, new contracts_1.TwoAssetPriceBoundedLinearAuctionMockContract(web3Helper_1.getContractInstance(mockContract), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    LiquidatorHelper.prototype.deployLiquidatorMockAsync = function (from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var liquidatorMock;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, LiquidatorMock.new(web3Helper_1.txnFrom(from))];
                    case 1:
                        liquidatorMock = _a.sent();
                        return [2 /*return*/, new contracts_1.LiquidatorMockContract(web3Helper_1.getContractInstance(liquidatorMock), web3Helper_1.txnFrom(from))];
                }
            });
        });
    };
    /* ============ Bid-Related ============ */
    // Get bid transfer values
    LiquidatorHelper.prototype.getBidPriceValues = function (setToken, quantity, combinedUnits) {
        return __awaiter(this, void 0, void 0, function () {
            var naturalUnit;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, setToken.naturalUnit.callAsync()];
                    case 1:
                        naturalUnit = _a.sent();
                        return [2 /*return*/, combinedUnits.map(function (unit) { return unit.mul(quantity).div(naturalUnit); })];
                }
            });
        });
    };
    LiquidatorHelper.prototype.constructCombinedUnitArrayAsync = function (setToken, combinedTokenArray, minimumBid) {
        return __awaiter(this, void 0, void 0, function () {
            var setTokenComponents, setTokenUnits, setTokenNaturalUnit, combinedSetTokenUnits;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, setToken.getComponents.callAsync()];
                    case 1:
                        setTokenComponents = _a.sent();
                        return [4 /*yield*/, setToken.getUnits.callAsync()];
                    case 2:
                        setTokenUnits = _a.sent();
                        return [4 /*yield*/, setToken.naturalUnit.callAsync()];
                    case 3:
                        setTokenNaturalUnit = _a.sent();
                        combinedSetTokenUnits = [];
                        combinedTokenArray.forEach(function (address) {
                            var index = setTokenComponents.indexOf(address);
                            if (index != -1) {
                                var totalTokenAmount = setTokenUnits[index].mul(minimumBid).div(setTokenNaturalUnit);
                                combinedSetTokenUnits.push(totalTokenAmount);
                            }
                            else {
                                combinedSetTokenUnits.push(new bignumber_js_1.BigNumber(0));
                            }
                        });
                        return [2 /*return*/, combinedSetTokenUnits];
                }
            });
        });
    };
    LiquidatorHelper.prototype.calculateMinimumBidAsync = function (linearAuction, currentSet, nextSet, assetPairPrice) {
        return __awaiter(this, void 0, void 0, function () {
            var maxNaturalUnit, _a, _b, _c, _d, assetOneDecimals, assetTwoDecimals, assetOneFullUnit, assetTwoFullUnit, auctionFairValue, tokenFlow, tokenFlowList, minimumBidMultiplier, i, currentMinBidMultiplier;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        _b = (_a = bignumber_js_1.BigNumber).max;
                        return [4 /*yield*/, currentSet.naturalUnit.callAsync()];
                    case 1:
                        _c = [_e.sent()];
                        return [4 /*yield*/, nextSet.naturalUnit.callAsync()];
                    case 2:
                        maxNaturalUnit = _b.apply(_a, _c.concat([_e.sent()]));
                        return [4 /*yield*/, this._erc20Helper.getTokensDecimalsAsync(linearAuction.auction.combinedTokenArray)];
                    case 3:
                        _d = _e.sent(), assetOneDecimals = _d[0], assetTwoDecimals = _d[1];
                        assetOneFullUnit = new bignumber_js_1.BigNumber(Math.pow(10, assetOneDecimals.toNumber()));
                        assetTwoFullUnit = new bignumber_js_1.BigNumber(Math.pow(10, assetTwoDecimals.toNumber()));
                        auctionFairValue = this.calculateAuctionBound(linearAuction, assetOneFullUnit, assetTwoFullUnit, assetPairPrice);
                        tokenFlow = this.constructTokenFlow(linearAuction, maxNaturalUnit.mul(units_1.ether(1)), auctionFairValue);
                        tokenFlowList = [
                            bignumber_js_1.BigNumber.max(tokenFlow.inflow[0], tokenFlow.outflow[0]),
                            bignumber_js_1.BigNumber.max(tokenFlow.inflow[1], tokenFlow.outflow[1]),
                        ];
                        minimumBidMultiplier = constants_1.ZERO;
                        for (i = 0; i < linearAuction.auction.combinedTokenArray.length; i++) {
                            currentMinBidMultiplier = units_1.ether(1000).div(tokenFlowList[i]).round(0, 2);
                            minimumBidMultiplier = currentMinBidMultiplier.greaterThan(minimumBidMultiplier) ?
                                currentMinBidMultiplier :
                                minimumBidMultiplier;
                        }
                        return [2 /*return*/, maxNaturalUnit.mul(minimumBidMultiplier)];
                }
            });
        });
    };
    LiquidatorHelper.prototype.calculateAuctionBoundsAsync = function (linearAuction, startBound, endBound, oracleWhiteList) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, assetOneDecimals, assetTwoDecimals, assetOneFullUnit, assetTwoFullUnit, _b, assetOnePrice, assetTwoPrice, startValue, endValue;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this._erc20Helper.getTokensDecimalsAsync(linearAuction.auction.combinedTokenArray)];
                    case 1:
                        _a = _c.sent(), assetOneDecimals = _a[0], assetTwoDecimals = _a[1];
                        assetOneFullUnit = new bignumber_js_1.BigNumber(Math.pow(10, assetOneDecimals.toNumber()));
                        assetTwoFullUnit = new bignumber_js_1.BigNumber(Math.pow(10, assetTwoDecimals.toNumber()));
                        return [4 /*yield*/, this._valuationHelper.getComponentPricesAsync(linearAuction.auction.combinedTokenArray, oracleWhiteList)];
                    case 2:
                        _b = _c.sent(), assetOnePrice = _b[0], assetTwoPrice = _b[1];
                        startValue = this.calculateTwoAssetStartPrice(linearAuction, assetOneFullUnit, assetTwoFullUnit, assetOnePrice.div(assetTwoPrice), startBound);
                        endValue = this.calculateTwoAssetEndPrice(linearAuction, assetOneFullUnit, assetTwoFullUnit, assetOnePrice.div(assetTwoPrice), endBound);
                        return [2 /*return*/, [startValue, endValue]];
                }
            });
        });
    };
    LiquidatorHelper.prototype.calculateTwoAssetStartPrice = function (linearAuction, assetOneFullUnit, assetTwoFullUnit, assetPairPrice, startBound) {
        var auctionFairValue = this.calculateAuctionBound(linearAuction, assetOneFullUnit, assetTwoFullUnit, assetPairPrice);
        var tokenFlowIncreasing = this.isTokenFlowIncreasing(linearAuction.auction.combinedCurrentSetUnits[0], linearAuction.auction.combinedNextSetUnits[0], auctionFairValue);
        var startPairPrice;
        if (tokenFlowIncreasing) {
            startPairPrice = assetPairPrice.mul(constants_1.ONE_HUNDRED.sub(startBound)).div(constants_1.ONE_HUNDRED);
        }
        else {
            startPairPrice = assetPairPrice.mul(constants_1.ONE_HUNDRED.add(startBound)).div(constants_1.ONE_HUNDRED);
        }
        var startValue = this.calculateAuctionBound(linearAuction, assetOneFullUnit, assetTwoFullUnit, startPairPrice);
        return startValue;
    };
    LiquidatorHelper.prototype.calculateTwoAssetEndPrice = function (linearAuction, assetOneFullUnit, assetTwoFullUnit, assetPairPrice, endBound) {
        var auctionFairValue = this.calculateAuctionBound(linearAuction, assetOneFullUnit, assetTwoFullUnit, assetPairPrice);
        var tokenFlowIncreasing = this.isTokenFlowIncreasing(linearAuction.auction.combinedCurrentSetUnits[0], linearAuction.auction.combinedNextSetUnits[0], auctionFairValue);
        var endPairPrice;
        if (tokenFlowIncreasing) {
            endPairPrice = assetPairPrice.mul(constants_1.ONE_HUNDRED.add(endBound)).div(constants_1.ONE_HUNDRED);
        }
        else {
            endPairPrice = assetPairPrice.mul(constants_1.ONE_HUNDRED.sub(endBound)).div(constants_1.ONE_HUNDRED);
        }
        var endValue = this.calculateAuctionBound(linearAuction, assetOneFullUnit, assetTwoFullUnit, endPairPrice);
        return endValue;
    };
    LiquidatorHelper.prototype.calculateAuctionBound = function (linearAuction, assetOneFullUnit, assetTwoFullUnit, targetPrice) {
        var combinedNextUnitArray = linearAuction.auction.combinedNextSetUnits;
        var combinedCurrentUnitArray = linearAuction.auction.combinedCurrentSetUnits;
        var calcNumerator = combinedNextUnitArray[1].mul(constants_1.AUCTION_CURVE_DENOMINATOR).div(assetTwoFullUnit).add(targetPrice.mul(combinedNextUnitArray[0]).mul(constants_1.AUCTION_CURVE_DENOMINATOR).div(assetOneFullUnit));
        var calcDenominator = combinedCurrentUnitArray[1].div(assetTwoFullUnit).add(targetPrice.mul(combinedCurrentUnitArray[0]).div(assetOneFullUnit));
        return calcNumerator.div(calcDenominator).round(0, 3);
    };
    LiquidatorHelper.prototype.isTokenFlowIncreasing = function (assetOneCurrentUnit, assetOneNextUnit, fairValue) {
        return assetOneNextUnit.mul(constants_1.AUCTION_CURVE_DENOMINATOR).greaterThan(assetOneCurrentUnit.mul(fairValue));
    };
    LiquidatorHelper.prototype.calculateCurrentPrice = function (linearAuction, timestamp, auctionPeriod) {
        var elapsed = timestamp.sub(linearAuction.auction.startTime);
        var priceRange = new bignumber_js_1.BigNumber(linearAuction.endPrice).sub(linearAuction.startPrice);
        var elapsedPrice = elapsed.mul(priceRange).div(auctionPeriod).round(0, 3);
        return new bignumber_js_1.BigNumber(linearAuction.startPrice).add(elapsedPrice);
    };
    LiquidatorHelper.prototype.calculateFairValueAsync = function (currentSetToken, nextSetToken, oracleWhiteList, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var currentSetUSDValue, nextSetUSDValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._valuationHelper.calculateSetTokenValueAsync(currentSetToken, oracleWhiteList)];
                    case 1:
                        currentSetUSDValue = _a.sent();
                        return [4 /*yield*/, this._valuationHelper.calculateSetTokenValueAsync(nextSetToken, oracleWhiteList)];
                    case 2:
                        nextSetUSDValue = _a.sent();
                        return [2 /*return*/, nextSetUSDValue.mul(constants_1.SCALE_FACTOR).div(currentSetUSDValue).round(0, 3)];
                }
            });
        });
    };
    LiquidatorHelper.prototype.constructTokenFlow = function (linearAuction, quantity, priceScaled) {
        var inflow = [];
        var outflow = [];
        // Calculate the inflows and outflow arrays;
        var _a = linearAuction.auction, combinedTokenArray = _a.combinedTokenArray, combinedCurrentSetUnits = _a.combinedCurrentSetUnits, combinedNextSetUnits = _a.combinedNextSetUnits, maxNaturalUnit = _a.maxNaturalUnit;
        var unitsMultiplier = quantity.div(maxNaturalUnit).round(0, 3);
        for (var i = 0; i < combinedCurrentSetUnits.length; i++) {
            var flow = combinedNextSetUnits[i].mul(constants_1.SCALE_FACTOR).sub(combinedCurrentSetUnits[i].mul(priceScaled));
            if (flow.greaterThan(0)) {
                var inflowUnit = unitsMultiplier.mul(combinedNextSetUnits[i].mul(constants_1.SCALE_FACTOR).sub(combinedCurrentSetUnits[i].mul(priceScaled))).div(priceScaled).round(0, 3);
                inflow.push(inflowUnit);
                outflow.push(constants_1.ZERO);
            }
            else {
                var outflowUnit = unitsMultiplier.mul(combinedCurrentSetUnits[i].mul(priceScaled).sub(combinedNextSetUnits[i].mul(constants_1.SCALE_FACTOR))).div(priceScaled).round(0, 3);
                outflow.push(outflowUnit);
                inflow.push(constants_1.ZERO);
            }
        }
        return {
            addresses: combinedTokenArray,
            inflow: inflow,
            outflow: outflow,
        };
    };
    return LiquidatorHelper;
}());
exports.LiquidatorHelper = LiquidatorHelper;
