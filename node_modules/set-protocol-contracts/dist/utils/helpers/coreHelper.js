"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __importStar(require("lodash"));
var setProtocolUtils = __importStar(require("set-protocol-utils"));
var contracts_1 = require("../contracts");
var bignumber_js_1 = require("bignumber.js");
var constants_1 = require("../constants");
var core_1 = require("../contract_logs/core");
var web3Helper_1 = require("../web3Helper");
var web3 = web3Helper_1.getWeb3();
var Bytes32Library = web3Helper_1.importArtifactsFromSource('Bytes32Library');
var CommonValidationsLibrary = web3Helper_1.importArtifactsFromSource('CommonValidationsLibrary');
var Core = web3Helper_1.importArtifactsFromSource('Core');
var CoreIssuanceLibrary = web3Helper_1.importArtifactsFromSource('CoreIssuanceLibrary');
var CoreMock = web3Helper_1.importArtifactsFromSource('CoreMock');
var CTokenExchangeIssuanceModule = web3Helper_1.importArtifactsFromSource('CTokenExchangeIssuanceModule');
var ERC20Wrapper = web3Helper_1.importArtifactsFromSource('ERC20Wrapper');
var ExchangeIssuanceModule = web3Helper_1.importArtifactsFromSource('ExchangeIssuanceModule');
var FactoryUtilsLibrary = web3Helper_1.importArtifactsFromSource('FactoryUtilsLibrary');
var OracleWhiteList = web3Helper_1.importArtifactsFromSource('OracleWhiteList');
var RebalancingSetCTokenExchangeIssuanceModule = web3Helper_1.importArtifactsFromSource('RebalancingSetCTokenExchangeIssuanceModule');
var RebalancingSetCTokenIssuanceModule = web3Helper_1.importArtifactsFromSource('RebalancingSetCTokenIssuanceModule');
var RebalancingSetExchangeIssuanceModule = web3Helper_1.importArtifactsFromSource('RebalancingSetExchangeIssuanceModule');
var RebalancingSetIssuanceModule = web3Helper_1.importArtifactsFromSource('RebalancingSetIssuanceModule');
var RebalanceAuctionModule = web3Helper_1.importArtifactsFromSource('RebalanceAuctionModule');
var RebalanceAuctionModuleMock = web3Helper_1.importArtifactsFromSource('RebalanceAuctionModuleMock');
var RebalancingSetTokenFactory = web3Helper_1.importArtifactsFromSource('RebalancingSetTokenFactory');
var RebalancingSetTokenV2Factory = web3Helper_1.importArtifactsFromSource('RebalancingSetTokenV2Factory');
var RebalancingSetTokenV3Factory = web3Helper_1.importArtifactsFromSource('RebalancingSetTokenV3Factory');
var SetToken = web3Helper_1.importArtifactsFromSource('SetToken');
var SetTokenFactory = web3Helper_1.importArtifactsFromSource('SetTokenFactory');
var SetTokenLibrary = web3Helper_1.importArtifactsFromSource('SetTokenLibrary');
var FailAuctionLibrary = web3Helper_1.importArtifactsFromSource('FailAuctionLibrary');
var PlaceBidLibrary = web3Helper_1.importArtifactsFromSource('PlaceBidLibrary');
var ProposeLibrary = web3Helper_1.importArtifactsFromSource('ProposeLibrary');
var SettleRebalanceLibrary = web3Helper_1.importArtifactsFromSource('SettleRebalanceLibrary');
var StartRebalanceLibrary = web3Helper_1.importArtifactsFromSource('StartRebalanceLibrary');
var TransferProxy = web3Helper_1.importArtifactsFromSource('TransferProxy');
var Vault = web3Helper_1.importArtifactsFromSource('Vault');
var WhiteList = web3Helper_1.importArtifactsFromSource('WhiteList');
var SetTestUtils = setProtocolUtils.SetProtocolTestUtils, SetUtils = setProtocolUtils.SetProtocolUtils;
var setTestUtils = new SetTestUtils(web3);
var CoreHelper = /** @class */ (function () {
    function CoreHelper(tokenOwnerAddress, contractOwnerAddress) {
        this._tokenOwnerAddress = tokenOwnerAddress;
        this._contractOwnerAddress = contractOwnerAddress;
    }
    /* ============ Deployment ============ */
    CoreHelper.prototype.deployTransferProxyAsync = function (from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleTransferProxy;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, web3Helper_1.linkLibrariesToDeploy(TransferProxy, [ERC20Wrapper], this._tokenOwnerAddress)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, TransferProxy.new({ from: from, gas: constants_1.DEFAULT_GAS })];
                    case 2:
                        truffleTransferProxy = _a.sent();
                        return [2 /*return*/, new contracts_1.TransferProxyContract(web3Helper_1.getContractInstance(truffleTransferProxy), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.deployVaultAsync = function (from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleVault;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, web3Helper_1.linkLibrariesToDeploy(Vault, [ERC20Wrapper], this._tokenOwnerAddress)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, Vault.new({ from: from })];
                    case 2:
                        truffleVault = _a.sent();
                        return [2 /*return*/, new contracts_1.VaultContract(web3Helper_1.getContractInstance(truffleVault), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.deploySetTokenFactoryAsync = function (coreAddress, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleSetTokenFactory;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, web3Helper_1.linkLibrariesToDeploy(SetTokenFactory, [CommonValidationsLibrary, Bytes32Library], this._tokenOwnerAddress)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, SetTokenFactory.new(coreAddress, { from: from })];
                    case 2:
                        truffleSetTokenFactory = _a.sent();
                        return [2 /*return*/, new contracts_1.SetTokenFactoryContract(web3Helper_1.getContractInstance(truffleSetTokenFactory), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.deployRebalancingSetTokenFactoryAsync = function (coreAddress, componentWhitelistAddress, minimumRebalanceInterval, minimumProposalPeriod, minimumTimeToPivot, maximumTimeToPivot, minimumNaturalUnit, maximumNaturalUnit, from) {
        if (minimumRebalanceInterval === void 0) { minimumRebalanceInterval = constants_1.ONE_DAY_IN_SECONDS; }
        if (minimumProposalPeriod === void 0) { minimumProposalPeriod = constants_1.ONE_DAY_IN_SECONDS; }
        if (minimumTimeToPivot === void 0) { minimumTimeToPivot = constants_1.ONE_DAY_IN_SECONDS.div(4); }
        if (maximumTimeToPivot === void 0) { maximumTimeToPivot = constants_1.ONE_DAY_IN_SECONDS.mul(3); }
        if (minimumNaturalUnit === void 0) { minimumNaturalUnit = constants_1.DEFAULT_REBALANCING_MINIMUM_NATURAL_UNIT; }
        if (maximumNaturalUnit === void 0) { maximumNaturalUnit = constants_1.DEFAULT_REBALANCING_MAXIMUM_NATURAL_UNIT; }
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleTokenFactory;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.linkRebalancingLibrariesAsync(RebalancingSetTokenFactory)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, RebalancingSetTokenFactory.new(coreAddress, componentWhitelistAddress, minimumRebalanceInterval, minimumProposalPeriod, minimumTimeToPivot, maximumTimeToPivot, minimumNaturalUnit, maximumNaturalUnit, { from: from })];
                    case 2:
                        truffleTokenFactory = _a.sent();
                        return [2 /*return*/, new contracts_1.RebalancingSetTokenFactoryContract(web3Helper_1.getContractInstance(truffleTokenFactory), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.deployRebalancingSetTokenV2FactoryAsync = function (coreAddress, componentWhitelistAddress, liquidatorWhitelistAddress, feeCalculatorWhitelistAddress, minimumRebalanceInterval, minimumFailRebalancePeriod, maximumFailRebalancePeriod, minimumNaturalUnit, maximumNaturalUnit, from) {
        if (minimumRebalanceInterval === void 0) { minimumRebalanceInterval = constants_1.ONE_DAY_IN_SECONDS; }
        if (minimumFailRebalancePeriod === void 0) { minimumFailRebalancePeriod = constants_1.ONE_DAY_IN_SECONDS; }
        if (maximumFailRebalancePeriod === void 0) { maximumFailRebalancePeriod = constants_1.ONE_DAY_IN_SECONDS.mul(30); }
        if (minimumNaturalUnit === void 0) { minimumNaturalUnit = constants_1.DEFAULT_REBALANCING_MINIMUM_NATURAL_UNIT; }
        if (maximumNaturalUnit === void 0) { maximumNaturalUnit = constants_1.DEFAULT_REBALANCING_MAXIMUM_NATURAL_UNIT; }
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleTokenFactory;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.linkRebalancingLibrariesAsync(RebalancingSetTokenV2Factory)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, RebalancingSetTokenV2Factory.new(coreAddress, componentWhitelistAddress, liquidatorWhitelistAddress, feeCalculatorWhitelistAddress, minimumRebalanceInterval, minimumFailRebalancePeriod, maximumFailRebalancePeriod, minimumNaturalUnit, maximumNaturalUnit, { from: from })];
                    case 2:
                        truffleTokenFactory = _a.sent();
                        return [2 /*return*/, new contracts_1.RebalancingSetTokenV2FactoryContract(web3Helper_1.getContractInstance(truffleTokenFactory), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.deployRebalancingSetTokenV3FactoryAsync = function (coreAddress, componentWhitelistAddress, liquidatorWhitelistAddress, feeCalculatorWhitelistAddress, minimumRebalanceInterval, minimumFailRebalancePeriod, maximumFailRebalancePeriod, minimumNaturalUnit, maximumNaturalUnit, from) {
        if (minimumRebalanceInterval === void 0) { minimumRebalanceInterval = constants_1.ONE_DAY_IN_SECONDS; }
        if (minimumFailRebalancePeriod === void 0) { minimumFailRebalancePeriod = constants_1.ONE_DAY_IN_SECONDS; }
        if (maximumFailRebalancePeriod === void 0) { maximumFailRebalancePeriod = constants_1.ONE_DAY_IN_SECONDS.mul(30); }
        if (minimumNaturalUnit === void 0) { minimumNaturalUnit = constants_1.DEFAULT_REBALANCING_MINIMUM_NATURAL_UNIT; }
        if (maximumNaturalUnit === void 0) { maximumNaturalUnit = constants_1.DEFAULT_REBALANCING_MAXIMUM_NATURAL_UNIT; }
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleTokenFactory;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, web3Helper_1.linkLibrariesToDeploy(RebalancingSetTokenV3Factory, [FactoryUtilsLibrary, Bytes32Library], this._tokenOwnerAddress)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, RebalancingSetTokenV3Factory.new(coreAddress, componentWhitelistAddress, liquidatorWhitelistAddress, feeCalculatorWhitelistAddress, minimumRebalanceInterval, minimumFailRebalancePeriod, maximumFailRebalancePeriod, minimumNaturalUnit, maximumNaturalUnit, { from: from })];
                    case 2:
                        truffleTokenFactory = _a.sent();
                        return [2 /*return*/, new contracts_1.RebalancingSetTokenV3FactoryContract(web3Helper_1.getContractInstance(truffleTokenFactory), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.deploySetTokenAsync = function (factory, componentAddresses, units, naturalUnit, name, symbol, from) {
        if (name === void 0) { name = 'Set Token'; }
        if (symbol === void 0) { symbol = 'SET'; }
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleSetToken, setToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, web3Helper_1.linkLibrariesToDeploy(SetToken, [CommonValidationsLibrary], this._tokenOwnerAddress)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, SetToken.new(factory, componentAddresses, units, naturalUnit, name, symbol, { from: from, gas: constants_1.DEFAULT_GAS })];
                    case 2:
                        truffleSetToken = _a.sent();
                        setToken = new contracts_1.SetTokenContract(web3Helper_1.getContractInstance(truffleSetToken), { from: from, gas: constants_1.DEFAULT_GAS });
                        return [2 /*return*/, setToken];
                }
            });
        });
    };
    CoreHelper.prototype.deployCoreAndDependenciesAsync = function (from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var transferProxy, vault;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deployTransferProxyAsync()];
                    case 1:
                        transferProxy = _a.sent();
                        return [4 /*yield*/, this.deployVaultAsync()];
                    case 2:
                        vault = _a.sent();
                        return [2 /*return*/, this.deployCoreAsync(transferProxy, vault, from)];
                }
            });
        });
    };
    CoreHelper.prototype.deployCoreAsync = function (transferProxy, vault, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var libraries, truffleCore;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        libraries = [CoreIssuanceLibrary, CommonValidationsLibrary, SetTokenLibrary];
                        return [4 /*yield*/, web3Helper_1.linkLibrariesToDeploy(Core, libraries, this._tokenOwnerAddress)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, Core.new(transferProxy.address, vault.address, { from: from })];
                    case 2:
                        truffleCore = _a.sent();
                        return [2 /*return*/, new contracts_1.CoreContract(web3Helper_1.getContractInstance(truffleCore), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.deployCoreMockAsync = function (transferProxy, vault, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var libraries, truffleCore;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        libraries = [CoreIssuanceLibrary, CommonValidationsLibrary, SetTokenLibrary];
                        return [4 /*yield*/, web3Helper_1.linkLibrariesToDeploy(CoreMock, libraries, this._tokenOwnerAddress)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, CoreMock.new(transferProxy.address, vault.address, { from: from })];
                    case 2:
                        truffleCore = _a.sent();
                        return [2 /*return*/, new contracts_1.CoreMockContract(web3Helper_1.getContractInstance(truffleCore), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.deployWhiteListAsync = function (initialAddresses, from) {
        if (initialAddresses === void 0) { initialAddresses = []; }
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleWhiteList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, WhiteList.new(initialAddresses, { from: from })];
                    case 1:
                        truffleWhiteList = _a.sent();
                        return [2 /*return*/, new contracts_1.WhiteListContract(web3Helper_1.getContractInstance(truffleWhiteList), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.deployOracleWhiteListAsync = function (initialTokenAddresses, initialOracleAddresses, from) {
        if (initialTokenAddresses === void 0) { initialTokenAddresses = []; }
        if (initialOracleAddresses === void 0) { initialOracleAddresses = []; }
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleWhiteList;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, OracleWhiteList.new(initialTokenAddresses, initialOracleAddresses, { from: from })];
                    case 1:
                        truffleWhiteList = _a.sent();
                        return [2 /*return*/, new contracts_1.OracleWhiteListContract(web3Helper_1.getContractInstance(truffleWhiteList), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.deployRebalanceAuctionModuleAsync = function (core, vault, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleRebalanceAuctionModule;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, RebalanceAuctionModule.new(core.address, vault.address, { from: from })];
                    case 1:
                        truffleRebalanceAuctionModule = _a.sent();
                        return [2 /*return*/, new contracts_1.RebalanceAuctionModuleContract(web3Helper_1.getContractInstance(truffleRebalanceAuctionModule), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.deployRebalanceAuctionModuleMockAsync = function (core, vault, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleRebalanceAuctionModuleMock;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, RebalanceAuctionModuleMock.new(core.address, vault.address, { from: from })];
                    case 1:
                        truffleRebalanceAuctionModuleMock = _a.sent();
                        return [2 /*return*/, new contracts_1.RebalanceAuctionModuleMockContract(web3Helper_1.getContractInstance(truffleRebalanceAuctionModuleMock), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.deployExchangeIssuanceModuleAsync = function (core, vault, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleExchangeIssuanceModule;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, web3Helper_1.linkLibrariesToDeploy(ExchangeIssuanceModule, [SetTokenLibrary], this._tokenOwnerAddress)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, ExchangeIssuanceModule.new(core.address, vault.address, { from: from })];
                    case 2:
                        truffleExchangeIssuanceModule = _a.sent();
                        return [2 /*return*/, new contracts_1.ExchangeIssuanceModuleContract(web3Helper_1.getContractInstance(truffleExchangeIssuanceModule), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.deployCTokenExchangeIssuanceModuleAsync = function (core, vault, transferProxy, cTokenWhiteList, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleCTokenExchangeIssuanceModule;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, web3Helper_1.linkLibrariesToDeploy(CTokenExchangeIssuanceModule, [ERC20Wrapper, SetTokenLibrary], this._tokenOwnerAddress)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, CTokenExchangeIssuanceModule.new(core, vault, transferProxy, cTokenWhiteList, { from: from })];
                    case 2:
                        truffleCTokenExchangeIssuanceModule = _a.sent();
                        return [2 /*return*/, new contracts_1.CTokenExchangeIssuanceModuleContract(web3Helper_1.getContractInstance(truffleCTokenExchangeIssuanceModule), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.deployRebalancingSetCTokenExchangeIssuanceModuleAsync = function (core, transferProxy, exchangeIssuanceModule, wrappedEther, vault, cTokenWhiteList, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleModule;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, web3Helper_1.linkLibrariesToDeploy(RebalancingSetCTokenExchangeIssuanceModule, [ERC20Wrapper], this._tokenOwnerAddress)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, RebalancingSetCTokenExchangeIssuanceModule.new(core, transferProxy, exchangeIssuanceModule, wrappedEther, vault, cTokenWhiteList, { from: from })];
                    case 2:
                        truffleModule = _a.sent();
                        return [2 /*return*/, new contracts_1.RebalancingSetCTokenExchangeIssuanceModuleContract(web3Helper_1.getContractInstance(truffleModule), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.deployRebalancingSetCTokenIssuanceModuleAsync = function (core, vault, transferProxy, weth, cTokenWhiteList, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleModule;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, web3Helper_1.linkLibrariesToDeploy(RebalancingSetCTokenIssuanceModule, [ERC20Wrapper], this._tokenOwnerAddress)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, RebalancingSetCTokenIssuanceModule.new(core, vault, transferProxy, weth, cTokenWhiteList, { from: from })];
                    case 2:
                        truffleModule = _a.sent();
                        return [2 /*return*/, new contracts_1.RebalancingSetCTokenIssuanceModuleContract(web3Helper_1.getContractInstance(truffleModule), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.deployRebalancingSetExchangeIssuanceModuleAsync = function (core, transferProxy, exchangeIssuanceModule, wrappedEther, vault, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var payableExchangeIssuanceContract;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, web3Helper_1.linkLibrariesToDeploy(RebalancingSetExchangeIssuanceModule, [ERC20Wrapper], this._tokenOwnerAddress)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, RebalancingSetExchangeIssuanceModule.new(core, transferProxy, exchangeIssuanceModule, wrappedEther, vault, { from: from })];
                    case 2:
                        payableExchangeIssuanceContract = _a.sent();
                        return [2 /*return*/, new contracts_1.RebalancingSetExchangeIssuanceModuleContract(web3Helper_1.getContractInstance(payableExchangeIssuanceContract), { from: from })];
                }
            });
        });
    };
    CoreHelper.prototype.deployRebalancingSetIssuanceModuleAsync = function (core, vault, transferProxy, weth, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleModule;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, web3Helper_1.linkLibrariesToDeploy(RebalancingSetIssuanceModule, [ERC20Wrapper], this._tokenOwnerAddress)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, RebalancingSetIssuanceModule.new(core.address, vault.address, transferProxy.address, weth.address, { from: from })];
                    case 2:
                        truffleModule = _a.sent();
                        return [2 /*return*/, new contracts_1.RebalancingSetIssuanceModuleContract(web3Helper_1.getContractInstance(truffleModule), { from: from, gas: constants_1.DEFAULT_GAS })];
                }
            });
        });
    };
    CoreHelper.prototype.linkRebalancingLibrariesAsync = function (contract) {
        return __awaiter(this, void 0, void 0, function () {
            var libraries;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        libraries = [
                            ProposeLibrary,
                            StartRebalanceLibrary,
                            PlaceBidLibrary,
                            SettleRebalanceLibrary,
                            FailAuctionLibrary,
                            Bytes32Library,
                        ];
                        return [4 /*yield*/, web3Helper_1.linkLibrariesToDeploy(contract, libraries, this._tokenOwnerAddress)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* ============ CoreAdmin Extension ============ */
    CoreHelper.prototype.addFactoryAsync = function (core, setTokenFactory, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, core.addFactory.sendTransactionAsync(setTokenFactory.address, { from: from })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CoreHelper.prototype.addModuleAsync = function (core, moduleAddress, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, core.addModule.sendTransactionAsync(moduleAddress, { from: from })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* ============ Authorizable ============ */
    CoreHelper.prototype.setDefaultStateAndAuthorizationsAsync = function (core, vault, transferProxy, setTokenFactory, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.addAuthorizationAsync(vault, core.address);
                        this.addAuthorizationAsync(transferProxy, core.address);
                        return [4 /*yield*/, core.addFactory.sendTransactionAsync(setTokenFactory.address, { from: from })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CoreHelper.prototype.addAuthorizationAsync = function (contract, toAuthorize, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, contract.addAuthorizedAddress.sendTransactionAsync(toAuthorize, { from: from })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* ============ Vault ============ */
    CoreHelper.prototype.incrementAccountBalanceAsync = function (vault, account, token, quantity, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, vault.incrementTokenOwner.sendTransactionAsync(token, account, quantity, { from: from })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CoreHelper.prototype.getVaultBalancesForTokensForOwner = function (tokens, vault, owner) {
        return __awaiter(this, void 0, void 0, function () {
            var balancePromises, balances;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        balancePromises = _.map(tokens, function (address) { return vault.balances.callAsync(address, owner); });
                        return [4 /*yield*/, Promise.all(balancePromises).then(function (fetchedTokenBalances) {
                                balances = fetchedTokenBalances;
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, balances];
                }
            });
        });
    };
    /* ============ WhiteList ============ */
    CoreHelper.prototype.addTokensToWhiteList = function (tokenAddresses, whiteList, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < tokenAddresses.length)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.addTokenToWhiteList(tokenAddresses[i], whiteList)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    CoreHelper.prototype.addTokenToWhiteList = function (address, whiteList, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var isWhiteListed;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, whiteList.whiteList.callAsync(address)];
                    case 1:
                        isWhiteListed = _a.sent();
                        if (!!isWhiteListed) return [3 /*break*/, 3];
                        return [4 /*yield*/, whiteList.addAddress.sendTransactionAsync(address, { from: from })];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    CoreHelper.prototype.addAddressToWhiteList = function (address, whiteList, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, whiteList.addAddress.sendTransactionAsync(address, { from: from })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* ============ CoreFactory Extension ============ */
    CoreHelper.prototype.createSetTokenAsync = function (core, factory, componentAddresses, units, naturalUnit, name, symbol, callData, from) {
        if (name === void 0) { name = 'Set Token'; }
        if (symbol === void 0) { symbol = 'SET'; }
        if (callData === void 0) { callData = '0x0'; }
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var encodedName, encodedSymbol, txHash, logs, setAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        encodedName = SetUtils.stringToBytes(name);
                        encodedSymbol = SetUtils.stringToBytes(symbol);
                        return [4 /*yield*/, core.createSet.sendTransactionAsync(factory, componentAddresses, units, naturalUnit, encodedName, encodedSymbol, callData, { from: from })];
                    case 1:
                        txHash = _a.sent();
                        return [4 /*yield*/, setTestUtils.getLogsFromTxHash(txHash)];
                    case 2:
                        logs = _a.sent();
                        setAddress = core_1.extractNewSetTokenAddressFromLogs(logs);
                        return [4 /*yield*/, contracts_1.SetTokenContract.at(setAddress, web3, { from: from })];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /* ============ CoreAccounting Extension ============ */
    CoreHelper.prototype.depositFromUser = function (core, token, quantity, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, core.deposit.sendTransactionAsync(token, quantity, { from: from })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CoreHelper.prototype.depositTo = function (core, to, token, quantity, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, core.deposit.sendTransactionAsync(token, quantity, { from: from })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, core.internalTransfer.sendTransactionAsync(token, to, quantity, { from: from })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* ============ RebalancingToken Factory ============ */
    CoreHelper.prototype.getRebalancingInstanceFromAddress = function (rebalancingTokenAddress, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, contracts_1.RebalancingSetTokenContract.at(rebalancingTokenAddress, web3, { from: from })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /* ============ CoreIssuance Extension ============ */
    CoreHelper.prototype.issueSetTokenAsync = function (core, token, quantity, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, core.issue.sendTransactionAsync(token, quantity, { from: from })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CoreHelper.prototype.maskForAllComponents = function (numComponents) {
        var allIndices = _.range(numComponents);
        return this.maskForComponentsAtIndexes(allIndices);
    };
    CoreHelper.prototype.maskForComponentsAtIndexes = function (indexes) {
        return new bignumber_js_1.BigNumber(_.sum(_.map(indexes, function (_, idx) { return Math.pow(2, indexes[idx]); })));
    };
    /* ============ CoreOperationState Extension ============ */
    /**
     * OperationStates
     * 0 = Operational
     * 1 = Shut Down
     */
    CoreHelper.prototype.setOperationStateAsync = function (core, operationState, from) {
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, core.setOperationState.sendTransactionAsync(operationState, { from: from })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* ============ CoreExchangeDispatcher Extension ============ */
    CoreHelper.prototype.addDefaultExchanges = function (core, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var approvePromises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        approvePromises = _.map(_.values(SetUtils.EXCHANGES), function (exchangeId) {
                            return _this.addExchange(core, exchangeId, _this._tokenOwnerAddress, from);
                        });
                        return [4 /*yield*/, Promise.all(approvePromises)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CoreHelper.prototype.addExchange = function (core, exchangeId, exchangeAddress, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, core.addExchange.sendTransactionAsync(exchangeId, exchangeAddress, { from: from })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* ============ Set Token Convenience function ============ */
    CoreHelper.prototype.getSetInstance = function (setTokenAddress, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new contracts_1.SetTokenContract(web3Helper_1.getContractInstance(SetToken, setTokenAddress), { from: from, gas: constants_1.DEFAULT_GAS })];
            });
        });
    };
    return CoreHelper;
}());
exports.CoreHelper = CoreHelper;
