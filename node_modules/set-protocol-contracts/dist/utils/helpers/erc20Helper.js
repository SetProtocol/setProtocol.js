"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __importStar(require("lodash"));
var bignumber_js_1 = require("bignumber.js");
var set_protocol_utils_1 = require("set-protocol-utils");
var contracts_1 = require("../contracts");
var constants_1 = require("../constants");
var web3Helper_1 = require("../web3Helper");
var BadTokenMock = web3Helper_1.importArtifactsFromSource('BadTokenMock');
var InvalidReturnTokenMock = web3Helper_1.importArtifactsFromSource('InvalidReturnTokenMock');
var NoDecimalTokenMock = web3Helper_1.importArtifactsFromSource('NoDecimalTokenMock');
var NoXferReturnTokenMock = web3Helper_1.importArtifactsFromSource('NoXferReturnTokenMock');
var StandardTokenMock = web3Helper_1.importArtifactsFromSource('StandardTokenMock');
var StandardTokenWithFeeMock = web3Helper_1.importArtifactsFromSource('StandardTokenWithFeeMock');
var WethMock = web3Helper_1.importArtifactsFromSource('WethMock');
var ERC20Helper = /** @class */ (function () {
    function ERC20Helper(senderAccountAddress) {
        this._senderAccountAddress = senderAccountAddress;
    }
    /* ============ Deployment ============ */
    ERC20Helper.prototype.deployTokenAsync = function (initialAccount, decimals, initialTokenAmount) {
        if (decimals === void 0) { decimals = constants_1.DEFAULT_MOCK_TOKEN_DECIMALS; }
        if (initialTokenAmount === void 0) { initialTokenAmount = constants_1.DEPLOYED_TOKEN_QUANTITY; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleMockToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, StandardTokenMock.new(initialAccount, initialTokenAmount, 'Mock Token', 'MOCK', decimals, { from: this._senderAccountAddress, gas: constants_1.DEFAULT_GAS })];
                    case 1:
                        truffleMockToken = _a.sent();
                        return [2 /*return*/, new contracts_1.StandardTokenMockContract(web3Helper_1.getContractInstance(truffleMockToken), { from: this._senderAccountAddress })];
                }
            });
        });
    };
    ERC20Helper.prototype.deployTokensAsync = function (tokenCount, initialAccount) {
        return __awaiter(this, void 0, void 0, function () {
            var mockTokens, mockTokenPromises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        mockTokens = [];
                        mockTokenPromises = _.times(tokenCount, function (index) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, StandardTokenMock.new(initialAccount, constants_1.DEPLOYED_TOKEN_QUANTITY, "Component " + index, index.toString(), _.random(4, 18), { from: this._senderAccountAddress, gas: constants_1.DEFAULT_GAS })];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); });
                        return [4 /*yield*/, Promise.all(mockTokenPromises).then(function (tokenMocks) {
                                _.each(tokenMocks, function (standardToken) {
                                    mockTokens.push(new contracts_1.StandardTokenMockContract(web3Helper_1.getContractInstance(standardToken), { from: _this._senderAccountAddress }));
                                });
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, mockTokens];
                }
            });
        });
    };
    ERC20Helper.prototype.deployTokenWithFeeAsync = function (initialAccount, fee) {
        if (fee === void 0) { fee = new bignumber_js_1.BigNumber(100); }
        return __awaiter(this, void 0, void 0, function () {
            var truffleMockTokenWithFee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, StandardTokenWithFeeMock.new(initialAccount, constants_1.DEPLOYED_TOKEN_QUANTITY, "Mock Token With Fee", "FEE", fee, { from: this._senderAccountAddress, gas: constants_1.DEFAULT_GAS })];
                    case 1:
                        truffleMockTokenWithFee = _a.sent();
                        return [2 /*return*/, new contracts_1.StandardTokenWithFeeMockContract(web3Helper_1.getContractInstance(truffleMockTokenWithFee), { from: this._senderAccountAddress })];
                }
            });
        });
    };
    ERC20Helper.prototype.deployTokenNoXferReturnAsync = function (initialAccount, fee) {
        if (fee === void 0) { fee = new bignumber_js_1.BigNumber(100); }
        return __awaiter(this, void 0, void 0, function () {
            var truffleMockTokenNoXferReturn;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, NoXferReturnTokenMock.new(initialAccount, constants_1.DEPLOYED_TOKEN_QUANTITY, "Mock Token No Transfer Return Value", "NULL", constants_1.DEFAULT_MOCK_TOKEN_DECIMALS, { from: this._senderAccountAddress, gas: constants_1.DEFAULT_GAS })];
                    case 1:
                        truffleMockTokenNoXferReturn = _a.sent();
                        return [2 /*return*/, new contracts_1.NoXferReturnTokenMockContract(web3Helper_1.getContractInstance(truffleMockTokenNoXferReturn), { from: this._senderAccountAddress })];
                }
            });
        });
    };
    ERC20Helper.prototype.deployTokenInvalidReturnAsync = function (initialAccount, fee) {
        if (fee === void 0) { fee = new bignumber_js_1.BigNumber(100); }
        return __awaiter(this, void 0, void 0, function () {
            var truffleMockTokenInvalidReturn;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, InvalidReturnTokenMock.new(initialAccount, constants_1.DEPLOYED_TOKEN_QUANTITY, "Mock Token Invalid Return Value", "OOPS", constants_1.DEFAULT_MOCK_TOKEN_DECIMALS, { from: this._senderAccountAddress, gas: constants_1.DEFAULT_GAS })];
                    case 1:
                        truffleMockTokenInvalidReturn = _a.sent();
                        return [2 /*return*/, new contracts_1.InvalidReturnTokenMockContract(web3Helper_1.getContractInstance(truffleMockTokenInvalidReturn), { from: this._senderAccountAddress })];
                }
            });
        });
    };
    ERC20Helper.prototype.deployTokenWithNoDecimalAsync = function (initialAccount) {
        return __awaiter(this, void 0, void 0, function () {
            var truffleMockToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, NoDecimalTokenMock.new(initialAccount, constants_1.DEPLOYED_TOKEN_QUANTITY, 'No Decimal Token', 'NDT', { from: this._senderAccountAddress, gas: constants_1.DEFAULT_GAS })];
                    case 1:
                        truffleMockToken = _a.sent();
                        return [2 /*return*/, new contracts_1.NoDecimalTokenMockContract(web3Helper_1.getContractInstance(truffleMockToken), { from: this._senderAccountAddress })];
                }
            });
        });
    };
    ERC20Helper.prototype.deployTokenWithInvalidBalancesAsync = function (initialAccount) {
        return __awaiter(this, void 0, void 0, function () {
            var truffleMockToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, BadTokenMock.new(initialAccount, constants_1.DEPLOYED_TOKEN_QUANTITY, 'Mock Token Bad Balances', 'BAD', { from: this._senderAccountAddress, gas: constants_1.DEFAULT_GAS })];
                    case 1:
                        truffleMockToken = _a.sent();
                        return [2 /*return*/, new contracts_1.BadTokenMockContract(web3Helper_1.getContractInstance(truffleMockToken), { from: this._senderAccountAddress })];
                }
            });
        });
    };
    ERC20Helper.prototype.zrxToken = function () {
        return new contracts_1.StandardTokenMockContract(web3Helper_1.getContractInstance(StandardTokenMock, set_protocol_utils_1.SetProtocolTestUtils.ZERO_EX_TOKEN_ADDRESS), { from: this._senderAccountAddress });
    };
    ERC20Helper.prototype.kyberReserveToken = function (tokenAddress) {
        return new contracts_1.StandardTokenMockContract(web3Helper_1.getContractInstance(StandardTokenMock, tokenAddress), { from: this._senderAccountAddress });
    };
    ERC20Helper.prototype.deployWrappedEtherAsync = function (initialAccount, initialTokenAmount) {
        if (initialTokenAmount === void 0) { initialTokenAmount = constants_1.DEPLOYED_TOKEN_QUANTITY; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleMockToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, WethMock.new(initialAccount, initialTokenAmount, { from: this._senderAccountAddress, gas: constants_1.DEFAULT_GAS })];
                    case 1:
                        truffleMockToken = _a.sent();
                        return [2 /*return*/, new contracts_1.WethMockContract(web3Helper_1.getContractInstance(truffleMockToken), { from: this._senderAccountAddress })];
                }
            });
        });
    };
    ERC20Helper.prototype.approveTransferAsync = function (token, to, from) {
        if (from === void 0) { from = this._senderAccountAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.approveTransfersAsync([token], to, from)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ERC20Helper.prototype.approveTransfersAsync = function (tokens, to, from) {
        if (from === void 0) { from = this._senderAccountAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var approvePromises;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        approvePromises = _.map(tokens, function (token) {
                            return token.approve.sendTransactionAsync(to, constants_1.UNLIMITED_ALLOWANCE_IN_BASE_UNITS, { from: from });
                        });
                        return [4 /*yield*/, Promise.all(approvePromises)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ERC20Helper.prototype.transferTokenAsync = function (token, to, quantity, from) {
        if (from === void 0) { from = this._senderAccountAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.transferTokensAsync([token], to, quantity, from)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ERC20Helper.prototype.transferTokensAsync = function (tokens, to, amount, from) {
        if (from === void 0) { from = this._senderAccountAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var transferPromises;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        transferPromises = _.map(tokens, function (token) {
                            return token.transfer.sendTransactionAsync(to, amount, { from: from, gas: 100000 });
                        });
                        return [4 /*yield*/, Promise.all(transferPromises)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ERC20Helper.prototype.approveInvalidTransferAsync = function (token, to, from) {
        if (from === void 0) { from = this._senderAccountAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.approveInvalidTransfersAsync([token], to, from)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ERC20Helper.prototype.approveInvalidTransfersAsync = function (tokens, to, from) {
        if (from === void 0) { from = this._senderAccountAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var approvePromises;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        approvePromises = _.map(tokens, function (token) {
                            return token.approve.sendTransactionAsync(to, constants_1.UNLIMITED_ALLOWANCE_IN_BASE_UNITS, { from: from });
                        });
                        return [4 /*yield*/, Promise.all(approvePromises)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ERC20Helper.prototype.getTokenBalances = function (tokens, owner) {
        return __awaiter(this, void 0, void 0, function () {
            var balancePromises, balances;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        balancePromises = _.map(tokens, function (token) { return token.balanceOf.callAsync(owner); });
                        return [4 /*yield*/, Promise.all(balancePromises).then(function (fetchedTokenBalances) {
                                balances = fetchedTokenBalances;
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, balances];
                }
            });
        });
    };
    ERC20Helper.prototype.getTokenAllowances = function (tokens, owner, spender) {
        return __awaiter(this, void 0, void 0, function () {
            var allowancePromises, allowances;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        allowancePromises = _.map(tokens, function (token) { return token.allowance.callAsync(owner, spender); });
                        return [4 /*yield*/, Promise.all(allowancePromises).then(function (fetchedAllowances) {
                                allowances = fetchedAllowances;
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, allowances];
                }
            });
        });
    };
    ERC20Helper.prototype.getTokenSupplies = function (tokens) {
        return __awaiter(this, void 0, void 0, function () {
            var supplyPromises, supplies;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        supplyPromises = _.map(tokens, function (token) { return token.totalSupply.callAsync(); });
                        return [4 /*yield*/, Promise.all(supplyPromises).then(function (fetchedTokenSupplies) {
                                supplies = fetchedTokenSupplies;
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, supplies];
                }
            });
        });
    };
    ERC20Helper.prototype.getTokenInstanceAsync = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new contracts_1.StandardTokenMockContract(web3Helper_1.getContractInstance(StandardTokenMock, token), { from: this._senderAccountAddress })];
            });
        });
    };
    ERC20Helper.prototype.retrieveTokenInstancesAsync = function (tokens) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenPromises;
            var _this = this;
            return __generator(this, function (_a) {
                tokenPromises = _.map(tokens, function (tokenAddress) { return new contracts_1.StandardTokenMockContract(web3Helper_1.getContractInstance(StandardTokenMock, tokenAddress), { from: _this._senderAccountAddress }); });
                return [2 /*return*/, tokenPromises];
            });
        });
    };
    ERC20Helper.prototype.getTokensDecimalsAsync = function (tokens) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenInstances, tokenDecimalPromises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.retrieveTokenInstancesAsync(tokens)];
                    case 1:
                        tokenInstances = _a.sent();
                        tokenDecimalPromises = _.map(tokenInstances, function (token) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, token.decimals.callAsync()];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); });
                        return [4 /*yield*/, Promise.all(tokenDecimalPromises)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ERC20Helper;
}());
exports.ERC20Helper = ERC20Helper;
