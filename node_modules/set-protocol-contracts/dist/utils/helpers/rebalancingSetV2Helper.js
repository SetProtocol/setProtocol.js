"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __importStar(require("lodash"));
var setProtocolUtils = __importStar(require("set-protocol-utils"));
var contracts_1 = require("../contracts");
var bignumber_js_1 = require("bignumber.js");
var constants_1 = require("../constants");
var core_1 = require("../contract_logs/core");
var units_1 = require("../units");
var web3Helper_1 = require("../web3Helper");
var rebalancingHelper_1 = require("./rebalancingHelper");
var web3 = web3Helper_1.getWeb3();
var RebalancingSetTokenV2 = web3Helper_1.importArtifactsFromSource('RebalancingSetTokenV2');
var SetTestUtils = setProtocolUtils.SetProtocolTestUtils, SetUtils = setProtocolUtils.SetProtocolUtils;
var setTestUtils = new SetTestUtils(web3);
var RebalancingSetV2Helper = /** @class */ (function (_super) {
    __extends(RebalancingSetV2Helper, _super);
    function RebalancingSetV2Helper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /* ============ Deployment ============ */
    /**
     * addressConfig [factory, manager, liquidator, initialSet, componentWhiteList,
     *                liquidatorWhiteList, feeRecipient]
     * [0]factory                   Factory used to create the Rebalancing Set
     * [1]manager                   Address that is able to propose the next Set
     * [2]liquidator                Address of the liquidator contract
     * [3]initialSet                Initial set that collateralizes the Rebalancing set
     * [4]componentWhiteList        Whitelist that nextSet components are checked against during propose
     * [5]liquidatorWhiteList       Whitelist of valid liquidators
     * [6]feeRecipient              Address that receives any incentive fees
     *
     * uintConfig [unitShares, naturalUnit, rebalanceInterval, rebalanceFailPeriod, lastRebalanceTimestamp,
     *             entryFee, rebalanceFee]
     * [0]initialUnitShares         Units of currentSet that equals one share
     * [1]naturalUnit               The minimum multiple of Sets that can be issued or redeemed
     * [2]rebalanceInterval:        Minimum amount of time between rebalances
     * [3]rebalanceFailPeriod:      Time after auctionStart where something in the rebalance has gone wrong
     * [4]lastRebalanceTimestamp:   Time of the last rebalance; Allows customized deployments
     * [5]entryFee:                 Mint fee represented in a scaled percentage value
     * [6]rebalanceFee:             Rebalance fee represented in a scaled percentage value
     *
     */
    RebalancingSetV2Helper.prototype.deployRebalancingSetTokenV2Async = function (addressConfig, bigNumberConfig, name, symbol, from) {
        if (name === void 0) { name = 'Rebalancing Set'; }
        if (symbol === void 0) { symbol = 'RBSET'; }
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var truffleRebalancingToken, rebalancingToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, RebalancingSetTokenV2.new(addressConfig, bigNumberConfig, name, symbol, { from: from, gas: constants_1.DEFAULT_GAS })];
                    case 1:
                        truffleRebalancingToken = _a.sent();
                        rebalancingToken = new contracts_1.RebalancingSetTokenV2Contract(web3Helper_1.getContractInstance(truffleRebalancingToken), { from: from, gas: constants_1.DEFAULT_GAS });
                        return [2 /*return*/, rebalancingToken];
                }
            });
        });
    };
    RebalancingSetV2Helper.prototype.createRebalancingTokenV2Async = function (core, factory, componentAddresses, units, naturalUnit, callData, name, symbol, from) {
        if (callData === void 0) { callData = ''; }
        if (name === void 0) { name = 'Rebalancing Set Token'; }
        if (symbol === void 0) { symbol = 'RBSET'; }
        if (from === void 0) { from = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var encodedName, encodedSymbol, txHash, logs, setAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        encodedName = SetUtils.stringToBytes(name);
                        encodedSymbol = SetUtils.stringToBytes(symbol);
                        return [4 /*yield*/, core.createSet.sendTransactionAsync(factory, componentAddresses, units, naturalUnit, encodedName, encodedSymbol, callData, { from: from })];
                    case 1:
                        txHash = _a.sent();
                        return [4 /*yield*/, setTestUtils.getLogsFromTxHash(txHash)];
                    case 2:
                        logs = _a.sent();
                        setAddress = core_1.extractNewSetTokenAddressFromLogs(logs);
                        return [4 /*yield*/, contracts_1.RebalancingSetTokenV2Contract.at(setAddress, web3, { from: from })];
                    case 3: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RebalancingSetV2Helper.prototype.createDefaultRebalancingSetTokenV2Async = function (core, factory, manager, liquidator, feeRecipient, rebalanceFeeCalculator, initialSet, failRebalancePeriod, lastRebalanceTimestamp, entryFee, rebalanceFee, initialUnitShares) {
        if (entryFee === void 0) { entryFee = constants_1.ZERO; }
        if (rebalanceFee === void 0) { rebalanceFee = constants_1.ZERO; }
        if (initialUnitShares === void 0) { initialUnitShares = constants_1.DEFAULT_UNIT_SHARES; }
        return __awaiter(this, void 0, void 0, function () {
            var rebalanceInterval, rebalanceFeeCallData, callData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rebalanceInterval = constants_1.ONE_DAY_IN_SECONDS;
                        rebalanceFeeCallData = SetUtils.generateFixedFeeCalculatorCalldata(rebalanceFee);
                        callData = SetUtils.generateRebalancingSetTokenV2CallData(manager, liquidator, feeRecipient, rebalanceFeeCalculator, rebalanceInterval, failRebalancePeriod, lastRebalanceTimestamp, entryFee, rebalanceFeeCallData);
                        return [4 /*yield*/, this.createRebalancingTokenV2Async(core, factory, [initialSet], [initialUnitShares], constants_1.DEFAULT_REBALANCING_NATURAL_UNIT, callData)];
                    case 1: 
                    // Create rebalancingSetToken
                    return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    RebalancingSetV2Helper.prototype.transitionToRebalanceV2Async = function (core, rebalancingComponentWhiteList, rebalancingSetToken, nextSetToken, caller, liquidatorData) {
        if (liquidatorData === void 0) { liquidatorData = constants_1.EMPTY_BYTESTRING; }
        return __awaiter(this, void 0, void 0, function () {
            var currentSupply, currentSetMintQuantity, currentSetToken, rebalancingSetQuantityToIssue, nextSetTokenComponentAddresses;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, rebalancingSetToken.totalSupply.callAsync()];
                    case 1:
                        currentSupply = _a.sent();
                        if (!currentSupply.eq(new bignumber_js_1.BigNumber(0))) return [3 /*break*/, 5];
                        currentSetMintQuantity = units_1.ether(8);
                        return [4 /*yield*/, rebalancingSetToken.currentSet.callAsync()];
                    case 2:
                        currentSetToken = _a.sent();
                        // Issue currentSetToken
                        return [4 /*yield*/, core.issue.sendTransactionAsync(currentSetToken, currentSetMintQuantity, web3Helper_1.txnFrom(caller))];
                    case 3:
                        // Issue currentSetToken
                        _a.sent();
                        rebalancingSetQuantityToIssue = units_1.ether(7);
                        return [4 /*yield*/, core.issue.sendTransactionAsync(rebalancingSetToken.address, rebalancingSetQuantityToIssue, web3Helper_1.txnFrom(caller))];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [4 /*yield*/, nextSetToken.getComponents.callAsync()];
                    case 6:
                        nextSetTokenComponentAddresses = _a.sent();
                        return [4 /*yield*/, this._coreHelper.addTokensToWhiteList(nextSetTokenComponentAddresses, rebalancingComponentWhiteList)];
                    case 7:
                        _a.sent();
                        // Transition to rebalance
                        return [4 /*yield*/, this._blockchain.increaseTimeAsync(constants_1.ONE_DAY_IN_SECONDS.add(1))];
                    case 8:
                        // Transition to rebalance
                        _a.sent();
                        return [4 /*yield*/, rebalancingSetToken.startRebalance.sendTransactionAsync(nextSetToken.address, liquidatorData, { from: caller, gas: constants_1.DEFAULT_GAS })];
                    case 9:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RebalancingSetV2Helper.prototype.transitionToDrawdownV2Async = function (core, rebalancingComponentWhiteList, rebalancingSetToken, rebalanceAuctionModule, liquidatorMock, nextSetToken, manager, liquidatorData, caller) {
        if (liquidatorData === void 0) { liquidatorData = constants_1.EMPTY_BYTESTRING; }
        if (caller === void 0) { caller = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var minimumBid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.transitionToRebalanceV2Async(core, rebalancingComponentWhiteList, rebalancingSetToken, nextSetToken, manager, liquidatorData)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, liquidatorMock.minimumBid.callAsync(rebalancingSetToken.address)];
                    case 2:
                        minimumBid = _a.sent();
                        return [4 /*yield*/, this.placeBidAsync(rebalanceAuctionModule, rebalancingSetToken.address, minimumBid)];
                    case 3:
                        _a.sent();
                        // Transition to rebalance
                        return [4 /*yield*/, this._blockchain.increaseTimeAsync(constants_1.ONE_DAY_IN_SECONDS.add(1))];
                    case 4:
                        // Transition to rebalance
                        _a.sent();
                        return [4 /*yield*/, rebalancingSetToken.endFailedRebalance.sendTransactionAsync({ from: caller, gas: constants_1.DEFAULT_GAS })];
                    case 5:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RebalancingSetV2Helper.prototype.failRebalanceToDrawdownAsync = function (rebalancingSetToken, liquidatorMock, rebalanceAuctionModule, caller) {
        if (caller === void 0) { caller = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var minimumBid;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, liquidatorMock.minimumBid.callAsync(rebalancingSetToken.address)];
                    case 1:
                        minimumBid = _a.sent();
                        return [4 /*yield*/, this.placeBidAsync(rebalanceAuctionModule, rebalancingSetToken.address, minimumBid)];
                    case 2:
                        _a.sent();
                        // Transition to rebalance
                        return [4 /*yield*/, this._blockchain.increaseTimeAsync(constants_1.ONE_DAY_IN_SECONDS.add(1))];
                    case 3:
                        // Transition to rebalance
                        _a.sent();
                        return [4 /*yield*/, rebalancingSetToken.endFailedRebalance.sendTransactionAsync({ from: caller, gas: constants_1.DEFAULT_GAS })];
                    case 4:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RebalancingSetV2Helper.prototype.placeBidAsync = function (rebalanceAuctionModule, rebalancingSetTokenAddress, bidQuantity, allowPartialFill, caller) {
        if (allowPartialFill === void 0) { allowPartialFill = false; }
        if (caller === void 0) { caller = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, rebalanceAuctionModule.bid.sendTransactionAsync(rebalancingSetTokenAddress, bidQuantity, allowPartialFill, { from: caller, gas: constants_1.DEFAULT_GAS })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RebalancingSetV2Helper.prototype.endFailedRebalanceAsync = function (rebalancingSetToken, caller) {
        if (caller === void 0) { caller = this._tokenOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, rebalancingSetToken.endFailedAuction.sendTransactionAsync({ gas: constants_1.DEFAULT_GAS })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RebalancingSetV2Helper.prototype.getFailedWithdrawComponentsAsync = function (nextSetToken, currentSetToken) {
        return __awaiter(this, void 0, void 0, function () {
            var nextSetComponents, currentSetComponents;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, nextSetToken.getComponents.callAsync()];
                    case 1:
                        nextSetComponents = _a.sent();
                        return [4 /*yield*/, currentSetToken.getComponents.callAsync()];
                    case 2:
                        currentSetComponents = _a.sent();
                        return [2 /*return*/, _.union(currentSetComponents, nextSetComponents)];
                }
            });
        });
    };
    RebalancingSetV2Helper.prototype.getSetIssueQuantity = function (setToken, rebalancingSetToken, vault) {
        return __awaiter(this, void 0, void 0, function () {
            var maxIssueAmount, setTokenNaturalUnit;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.calculateMaxIssueAmount(setToken, rebalancingSetToken, vault)];
                    case 1:
                        maxIssueAmount = _a.sent();
                        return [4 /*yield*/, setToken.naturalUnit.callAsync()];
                    case 2:
                        setTokenNaturalUnit = _a.sent();
                        return [2 /*return*/, maxIssueAmount.div(setTokenNaturalUnit).round(0, 3).mul(setTokenNaturalUnit)];
                }
            });
        });
    };
    RebalancingSetV2Helper.prototype.calculateMaxIssueAmount = function (nextSetToken, rebalancingSetToken, vault) {
        return __awaiter(this, void 0, void 0, function () {
            var maxIssueAmount, naturalUnit, components, units, i, componentVaultBalance, impliedIssueAmount;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        maxIssueAmount = constants_1.UNLIMITED_ALLOWANCE_IN_BASE_UNITS;
                        return [4 /*yield*/, nextSetToken.naturalUnit.callAsync()];
                    case 1:
                        naturalUnit = _a.sent();
                        return [4 /*yield*/, nextSetToken.getComponents.callAsync()];
                    case 2:
                        components = _a.sent();
                        return [4 /*yield*/, nextSetToken.getUnits.callAsync()];
                    case 3:
                        units = _a.sent();
                        i = 0;
                        _a.label = 4;
                    case 4:
                        if (!(i < components.length)) return [3 /*break*/, 7];
                        return [4 /*yield*/, vault.getOwnerBalance.callAsync(components[i], rebalancingSetToken.address)];
                    case 5:
                        componentVaultBalance = _a.sent();
                        impliedIssueAmount = componentVaultBalance.div(units[i]).mul(naturalUnit);
                        if (impliedIssueAmount.lt(maxIssueAmount)) {
                            maxIssueAmount = impliedIssueAmount;
                        }
                        _a.label = 6;
                    case 6:
                        i++;
                        return [3 /*break*/, 4];
                    case 7: return [2 /*return*/, maxIssueAmount];
                }
            });
        });
    };
    // Simplified: quantity * fee / 10e18
    RebalancingSetV2Helper.prototype.calculateEntryFee = function (rebalancingSetToken, quantity) {
        return __awaiter(this, void 0, void 0, function () {
            var entryFee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, rebalancingSetToken.entryFee.callAsync()];
                    case 1:
                        entryFee = _a.sent();
                        return [2 /*return*/, entryFee.mul(quantity).div(constants_1.SCALE_FACTOR).round(0, 3)];
                }
            });
        });
    };
    // Fee is paid via inflation and ownership of the Set.
    // Math: newShares / (newShares + oldShares) = percentFee
    // Simplified: fee * oldShare / (scaleFactor - fee)
    RebalancingSetV2Helper.prototype.calculateRebalanceFeeInflation = function (feePercentage, totalSupply) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, feePercentage.mul(totalSupply).div(constants_1.SCALE_FACTOR.sub(feePercentage)).round(0, 3)];
            });
        });
    };
    RebalancingSetV2Helper.prototype.getExpectedUnitSharesV2 = function (core, rebalancingSetToken, newSet, vault) {
        return __awaiter(this, void 0, void 0, function () {
            var totalSupply, rebalancingNaturalUnit, newSetNaturalUnit, components, units, rebalanceFee, maxIssueAmount, i, componentAmount, componentIssueAmount, issueAmount, rebalancingInflation, postFeeTotalySupply, naturalUnitsOutstanding, unitShares;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, rebalancingSetToken.totalSupply.callAsync()];
                    case 1:
                        totalSupply = _a.sent();
                        return [4 /*yield*/, rebalancingSetToken.naturalUnit.callAsync()];
                    case 2:
                        rebalancingNaturalUnit = _a.sent();
                        return [4 /*yield*/, newSet.naturalUnit.callAsync()];
                    case 3:
                        newSetNaturalUnit = _a.sent();
                        return [4 /*yield*/, newSet.getComponents.callAsync()];
                    case 4:
                        components = _a.sent();
                        return [4 /*yield*/, newSet.getUnits.callAsync()];
                    case 5:
                        units = _a.sent();
                        return [4 /*yield*/, rebalancingSetToken.rebalanceFee.callAsync()];
                    case 6:
                        rebalanceFee = _a.sent();
                        maxIssueAmount = constants_1.UNLIMITED_ALLOWANCE_IN_BASE_UNITS;
                        i = 0;
                        _a.label = 7;
                    case 7:
                        if (!(i < components.length)) return [3 /*break*/, 10];
                        return [4 /*yield*/, vault.getOwnerBalance.callAsync(components[i], rebalancingSetToken.address)];
                    case 8:
                        componentAmount = _a.sent();
                        componentIssueAmount = componentAmount.div(units[i]).round(0, 3).mul(newSetNaturalUnit);
                        if (componentIssueAmount.lessThan(maxIssueAmount)) {
                            maxIssueAmount = componentIssueAmount;
                        }
                        _a.label = 9;
                    case 9:
                        i++;
                        return [3 /*break*/, 7];
                    case 10:
                        issueAmount = maxIssueAmount.div(newSetNaturalUnit).round(0, 3).mul(newSetNaturalUnit);
                        return [4 /*yield*/, this.calculateRebalanceFeeInflation(rebalanceFee, totalSupply)];
                    case 11:
                        rebalancingInflation = _a.sent();
                        postFeeTotalySupply = totalSupply.plus(rebalancingInflation);
                        naturalUnitsOutstanding = postFeeTotalySupply.div(rebalancingNaturalUnit);
                        unitShares = issueAmount.div(naturalUnitsOutstanding).round(0, 3);
                        return [2 /*return*/, unitShares];
                }
            });
        });
    };
    return RebalancingSetV2Helper;
}(rebalancingHelper_1.RebalancingHelper));
exports.RebalancingSetV2Helper = RebalancingSetV2Helper;
