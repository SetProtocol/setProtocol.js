"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = __importStar(require("lodash"));
var setProtocolUtils = __importStar(require("set-protocol-utils"));
var constants_1 = require("../constants");
var SetUtils = setProtocolUtils.SetProtocolUtils;
var SET_FULL_TOKEN_UNITS = SetUtils.CONSTANTS.SET_FULL_TOKEN_UNITS;
var ValuationHelper = /** @class */ (function () {
    function ValuationHelper(contractOwnerAddress, coreHelper, erc20Helper, oracleHelper) {
        this._contractOwnerAddress = contractOwnerAddress;
        this._coreHelper = coreHelper;
        this._erc20Helper = erc20Helper;
        this._oracleHelper = oracleHelper;
    }
    ValuationHelper.prototype.calculateSetTokenValueAsync = function (setToken, oracleWhiteList, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var componentTokens, tokenPrices, componentUnits, setNaturalUnit, componentDecimals, setTokenPrice, i, tokenUnitsInFullSet, componentValue;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, setToken.getComponents.callAsync()];
                    case 1:
                        componentTokens = _a.sent();
                        return [4 /*yield*/, this.getComponentPricesAsync(componentTokens, oracleWhiteList)];
                    case 2:
                        tokenPrices = _a.sent();
                        return [4 /*yield*/, setToken.getUnits.callAsync()];
                    case 3:
                        componentUnits = _a.sent();
                        return [4 /*yield*/, setToken.naturalUnit.callAsync()];
                    case 4:
                        setNaturalUnit = _a.sent();
                        return [4 /*yield*/, this._erc20Helper.getTokensDecimalsAsync(componentTokens)];
                    case 5:
                        componentDecimals = _a.sent();
                        setTokenPrice = constants_1.ZERO;
                        for (i = 0; i < componentUnits.length; i++) {
                            tokenUnitsInFullSet = SET_FULL_TOKEN_UNITS
                                .mul(componentUnits[i])
                                .div(setNaturalUnit)
                                .round(0, 3);
                            componentValue = this.computeTokenDollarAmount(tokenPrices[i], tokenUnitsInFullSet, componentDecimals[i]);
                            setTokenPrice = setTokenPrice.add(componentValue);
                        }
                        return [2 /*return*/, setTokenPrice];
                }
            });
        });
    };
    ValuationHelper.prototype.calculateRebalancingSetTokenValueAsync = function (rebalancingSetToken, oracleWhiteList) {
        return __awaiter(this, void 0, void 0, function () {
            var currentSetAddress, currentSetInstance, collateralValue, unitShares, naturalUnit;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, rebalancingSetToken.currentSet.callAsync()];
                    case 1:
                        currentSetAddress = _a.sent();
                        return [4 /*yield*/, this._coreHelper.getSetInstance(currentSetAddress)];
                    case 2:
                        currentSetInstance = _a.sent();
                        return [4 /*yield*/, this.calculateSetTokenValueAsync(currentSetInstance, oracleWhiteList)];
                    case 3:
                        collateralValue = _a.sent();
                        return [4 /*yield*/, rebalancingSetToken.unitShares.callAsync()];
                    case 4:
                        unitShares = _a.sent();
                        return [4 /*yield*/, rebalancingSetToken.naturalUnit.callAsync()];
                    case 5:
                        naturalUnit = _a.sent();
                        return [2 /*return*/, collateralValue.mul(unitShares).div(naturalUnit).round(0, 3)];
                }
            });
        });
    };
    ValuationHelper.prototype.calculateAllocationValueAsync = function (setToken, oracleWhiteList, asset) {
        return __awaiter(this, void 0, void 0, function () {
            var components, componentIndex, tokenPrices, componentUnits, setNaturalUnit, tokenUnitsInFullSet, assetDecimals;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, setToken.getComponents.callAsync()];
                    case 1:
                        components = _a.sent();
                        componentIndex = components.indexOf(asset);
                        if (!(componentIndex != -1)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.getComponentPricesAsync(components, oracleWhiteList)];
                    case 2:
                        tokenPrices = _a.sent();
                        return [4 /*yield*/, setToken.getUnits.callAsync()];
                    case 3:
                        componentUnits = _a.sent();
                        return [4 /*yield*/, setToken.naturalUnit.callAsync()];
                    case 4:
                        setNaturalUnit = _a.sent();
                        tokenUnitsInFullSet = SET_FULL_TOKEN_UNITS
                            .mul(componentUnits[componentIndex])
                            .div(setNaturalUnit)
                            .round(0, 3);
                        return [4 /*yield*/, this._erc20Helper.getTokensDecimalsAsync([asset])];
                    case 5:
                        assetDecimals = _a.sent();
                        return [2 /*return*/, this.computeTokenDollarAmount(tokenPrices[componentIndex], tokenUnitsInFullSet, assetDecimals[0])];
                    case 6: return [2 /*return*/, constants_1.ZERO];
                }
            });
        });
    };
    ValuationHelper.prototype.computeTokenDollarAmount = function (tokenPrice, unitsInFullSet, tokenDecimals) {
        return tokenPrice
            .mul(unitsInFullSet)
            .div(Math.pow(10, tokenDecimals.toNumber()))
            .round(0, 3);
    };
    ValuationHelper.prototype.getComponentPricesAsync = function (components, oracleWhiteList, from) {
        if (from === void 0) { from = this._contractOwnerAddress; }
        return __awaiter(this, void 0, void 0, function () {
            var componentOracles, oracleInstances, oraclePricePromises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, oracleWhiteList.getOracleAddressesByToken.callAsync(components)];
                    case 1:
                        componentOracles = _a.sent();
                        oracleInstances = _.map(componentOracles, function (address) {
                            return _this._oracleHelper.getUpdatableOracleMockInstance(address);
                        });
                        oraclePricePromises = _.map(oracleInstances, function (oracle) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, oracle.read.callAsync()];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); });
                        return [4 /*yield*/, Promise.all(oraclePricePromises)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return ValuationHelper;
}());
exports.ValuationHelper = ValuationHelper;
