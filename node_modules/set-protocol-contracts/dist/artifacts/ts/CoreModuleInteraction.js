"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.CoreModuleInteraction={contractName:"CoreModuleInteraction",abi:[{constant:true,inputs:[{name:"_factory",type:"address"}],name:"validFactories",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"exchanges",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"setTokens",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_exchangeId",type:"uint8"}],name:"exchangeIds",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_module",type:"address"}],name:"validModules",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"transferProxy",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"operationState",outputs:[{name:"",type:"uint8"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_priceLibrary",type:"address"}],name:"validPriceLibraries",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"state",outputs:[{name:"operationState",type:"uint8"},{name:"transferProxy",type:"address"},{name:"vault",type:"address"},{name:"transferProxyInstance",type:"address"},{name:"vaultInstance",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"priceLibraries",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_set",type:"address"}],name:"disabledSets",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"modules",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"vault",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"factories",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_set",type:"address"}],name:"validSets",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_token",type:"address"},{name:"_quantity",type:"uint256"}],name:"depositModule",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_tokens",type:"address[]"},{name:"_quantities",type:"uint256[]"}],name:"batchDepositModule",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_token",type:"address"},{name:"_quantity",type:"uint256"}],name:"withdrawModule",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_tokens",type:"address[]"},{name:"_quantities",type:"uint256[]"}],name:"batchWithdrawModule",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_componentOwner",type:"address"},{name:"_setRecipient",type:"address"},{name:"_set",type:"address"},{name:"_quantity",type:"uint256"}],name:"issueModule",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_recipient",type:"address"},{name:"_set",type:"address"},{name:"_quantity",type:"uint256"}],name:"issueInVaultModule",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_burnAddress",type:"address"},{name:"_incrementAddress",type:"address"},{name:"_set",type:"address"},{name:"_quantity",type:"uint256"}],name:"redeemModule",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_tokens",type:"address[]"},{name:"_owner",type:"address"},{name:"_quantities",type:"uint256[]"}],name:"batchIncrementTokenOwnerModule",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_tokens",type:"address[]"},{name:"_owner",type:"address"},{name:"_quantities",type:"uint256[]"}],name:"batchDecrementTokenOwnerModule",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_tokens",type:"address[]"},{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_quantities",type:"uint256[]"}],name:"batchTransferBalanceModule",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_token",type:"address"},{name:"_quantity",type:"uint256"},{name:"_from",type:"address"},{name:"_to",type:"address"}],name:"transferModule",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_tokens",type:"address[]"},{name:"_quantities",type:"uint256[]"},{name:"_from",type:"address"},{name:"_to",type:"address"}],name:"batchTransferModule",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"}],metadata:'{"compiler":{"version":"0.5.7+commit.6da8b019"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_token","type":"address"},{"name":"_quantity","type":"uint256"}],"name":"withdrawModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_factory","type":"address"}],"name":"validFactories","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"exchanges","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_tokens","type":"address[]"},{"name":"_owner","type":"address"},{"name":"_quantities","type":"uint256[]"}],"name":"batchIncrementTokenOwnerModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_tokens","type":"address[]"},{"name":"_quantities","type":"uint256[]"},{"name":"_from","type":"address"},{"name":"_to","type":"address"}],"name":"batchTransferModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"setTokens","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_tokens","type":"address[]"},{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_quantities","type":"uint256[]"}],"name":"batchTransferBalanceModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_exchangeId","type":"uint8"}],"name":"exchangeIds","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_burnAddress","type":"address"},{"name":"_incrementAddress","type":"address"},{"name":"_set","type":"address"},{"name":"_quantity","type":"uint256"}],"name":"redeemModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_module","type":"address"}],"name":"validModules","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"transferProxy","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"operationState","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_set","type":"address"},{"name":"_quantity","type":"uint256"}],"name":"issueInVaultModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_componentOwner","type":"address"},{"name":"_setRecipient","type":"address"},{"name":"_set","type":"address"},{"name":"_quantity","type":"uint256"}],"name":"issueModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_priceLibrary","type":"address"}],"name":"validPriceLibraries","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"state","outputs":[{"name":"operationState","type":"uint8"},{"name":"transferProxy","type":"address"},{"name":"vault","type":"address"},{"name":"transferProxyInstance","type":"address"},{"name":"vaultInstance","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_tokens","type":"address[]"},{"name":"_owner","type":"address"},{"name":"_quantities","type":"uint256[]"}],"name":"batchDecrementTokenOwnerModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_tokens","type":"address[]"},{"name":"_quantities","type":"uint256[]"}],"name":"batchDepositModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"priceLibraries","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_set","type":"address"}],"name":"disabledSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_token","type":"address"},{"name":"_quantity","type":"uint256"}],"name":"depositModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"modules","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"vault","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_token","type":"address"},{"name":"_quantity","type":"uint256"},{"name":"_from","type":"address"},{"name":"_to","type":"address"}],"name":"transferModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"factories","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_tokens","type":"address[]"},{"name":"_quantities","type":"uint256[]"}],"name":"batchWithdrawModule","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_set","type":"address"}],"name":"validSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}],"devdoc":{"author":"Set Protocol * Extension used to expose internal accounting and issuance functions, vault, and proxy functions to modules.","methods":{"batchDecrementTokenOwnerModule(address[],address,uint256[])":{"params":{"_owner":"The address of the token owner","_quantities":"The numbers of tokens to attribute to owner","_tokens":"The addresses of the ERC20 tokens"}},"batchDepositModule(address,address,address[],uint256[])":{"params":{"_from":"Address to transfer tokens from","_quantities":"Array of the amounts of tokens to deposit","_to":"Address to credit for deposits","_tokens":"Array of the addresses of the tokens being deposited"}},"batchIncrementTokenOwnerModule(address[],address,uint256[])":{"params":{"_owner":"The address of the token owner","_quantities":"The numbers of tokens to attribute to owner","_tokens":"The addresses of the ERC20 tokens"}},"batchTransferBalanceModule(address[],address,address,uint256[])":{"params":{"_from":"Address tokens being transferred from","_quantities":"Amounts of tokens being transferred","_to":"Address tokens being transferred to","_tokens":"Addresses of tokens being transferred"}},"batchTransferModule(address[],uint256[],address,address)":{"params":{"_from":"The address to transfer from","_quantities":"The numbers of tokens to transfer","_to":"The address to transfer to","_tokens":"The addresses of the ERC20 token"}},"batchWithdrawModule(address,address,address[],uint256[])":{"params":{"_from":"Address to decredit for withdrawals","_quantities":"Array of the amounts of tokens to withdraw","_to":"Address to transfer tokens to","_tokens":"Array of the addresses of the tokens being withdrawn"}},"depositModule(address,address,address,uint256)":{"params":{"_from":"Address to transfer tokens from","_quantity":"Amount of tokens to deposit","_to":"Address to credit for deposits","_token":"Address of the token being deposited"}},"disabledSets(address)":{"params":{"_set":"Set address"},"return":"bool           Boolean indicating if is a disabled Set"},"exchangeIds(uint8)":{"params":{"_exchangeId":"ExchangeId number"},"return":"address           Address belonging to given exchangeId"},"exchanges()":{"return":"address[]      Array of valid exchange wrappers"},"factories()":{"return":"address[]      Array of valid factories"},"issueInVaultModule(address,address,uint256)":{"params":{"_quantity":"Number of tokens to redeem","_recipient":"Address to issue to","_set":"Address of the Set"}},"issueModule(address,address,address,uint256)":{"params":{"_componentOwner":"Address to use tokens from","_quantity":"Number of tokens to issue","_set":"Address of the Set to issue","_setRecipient":"Address to issue Set to"}},"modules()":{"return":"address[]      Array of valid modules"},"operationState()":{"return":"uint8           Uint8 representing the operational state of the protocol"},"priceLibraries()":{"return":"address[]      Array of valid price libraries"},"redeemModule(address,address,address,uint256)":{"params":{"_burnAddress":"Address to burn token from","_incrementAddress":"Address to increment component tokens to","_quantity":"Number of tokens to redeem","_set":"Address of the Set to redeem"}},"setTokens()":{"return":"address[]      Array of valid Set Tokens"},"transferModule(address,uint256,address,address)":{"params":{"_from":"The address to transfer from","_quantity":"The number of tokens to transfer","_to":"The address to transfer to","_token":"The address of the ERC20 token"}},"transferProxy()":{"return":"address       transferProxy address"},"validFactories(address)":{"params":{"_factory":"Factory address"},"return":"bool           Boolean indicating if enabled factory"},"validModules(address)":{"params":{"_module":"Factory address"},"return":"bool           Boolean indicating if enabled factory"},"validPriceLibraries(address)":{"params":{"_priceLibrary":"Price library address"},"return":"bool             Boolean indicating if valid Price Library"},"validSets(address)":{"params":{"_set":"Set address"},"return":"bool           Boolean indicating if valid Set"},"vault()":{"return":"address        vault address"},"withdrawModule(address,address,address,uint256)":{"params":{"_from":"Address to decredit for withdrawals","_quantity":"Amount of tokens to withdraw","_to":"Address to transfer tokens to","_token":"Address of the token being withdrawn"}}},"title":"CoreModularInteraction"},"userdoc":{"methods":{"batchDecrementTokenOwnerModule(address[],address,uint256[])":{"notice":"Expose vault function that decrement user\'s balance in the vault Only available to system modules."},"batchDepositModule(address,address,address[],uint256[])":{"notice":"Exposes internal function that deposits multiple tokens to the vault, exposed to system modules. Quantities should be in the order of the addresses of the tokens being deposited."},"batchIncrementTokenOwnerModule(address[],address,uint256[])":{"notice":"Expose vault function that increments user\'s balance in the vault. Available to system modules"},"batchTransferBalanceModule(address[],address,address,uint256[])":{"notice":"Expose vault function that transfer vault balances between users Only available to system modules."},"batchTransferModule(address[],uint256[],address,address)":{"notice":"Expose transfer proxy function to transfer tokens from one address to another Only available to system modules."},"batchWithdrawModule(address,address,address[],uint256[])":{"notice":"Exposes internal function that withdraws multiple tokens from the vault, to system modules. Quantities should be in the order of the addresses of the tokens being withdrawn."},"depositModule(address,address,address,uint256)":{"notice":"Exposes internal function that deposits tokens to the vault, exposed to system modules. Quantities should be in the order of the addresses of the tokens being deposited."},"disabledSets(address)":{"notice":"Return boolean indicating if address is a disabled Set."},"exchangeIds(uint8)":{"notice":"Return address belonging to given exchangeId."},"exchanges()":{"notice":"Return array of all valid exchange wrappers."},"factories()":{"notice":"Return array of all valid factories."},"issueInVaultModule(address,address,uint256)":{"notice":"Converts recipient\'s components into Set Token\'s held directly in Vault"},"issueModule(address,address,address,uint256)":{"notice":"Expose internal function that exchanges components for Set tokens, accepting any owner, to system modules"},"modules()":{"notice":"Return array of all valid Modules."},"operationState()":{"notice":"Return uint8 representing the operational state of the protocol"},"priceLibraries()":{"notice":"Return array of all valid price libraries."},"redeemModule(address,address,address,uint256)":{"notice":"Expose internal function that exchanges Set tokens for components, accepting any owner, to system modules"},"setTokens()":{"notice":"Return array of all valid Set Tokens."},"transferModule(address,uint256,address,address)":{"notice":"Transfers token from one address to another using the transfer proxy. Only available to system modules."},"transferProxy()":{"notice":"Return transferProxy address."},"validFactories(address)":{"notice":"Return boolean indicating if address is valid factory."},"validModules(address)":{"notice":"Return boolean indicating if address is valid module."},"validPriceLibraries(address)":{"notice":"Return boolean indicating if address is a valid Rebalancing Price Library."},"validSets(address)":{"notice":"Return boolean indicating if address is valid Set."},"vault()":{"notice":"Return vault address"},"withdrawModule(address,address,address,uint256)":{"notice":"Exposes internal function that withdraws multiple tokens to the vault, exposed to system modules. Quantities should be in the order of the addresses of the tokens being withdrawn."}}}},"settings":{"compilationTarget":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/extensions/CoreModuleInteraction.sol":"CoreModuleInteraction"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/extensions/CoreModuleInteraction.sol":{"keccak256":"0xe059daee2315f1fb3df0b32cd37414be87cb76f2581fdf9094bccf21fa9077f2","urls":["bzzr://712969dd707a8c2d4f107c3944dcaf8d4c878862409959ed947b20f33e57f95b"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/ICoreAccounting.sol":{"keccak256":"0xbb67b64c746a0ca24fdb27932a9c47ea222cbcc923a12dde4fc380c3c2850b50","urls":["bzzr://7cccb4a9a76b4ce6dad1513f1fd3ce57c86d4f7b6b7be0391cce2bdda4180d25"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/ICoreIssuance.sol":{"keccak256":"0x19479fdc6ad22f8be24224157619682cbe8f6018b7b4b1839ed60a327b34dc93","urls":["bzzr://8ca6bcc5ecaafab3365019371ab0abe524ae11160f8372e2c6b07003c60cf6c6"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/ITransferProxy.sol":{"keccak256":"0x962d54385cc4760c550cd2f16bfdb53e967def4c5d3acb7b3d0b3d7a49f902de","urls":["bzzr://cb8994c8bae7fa1d55d240f44396f4156b45c81afa6fcfa608fd5e4bf9f1a919"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/IVault.sol":{"keccak256":"0xf8a6d376173be39f5744492866db5dd3f91453a124d23679ff164ff3817f2f4f","urls":["bzzr://896c0a8329175c1620e1a22467778b835defe0e61847e5a8427a306f42391e64"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/lib/CoreState.sol":{"keccak256":"0xc0aa403578d64be9f30fb2299cedcf4cc5e047bfe07cff4e70206948620b7c71","urls":["bzzr://2ba47997b0ad3048d6de0562193df392a53e6c3b2bcaccd041a00bc02327fa9f"]},"openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0x080fa336eb92fca1f96bf5c7738b6ef6e23582809d81868e9498c08e1207c125","urls":["bzzr://3bc299fd722679f1313dc1387e2efc0591dcddc3727b6a7ccc98132c6e02f323"]}},"version":1}',bytecode:"0x",deployedBytecode:"0x",sourceMap:"",deployedSourceMap:"",source:'/*\n    Copyright 2018 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\npragma solidity 0.5.7;\n\nimport { ReentrancyGuard } from "openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol";\n\nimport { CoreState } from "../lib/CoreState.sol";\nimport { ICoreAccounting } from "../interfaces/ICoreAccounting.sol";\nimport { ICoreIssuance } from "../interfaces/ICoreIssuance.sol";\n\n\n/**\n * @title CoreModularInteraction\n * @author Set Protocol\n *\n * Extension used to expose internal accounting and issuance functions, vault, and proxy functions\n * to modules.\n */\ncontract CoreModuleInteraction is\n    ICoreAccounting,\n    ICoreIssuance,\n    CoreState,\n    ReentrancyGuard\n{\n    modifier onlyModule() {\n        onlyModuleCallable();\n        _;\n    }\n\n    function onlyModuleCallable() internal view {\n        require(\n            state.validModules[msg.sender],\n            "OnlyModule"\n        );\n    }\n\n    /**\n     * Exposes internal function that deposits tokens to the vault, exposed to system\n     * modules. Quantities should be in the order of the addresses of the tokens being\n     * deposited.\n     *\n     * @param  _from              Address to transfer tokens from\n     * @param  _to                Address to credit for deposits\n     * @param  _token             Address of the token being deposited\n     * @param  _quantity          Amount of tokens to deposit\n     */\n    function depositModule(\n        address _from,\n        address _to,\n        address _token,\n        uint256 _quantity\n    )\n        external\n        onlyModule\n    {\n        address[] memory tokenArray = new address[](1);\n        tokenArray[0] = _token;\n\n        uint256[] memory quantityArray = new uint256[](1);\n        quantityArray[0] = _quantity;\n\n        batchDepositInternal(\n            _from,\n            _to,\n            tokenArray,\n            quantityArray\n        );\n    }\n\n    /**\n     * Exposes internal function that deposits multiple tokens to the vault, exposed to system\n     * modules. Quantities should be in the order of the addresses of the tokens being\n     * deposited.\n     *\n     * @param  _from              Address to transfer tokens from\n     * @param  _to                Address to credit for deposits\n     * @param  _tokens            Array of the addresses of the tokens being deposited\n     * @param  _quantities        Array of the amounts of tokens to deposit\n     */\n    function batchDepositModule(\n        address _from,\n        address _to,\n        address[] calldata _tokens,\n        uint256[] calldata _quantities\n    )\n        external\n        onlyModule\n    {\n        batchDepositInternal(\n            _from,\n            _to,\n            _tokens,\n            _quantities\n        );\n    }\n\n    /**\n     * Exposes internal function that withdraws multiple tokens to the vault, exposed to system\n     * modules. Quantities should be in the order of the addresses of the tokens being\n     * withdrawn.\n     *\n     * @param  _from              Address to decredit for withdrawals\n     * @param  _to                Address to transfer tokens to\n     * @param  _token             Address of the token being withdrawn\n     * @param  _quantity          Amount of tokens to withdraw\n     */\n    function withdrawModule(\n        address _from,\n        address _to,\n        address _token,\n        uint256 _quantity\n    )\n        external\n        onlyModule\n    {        \n        address[] memory tokenArray = new address[](1);\n        tokenArray[0] = _token;\n\n        uint256[] memory quantityArray = new uint256[](1);\n        quantityArray[0] = _quantity;        \n\n        batchWithdrawInternal(\n            _from,\n            _to,\n            tokenArray,\n            quantityArray\n        );\n    }\n\n    /**\n     * Exposes internal function that withdraws multiple tokens from the vault, to system\n     * modules. Quantities should be in the order of the addresses of the tokens being withdrawn.\n     *\n     * @param  _from              Address to decredit for withdrawals\n     * @param  _to                Address to transfer tokens to\n     * @param  _tokens            Array of the addresses of the tokens being withdrawn\n     * @param  _quantities        Array of the amounts of tokens to withdraw\n     */\n    function batchWithdrawModule(\n        address _from,\n        address _to,\n        address[] calldata _tokens,\n        uint256[] calldata _quantities\n    )\n        external\n        onlyModule\n    {\n        batchWithdrawInternal(\n            _from,\n            _to,\n            _tokens,\n            _quantities\n        );\n    }\n\n    /**\n     * Expose internal function that exchanges components for Set tokens,\n     * accepting any owner, to system modules\n     *\n     * @param  _componentOwner  Address to use tokens from\n     * @param  _setRecipient    Address to issue Set to\n     * @param  _set          Address of the Set to issue\n     * @param  _quantity     Number of tokens to issue\n     */\n    function issueModule(\n        address _componentOwner,\n        address _setRecipient,\n        address _set,\n        uint256 _quantity\n    )\n        external\n        onlyModule\n    {\n        issueInternal(\n            _componentOwner,\n            _setRecipient,\n            _set,\n            _quantity\n        );\n    }\n\n    /**\n     * Converts recipient\'s components into Set Token\'s held directly in Vault\n     *\n     * @param _recipient    Address to issue to\n     * @param _set          Address of the Set\n     * @param _quantity     Number of tokens to redeem\n     */\n    function issueInVaultModule(\n        address _recipient,\n        address _set,\n        uint256 _quantity\n    )\n        external\n        onlyModule\n    {\n        issueInVaultInternal(\n            _recipient,\n            _set,\n            _quantity\n        );\n    }\n\n    /**\n     * Expose internal function that exchanges Set tokens for components,\n     * accepting any owner, to system modules\n     *\n     * @param  _burnAddress         Address to burn token from\n     * @param  _incrementAddress    Address to increment component tokens to\n     * @param  _set                 Address of the Set to redeem\n     * @param  _quantity            Number of tokens to redeem\n     */\n    function redeemModule(\n        address _burnAddress,\n        address _incrementAddress,\n        address _set,\n        uint256 _quantity\n    )\n        external\n        onlyModule\n    {\n        redeemInternal(\n            _burnAddress,\n            _incrementAddress,\n            _set,\n            _quantity\n        );\n    }\n\n    /**\n     * Expose vault function that increments user\'s balance in the vault.\n     * Available to system modules\n     *\n     * @param  _tokens          The addresses of the ERC20 tokens\n     * @param  _owner           The address of the token owner\n     * @param  _quantities      The numbers of tokens to attribute to owner\n     */\n    function batchIncrementTokenOwnerModule(\n        address[] calldata _tokens,\n        address _owner,\n        uint256[] calldata _quantities\n    )\n        external\n        onlyModule\n    {\n        state.vaultInstance.batchIncrementTokenOwner(\n            _tokens,\n            _owner,\n            _quantities\n        );\n    }\n\n    /**\n     * Expose vault function that decrement user\'s balance in the vault\n     * Only available to system modules.\n     *\n     * @param  _tokens          The addresses of the ERC20 tokens\n     * @param  _owner           The address of the token owner\n     * @param  _quantities      The numbers of tokens to attribute to owner\n     */\n    function batchDecrementTokenOwnerModule(\n        address[] calldata _tokens,\n        address _owner,\n        uint256[] calldata _quantities\n    )\n        external\n        onlyModule\n    {\n        state.vaultInstance.batchDecrementTokenOwner(\n            _tokens,\n            _owner,\n            _quantities\n        );\n    }\n\n    /**\n     * Expose vault function that transfer vault balances between users\n     * Only available to system modules.\n     *\n     * @param  _tokens           Addresses of tokens being transferred\n     * @param  _from             Address tokens being transferred from\n     * @param  _to               Address tokens being transferred to\n     * @param  _quantities       Amounts of tokens being transferred\n     */\n    function batchTransferBalanceModule(\n        address[] calldata _tokens,\n        address _from,\n        address _to,\n        uint256[] calldata _quantities\n    )\n        external\n        onlyModule\n    {\n        state.vaultInstance.batchTransferBalance(\n            _tokens,\n            _from,\n            _to,\n            _quantities\n        );\n    }\n\n    /**\n     * Transfers token from one address to another using the transfer proxy.\n     * Only available to system modules.\n     *\n     * @param  _token          The address of the ERC20 token\n     * @param  _quantity       The number of tokens to transfer\n     * @param  _from           The address to transfer from\n     * @param  _to             The address to transfer to\n     */\n    function transferModule(\n        address _token,\n        uint256 _quantity,\n        address _from,\n        address _to\n    )\n        external\n        onlyModule\n    {\n        state.transferProxyInstance.transfer(\n            _token,\n            _quantity,\n            _from,\n            _to\n        );\n    }\n\n    /**\n     * Expose transfer proxy function to transfer tokens from one address to another\n     * Only available to system modules.\n     *\n     * @param  _tokens         The addresses of the ERC20 token\n     * @param  _quantities     The numbers of tokens to transfer\n     * @param  _from           The address to transfer from\n     * @param  _to             The address to transfer to\n     */\n    function batchTransferModule(\n        address[] calldata _tokens,\n        uint256[] calldata _quantities,\n        address _from,\n        address _to\n    )\n        external\n        onlyModule\n    {\n        state.transferProxyInstance.batchTransfer(\n            _tokens,\n            _quantities,\n            _from,\n            _to\n        );\n    }\n}\n',
sourcePath:"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/extensions/CoreModuleInteraction.sol",compiler:{name:"solc",version:"0.5.7+commit.6da8b019.Linux.g++"},networks:{},schemaVersion:"3.0.23",updatedAt:"2020-05-05T17:13:36.295Z",devdoc:{author:"Set Protocol * Extension used to expose internal accounting and issuance functions, vault, and proxy functions to modules.",methods:{"batchDecrementTokenOwnerModule(address[],address,uint256[])":{params:{_owner:"The address of the token owner",_quantities:"The numbers of tokens to attribute to owner",_tokens:"The addresses of the ERC20 tokens"}},"batchDepositModule(address,address,address[],uint256[])":{params:{_from:"Address to transfer tokens from",_quantities:"Array of the amounts of tokens to deposit",_to:"Address to credit for deposits",_tokens:"Array of the addresses of the tokens being deposited"}},"batchIncrementTokenOwnerModule(address[],address,uint256[])":{params:{_owner:"The address of the token owner",_quantities:"The numbers of tokens to attribute to owner",_tokens:"The addresses of the ERC20 tokens"}},"batchTransferBalanceModule(address[],address,address,uint256[])":{params:{_from:"Address tokens being transferred from",_quantities:"Amounts of tokens being transferred",_to:"Address tokens being transferred to",_tokens:"Addresses of tokens being transferred"}},"batchTransferModule(address[],uint256[],address,address)":{params:{_from:"The address to transfer from",_quantities:"The numbers of tokens to transfer",_to:"The address to transfer to",_tokens:"The addresses of the ERC20 token"}},"batchWithdrawModule(address,address,address[],uint256[])":{params:{_from:"Address to decredit for withdrawals",_quantities:"Array of the amounts of tokens to withdraw",_to:"Address to transfer tokens to",_tokens:"Array of the addresses of the tokens being withdrawn"}},"depositModule(address,address,address,uint256)":{params:{_from:"Address to transfer tokens from",_quantity:"Amount of tokens to deposit",_to:"Address to credit for deposits",_token:"Address of the token being deposited"}},"disabledSets(address)":{params:{_set:"Set address"},"return":"bool           Boolean indicating if is a disabled Set"},"exchangeIds(uint8)":{params:{_exchangeId:"ExchangeId number"},"return":"address           Address belonging to given exchangeId"},"exchanges()":{"return":"address[]      Array of valid exchange wrappers"},"factories()":{"return":"address[]      Array of valid factories"},"issueInVaultModule(address,address,uint256)":{params:{_quantity:"Number of tokens to redeem",_recipient:"Address to issue to",_set:"Address of the Set"}},"issueModule(address,address,address,uint256)":{params:{_componentOwner:"Address to use tokens from",_quantity:"Number of tokens to issue",_set:"Address of the Set to issue",_setRecipient:"Address to issue Set to"}},"modules()":{"return":"address[]      Array of valid modules"},"operationState()":{"return":"uint8           Uint8 representing the operational state of the protocol"},"priceLibraries()":{"return":"address[]      Array of valid price libraries"},"redeemModule(address,address,address,uint256)":{params:{_burnAddress:"Address to burn token from",_incrementAddress:"Address to increment component tokens to",_quantity:"Number of tokens to redeem",_set:"Address of the Set to redeem"}},"setTokens()":{"return":"address[]      Array of valid Set Tokens"},"transferModule(address,uint256,address,address)":{params:{_from:"The address to transfer from",_quantity:"The number of tokens to transfer",_to:"The address to transfer to",_token:"The address of the ERC20 token"}},"transferProxy()":{"return":"address       transferProxy address"},"validFactories(address)":{params:{_factory:"Factory address"},"return":"bool           Boolean indicating if enabled factory"},"validModules(address)":{params:{_module:"Factory address"},"return":"bool           Boolean indicating if enabled factory"},"validPriceLibraries(address)":{params:{_priceLibrary:"Price library address"},"return":"bool             Boolean indicating if valid Price Library"},"validSets(address)":{params:{_set:"Set address"},"return":"bool           Boolean indicating if valid Set"},"vault()":{"return":"address        vault address"},"withdrawModule(address,address,address,uint256)":{params:{_from:"Address to decredit for withdrawals",_quantity:"Amount of tokens to withdraw",_to:"Address to transfer tokens to",_token:"Address of the token being withdrawn"}}},title:"CoreModularInteraction"},userdoc:{methods:{"batchDecrementTokenOwnerModule(address[],address,uint256[])":{notice:"Expose vault function that decrement user's balance in the vault Only available to system modules."},"batchDepositModule(address,address,address[],uint256[])":{notice:"Exposes internal function that deposits multiple tokens to the vault, exposed to system modules. Quantities should be in the order of the addresses of the tokens being deposited."},"batchIncrementTokenOwnerModule(address[],address,uint256[])":{notice:"Expose vault function that increments user's balance in the vault. Available to system modules"},"batchTransferBalanceModule(address[],address,address,uint256[])":{notice:"Expose vault function that transfer vault balances between users Only available to system modules."},"batchTransferModule(address[],uint256[],address,address)":{notice:"Expose transfer proxy function to transfer tokens from one address to another Only available to system modules."},"batchWithdrawModule(address,address,address[],uint256[])":{notice:"Exposes internal function that withdraws multiple tokens from the vault, to system modules. Quantities should be in the order of the addresses of the tokens being withdrawn."},"depositModule(address,address,address,uint256)":{notice:"Exposes internal function that deposits tokens to the vault, exposed to system modules. Quantities should be in the order of the addresses of the tokens being deposited."},"disabledSets(address)":{notice:"Return boolean indicating if address is a disabled Set."},"exchangeIds(uint8)":{notice:"Return address belonging to given exchangeId."},"exchanges()":{notice:"Return array of all valid exchange wrappers."},"factories()":{notice:"Return array of all valid factories."},"issueInVaultModule(address,address,uint256)":{notice:"Converts recipient's components into Set Token's held directly in Vault"},"issueModule(address,address,address,uint256)":{notice:"Expose internal function that exchanges components for Set tokens, accepting any owner, to system modules"},"modules()":{notice:"Return array of all valid Modules."},"operationState()":{notice:"Return uint8 representing the operational state of the protocol"},"priceLibraries()":{notice:"Return array of all valid price libraries."},"redeemModule(address,address,address,uint256)":{notice:"Expose internal function that exchanges Set tokens for components, accepting any owner, to system modules"},"setTokens()":{notice:"Return array of all valid Set Tokens."},"transferModule(address,uint256,address,address)":{notice:"Transfers token from one address to another using the transfer proxy. Only available to system modules."},"transferProxy()":{notice:"Return transferProxy address."},"validFactories(address)":{notice:"Return boolean indicating if address is valid factory."},"validModules(address)":{notice:"Return boolean indicating if address is valid module."},"validPriceLibraries(address)":{notice:"Return boolean indicating if address is a valid Rebalancing Price Library."},"validSets(address)":{notice:"Return boolean indicating if address is valid Set."},"vault()":{notice:"Return vault address"},"withdrawModule(address,address,address,uint256)":{notice:"Exposes internal function that withdraws multiple tokens to the vault, exposed to system modules. Quantities should be in the order of the addresses of the tokens being withdrawn."}}}};