"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.CommonMath={contractName:"CommonMath",abi:[{constant:true,inputs:[],name:"MAX_UINT_256",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"SCALE_FACTOR",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"}],metadata:'{"compiler":{"version":"0.5.7+commit.6da8b019"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"MAX_UINT_256","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"SCALE_FACTOR","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}],"devdoc":{"methods":{}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"set-protocol-contract-utils/contracts/lib/CommonMath.sol":"CommonMath"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"openzeppelin-solidity/contracts/math/SafeMath.sol":{"keccak256":"0xc2a200a877c4a9b2475c246c54ffecc69ffde3e11af83319c63c2dc5458bac80","urls":["bzzr://c8876e2c39b60f155d748d71d715c8f3903fae5a405ac599adcb6ad2f9a583f9"]},"set-protocol-contract-utils/contracts/lib/CommonMath.sol":{"keccak256":"0x3d1d08c6efc2a973fe2c02ddcb02fd99a8c8eb75f74dcbd93e8e15864eee2b6b","urls":["bzzr://580815dd1cf648a4521d923e59087de21143d9c48115ab71579a1f5a8f3d36af"]}},"version":1}',bytecode:"0x60ba610025600b82828239805160001a60731461001857fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106059577c010000000000000000000000000000000000000000000000000000000060003504633d41a26b8114605e578063ce4b5bbe146076575b600080fd5b6064607c565b60408051918252519081900360200190f35b60646082565b60001981565b670de0b6b3a76400008156fea165627a7a72305820f6814f9407907a87909b95d099685fff234f9a53ed94cc68fe7d96f1f442d7f00029",deployedBytecode:"0x73000000000000000000000000000000000000000030146080604052600436106059577c010000000000000000000000000000000000000000000000000000000060003504633d41a26b8114605e578063ce4b5bbe146076575b600080fd5b6064607c565b60408051918252519081900360200190f35b60646082565b60001981565b670de0b6b3a76400008156fea165627a7a72305820f6814f9407907a87909b95d099685fff234f9a53ed94cc68fe7d96f1f442d7f00029",sourceMap:"701:4529:176:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24",deployedSourceMap:"701:4529:176:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;812:51;;;:::i;:::-;;;;;;;;;;;;;;;;759:47;;;:::i;812:51::-;-1:-1:-1;;812:51:176;:::o;759:47::-;798:8;759:47;:::o",source:'/*\n    Copyright 2018 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\npragma solidity 0.5.7;\n\nimport { SafeMath } from "openzeppelin-solidity/contracts/math/SafeMath.sol";\n\n\nlibrary CommonMath {\n    using SafeMath for uint256;\n\n    uint256 public constant SCALE_FACTOR = 10 ** 18;\n    uint256 public constant MAX_UINT_256 = 2 ** 256 - 1;\n\n    /**\n     * Returns scale factor equal to 10 ** 18\n     *\n     * @return  10 ** 18\n     */\n    function scaleFactor()\n        internal\n        pure\n        returns (uint256)\n    {\n        return SCALE_FACTOR;\n    }\n\n    /**\n     * Calculates and returns the maximum value for a uint256\n     *\n     * @return  The maximum value for uint256\n     */\n    function maxUInt256()\n        internal\n        pure\n        returns (uint256)\n    {\n        return MAX_UINT_256;\n    }\n\n    /**\n     * Increases a value by the scale factor to allow for additional precision\n     * during mathematical operations\n     */\n    function scale(\n        uint256 a\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        return a.mul(SCALE_FACTOR);\n    }\n\n    /**\n     * Divides a value by the scale factor to allow for additional precision\n     * during mathematical operations\n    */\n    function deScale(\n        uint256 a\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        return a.div(SCALE_FACTOR);\n    }\n\n    /**\n    * @dev Performs the power on a specified value, reverts on overflow.\n    */\n    function safePower(\n        uint256 a,\n        uint256 pow\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        require(a > 0);\n\n        uint256 result = 1;\n        for (uint256 i = 0; i < pow; i++){\n            uint256 previousResult = result;\n\n            // Using safemath multiplication prevents overflows\n            result = previousResult.mul(a);\n        }\n\n        return result;\n    }\n\n    /**\n    * @dev Performs division where if there is a modulo, the value is rounded up\n    */\n    function divCeil(uint256 a, uint256 b)\n        internal\n        pure\n        returns(uint256)\n    {\n        return a.mod(b) > 0 ? a.div(b).add(1) : a.div(b);\n    }\n\n    /**\n     * Checks for rounding errors and returns value of potential partial amounts of a principal\n     *\n     * @param  _principal       Number fractional amount is derived from\n     * @param  _numerator       Numerator of fraction\n     * @param  _denominator     Denominator of fraction\n     * @return uint256          Fractional amount of principal calculated\n     */\n    function getPartialAmount(\n        uint256 _principal,\n        uint256 _numerator,\n        uint256 _denominator\n    )\n        internal\n        pure\n        returns (uint256)\n    {\n        // Get remainder of partial amount (if 0 not a partial amount)\n        uint256 remainder = mulmod(_principal, _numerator, _denominator);\n\n        // Return if not a partial amount\n        if (remainder == 0) {\n            return _principal.mul(_numerator).div(_denominator);\n        }\n\n        // Calculate error percentage\n        uint256 errPercentageTimes1000000 = remainder.mul(1000000).div(_numerator.mul(_principal));\n\n        // Require error percentage is less than 0.1%.\n        require(\n            errPercentageTimes1000000 < 1000,\n            "CommonMath.getPartialAmount: Rounding error exceeds bounds"\n        );\n\n        return _principal.mul(_numerator).div(_denominator);\n    }\n    \n    /*\n     * Gets the rounded up log10 of passed value\n     *\n     * @param  _value         Value to calculate ceil(log()) on\n     * @return uint256        Output value\n     */\n    function ceilLog10(\n        uint256 _value\n    )\n        internal\n        pure \n        returns (uint256)\n    {\n        // Make sure passed value is greater than 0\n        require (\n            _value > 0,\n            "CommonMath.ceilLog10: Value must be greater than zero."\n        );\n\n        // Since log10(1) = 0, if _value = 1 return 0\n        if (_value == 1) return 0;\n\n        // Calcualte ceil(log10())\n        uint256 x = _value - 1;\n\n        uint256 result = 0;\n\n        if (x >= 10 ** 64) {\n            x /= 10 ** 64;\n            result += 64;\n        }\n        if (x >= 10 ** 32) {\n            x /= 10 ** 32;\n            result += 32;\n        }\n        if (x >= 10 ** 16) {\n            x /= 10 ** 16;\n            result += 16;\n        }\n        if (x >= 10 ** 8) {\n            x /= 10 ** 8;\n            result += 8;\n        }\n        if (x >= 10 ** 4) {\n            x /= 10 ** 4;\n            result += 4;\n        }\n        if (x >= 100) {\n            x /= 100;\n            result += 2;\n        }\n        if (x >= 10) {\n            result += 1;\n        }\n\n        return result + 1;\n    }\n}\n\n',sourcePath:"set-protocol-contract-utils/contracts/lib/CommonMath.sol",compiler:{name:"solc",version:"0.5.7+commit.6da8b019.Linux.g++"},networks:{},schemaVersion:"3.0.23",updatedAt:"2020-05-05T17:13:37.175Z",devdoc:{methods:{}},userdoc:{methods:{}}};