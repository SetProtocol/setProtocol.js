"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.AddressToAddressWhiteList={contractName:"AddressToAddressWhiteList",abi:[{constant:true,inputs:[{name:"",type:"uint256"}],name:"keys",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"",type:"bytes32"}],name:"timeLockedUpgrades",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[],name:"renounceOwnership",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"timeLockPeriod",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"owner",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"isOwner",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{name:"_timeLockPeriod",type:"uint256"}],name:"setTimeLockPeriod",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"",type:"address"}],name:"whitelist",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{name:"_upgradeHash",type:"bytes32"}],name:"removeRegisteredUpgrade",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{inputs:[{name:"_initialKeys",type:"address[]"},{name:"_initialValues",type:"address[]"}],payable:false,stateMutability:"nonpayable",type:"constructor"},{anonymous:false,inputs:[{indexed:true,name:"key",type:"address"},{indexed:false,name:"value",type:"address"}],name:"PairAdded",type:"event"},{anonymous:false,inputs:[{indexed:true,name:"key",type:"address"},{indexed:false,name:"value",type:"address"}],name:"PairRemoved",type:"event"},{anonymous:false,inputs:[{indexed:true,name:"_upgradeHash",type:"bytes32"},{indexed:false,name:"_timestamp",type:"uint256"},{indexed:false,name:"_upgradeData",type:"bytes"}],name:"UpgradeRegistered",type:"event"},{anonymous:false,inputs:[{indexed:true,name:"_upgradeHash",type:"bytes32"}],name:"RemoveRegisteredUpgrade",type:"event"},{anonymous:false,inputs:[{indexed:true,name:"previousOwner",type:"address"},{indexed:true,name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{constant:false,inputs:[{name:"_key",type:"address"},{name:"_value",type:"address"}],name:"addPair",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_key",type:"address"}],name:"removePair",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_key",type:"address"},{name:"_value",type:"address"}],name:"editPair",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"validAddresses",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_key",type:"address[]"}],name:"getValues",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_key",type:"address"}],name:"getValue",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_keys",type:"address[]"}],name:"areValidAddresses",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"view",type:"function"}],metadata:'{"compiler":{"version":"0.5.7+commit.6da8b019"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"name":"_key","type":"address[]"}],"name":"getValues","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"keys","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"timeLockedUpgrades","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_keys","type":"address[]"}],"name":"areValidAddresses","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_key","type":"address"}],"name":"getValue","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_key","type":"address"},{"name":"_value","type":"address"}],"name":"editPair","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"renounceOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"timeLockPeriod","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"isOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_timeLockPeriod","type":"uint256"}],"name":"setTimeLockPeriod","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"whitelist","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_key","type":"address"}],"name":"removePair","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_key","type":"address"},{"name":"_value","type":"address"}],"name":"addPair","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_upgradeHash","type":"bytes32"}],"name":"removeRegisteredUpgrade","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"validAddresses","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"inputs":[{"name":"_initialKeys","type":"address[]"},{"name":"_initialValues","type":"address[]"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"key","type":"address"},{"indexed":false,"name":"value","type":"address"}],"name":"PairAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"key","type":"address"},{"indexed":false,"name":"value","type":"address"}],"name":"PairRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_upgradeHash","type":"bytes32"},{"indexed":false,"name":"_timestamp","type":"uint256"},{"indexed":false,"name":"_upgradeData","type":"bytes"}],"name":"UpgradeRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_upgradeHash","type":"bytes32"}],"name":"RemoveRegisteredUpgrade","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"previousOwner","type":"address"},{"indexed":true,"name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"devdoc":{"author":"Set Protocol * WhiteList that matches addresses to other addresses","methods":{"addPair(address,address)":{"params":{"_key":"Key type address to add to the whitelist","_value":"Value type address to add to the whitelist under _key"}},"areValidAddresses(address[])":{"params":{"_keys":"Array of key type addresses to check if value exists"},"return":"bool                 Whether all addresses in the list are whitelisted"},"constructor":{"params":{"_initialKeys":"Starting set of key type addresses to whitelist","_initialValues":"Starting set of value type addresses to whitelist"}},"editPair(address,address)":{"params":{"_key":"Key type address to add to the whitelist","_value":"Value type address to add to the whitelist under _key"}},"getValue(address)":{"params":{"_key":"Address of key type"},"return":"address            Address associated with _key "},"getValues(address[])":{"params":{"_key":"Array of key type addresses to get value type addresses for"},"return":"address[]           Array of value type addresses"},"isOwner()":{"return":"true if `msg.sender` is the owner of the contract."},"owner()":{"return":"the address of the owner."},"removePair(address)":{"params":{"_key":"Key type address to remove to the whitelist"}},"removeRegisteredUpgrade(bytes32)":{"params":{"_upgradeHash":"Keccack256 hash that uniquely identifies function called and arguments "}},"renounceOwnership()":{"details":"Allows the current owner to relinquish control of the contract. It will not be possible to call the functions with the `onlyOwner` modifier anymore."},"setTimeLockPeriod(uint256)":{"params":{"_timeLockPeriod":"Time in seconds that upgrades need to be evaluated before execution"}},"transferOwnership(address)":{"details":"Allows the current owner to transfer control of the contract to a newOwner.","params":{"newOwner":"The address to transfer ownership to."}},"validAddresses()":{"return":"address[]      Array of key type addresses"}},"title":"AddressToAddressWhiteList"},"userdoc":{"methods":{"addPair(address,address)":{"notice":"Add an address to the whitelist"},"areValidAddresses(address[])":{"notice":"Verifies an array of addresses against the whitelist"},"constructor":"Constructor function for AddressToAddressWhiteList     * Allow initial addresses to be passed in so a separate transaction is not required for each. Each key type address passed is matched with a corresponding value type token address at the same index. The _initialKeys and _initialValues arrays must be equal length.","editPair(address,address)":{"notice":"Edit value type address associated with a key"},"getValue(address)":{"notice":"Return value type address associated with a passed key type address "},"getValues(address[])":{"notice":"Return array of value type addresses based on passed in key type addresses "},"removePair(address)":{"notice":"Remove a address to address pair from the whitelist"},"removeRegisteredUpgrade(bytes32)":{"notice":"Removes an existing upgrade."},"renounceOwnership()":{"notice":"Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setTimeLockPeriod(uint256)":{"notice":"Change timeLockPeriod period. Generally called after initially settings have been set up."},"validAddresses()":{"notice":"Return array of all whitelisted addresses"}}}},"settings":{"compilationTarget":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/lib/AddressToAddressWhiteList.sol":"AddressToAddressWhiteList"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/lib/AddressToAddressWhiteList.sol":{"keccak256":"0x26ea121d1effa4d44633a78fcc79ae1f699faf300bcf17172301b91bcd4a08b6","urls":["bzzr://9f9ed509547e59c4643c256340726a897298a160b0cb8aa9c9dfacc1930cdac8"]},"openzeppelin-solidity/contracts/math/SafeMath.sol":{"keccak256":"0xc2a200a877c4a9b2475c246c54ffecc69ffde3e11af83319c63c2dc5458bac80","urls":["bzzr://c8876e2c39b60f155d748d71d715c8f3903fae5a405ac599adcb6ad2f9a583f9"]},"openzeppelin-solidity/contracts/ownership/Ownable.sol":{"keccak256":"0xcb16adc00dcf0d75e0bdf94379f4d5a6d74dca7c74e4183b94e15721159f8a30","urls":["bzzr://b81e03f7203cd628cfed19255911a04a05e8670d248afb48a7b067dd03b4ff55"]},"set-protocol-contract-utils/contracts/lib/AddressArrayUtils.sol":{"keccak256":"0xb716eab4e8c5a336a2f19078928530829af097912bd1b925644f914b63601f08","urls":["bzzr://d8a21d39779beb316adb5180d08dcba1941eeccd9412ff08feb21a631c18c269"]},"set-protocol-contract-utils/contracts/lib/TimeLockUpgradeV2.sol":{"keccak256":"0x7c8188e262d4db7d352130c56c0eab85a6f9f89afb5fe08efe49084557e3e600","urls":["bzzr://5b0a3762af16f66a60bdb9cc1bcb14a7066bd3c54dd80c6333a9f07118800340"]}},"version":1}',bytecode:"0x60806040523480156200001157600080fd5b50604051620019b9380380620019b9833981018060405260408110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81518560208202830111640100000000821117156200008257600080fd5b505092919060200180516401000000008111156200009f57600080fd5b82016020810184811115620000b357600080fd5b8151856020820283011164010000000082111715620000d157600080fd5b505060008054600160a060020a0319163317808255604051929550600160a060020a0316935091507f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a380518251146200017a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526048815260200180620018f96048913960600191505060405180910390fd5b60005b82518110156200033a5760008382815181106200019657fe5b602090810291909101810151600160a060020a0380821660009081526004909352604090922054909250161562000219576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a8152602001806200197f603a913960400191505060405180910390fd5b6000600160a060020a03168383815181106200023157fe5b6020026020010151600160a060020a031614156200029b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e81526020018062001941603e913960400191505060405180910390fd5b600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018054600160a060020a031916600160a060020a0383161790558251839083908110620002f557fe5b602090810291909101810151600160a060020a039283166000908152600490925260409091208054600160a060020a031916929091169190911790556001016200017d565b5050506115ac806200034d6000396000f3fe608060405234801561001057600080fd5b5060043610610128576000357c0100000000000000000000000000000000000000000000000000000000900480638da5cb5b116100bf578063af6c9c1d1161008e578063af6c9c1d14610392578063b6f3e087146103b8578063cc75c9b0146103e6578063e7d22fdb14610403578063f2fde38b1461040b57610128565b80638da5cb5b1461033f5780638f32d59b146103475780639303b16f1461034f5780639b19251a1461036c57610128565b80633ccc0522116100fb5780633ccc0522146102d95780636090777b146102ff578063715018a61461032f57806378446bc11461033757610128565b8063031979141461012d5780630cb6aaf1146101ed5780631766486d1461022657806332ed010e14610255575b600080fd5b61019d6004803603602081101561014357600080fd5b81019060208101813564010000000081111561015e57600080fd5b82018360208201111561017057600080fd5b8035906020019184602083028401116401000000008311171561019257600080fd5b509092509050610431565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101d95781810151838201526020016101c1565b505050509050019250505060405180910390f35b61020a6004803603602081101561020357600080fd5b50356104ca565b60408051600160a060020a039092168252519081900360200190f35b6102436004803603602081101561023c57600080fd5b50356104f1565b60408051918252519081900360200190f35b6102c56004803603602081101561026b57600080fd5b81019060208101813564010000000081111561028657600080fd5b82018360208201111561029857600080fd5b803590602001918460208302840111640100000000831117156102ba57600080fd5b509092509050610503565b604080519115158252519081900360200190f35b61020a600480360360208110156102ef57600080fd5b5035600160a060020a0316610570565b61032d6004803603604081101561031557600080fd5b50600160a060020a03813581169160200135166105ea565b005b61032d6108d0565b61024361092b565b61020a610931565b6102c5610941565b61032d6004803603602081101561036557600080fd5b5035610952565b61020a6004803603602081101561038257600080fd5b5035600160a060020a03166109ab565b61032d600480360360208110156103a857600080fd5b5035600160a060020a03166109c6565b61032d600480360360408110156103ce57600080fd5b50600160a060020a0381358116916020013516610c90565b61032d600480360360208110156103fc57600080fd5b5035610f5a565b61019d610ff3565b61032d6004803603602081101561042157600080fd5b5035600160a060020a0316611055565b60408051828152602080840282010190915260609082908290828015610461578160200160208202803883390190505b50905060005b828110156104bf5761049386868381811061047e57fe5b90506020020135600160a060020a0316610570565b82828151811061049f57fe5b600160a060020a0390921660209283029190910190910152600101610467565b509150505b92915050565b600381815481106104d757fe5b600091825260209091200154600160a060020a0316905081565b60026020526000908152604090205481565b600081815b8181101561056557600060048187878581811061052157fe5b600160a060020a036020918202939093013583168452830193909352604090910160002054169190911415905061055d576000925050506104c4565b600101610508565b506001949350505050565b600160a060020a038181166000908152600460205260408120549091166105cb5760405160e560020a62461bcd02815260040180806020018281038252603e815260200180611398603e913960400191505060405180910390fd5b50600160a060020a039081166000908152600460205260409020541690565b6105f2610941565b6106305760405160e560020a62461bcd02815260040180806020018281038252602f815260200180611485602f913960400191505060405180910390fd5b600154156107725760008036604051602001808383808284376040805191909301818103601f190182528352805160209182012060008181526002909252929020549195509093505050811515905061070c57426002600084815260200190815260200160002081905550817fe44f46be6285c6d0bb89d91e4b554c2fd26cf7c68fc1379279b8e97a2d712b6a4260003660405180848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a250506108cc565b60015461072090829063ffffffff61106f16565b4210156107615760405160e560020a62461bcd0281526004018080602001828103825260368152602001806114156036913960400191505060405180910390fd5b506000908152600260205260408120555b600160a060020a03828116600090815260046020526040902054166107cb5760405160e560020a62461bcd02815260040180806020018281038252603c8152602001806114b4603c913960400191505060405180910390fd5b600160a060020a0381166108135760405160e560020a62461bcd02815260040180806020018281038252603f8152602001806114f0603f913960400191505060405180910390fd5b600160a060020a0380831660008181526004602090815260409182902054825194168452905191927fcfacf9d602eaae62e56c577b2340ef89b971ff33287fa964a1d17027e8ea2d42929081900390910190a2600160a060020a038281166000818152600460209081526040918290208054600160a060020a03191694861694851790558151938452905191927fc26cc79589f7c5b1fb18650002371abf239e6083ab356e4179c11da5185611ec929081900390910190a25b5050565b6108d8610941565b6108e157600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360008054600160a060020a0319169055565b60015481565b600054600160a060020a03165b90565b600054600160a060020a0316331490565b61095a610941565b61096357600080fd5b60015481116109a65760405160e560020a62461bcd02815260040180806020018281038252603b815260200180611313603b913960400191505060405180910390fd5b600155565b600460205260009081526040902054600160a060020a031681565b6109ce610941565b610a0c5760405160e560020a62461bcd02815260040180806020018281038252602f815260200180611485602f913960400191505060405180910390fd5b60015415610b4e5760008036604051602001808383808284376040805191909301818103601f1901825283528051602091820120600081815260029092529290205491955090935050508115159050610ae857426002600084815260200190815260200160002081905550817fe44f46be6285c6d0bb89d91e4b554c2fd26cf7c68fc1379279b8e97a2d712b6a4260003660405180848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a25050610c8d565b600154610afc90829063ffffffff61106f16565b421015610b3d5760405160e560020a62461bcd0281526004018080602001828103825260368152602001806114156036913960400191505060405180910390fd5b506000908152600260205260408120555b600160a060020a038082166000908152600460205260409020541680610ba85760405160e560020a62461bcd02815260040180806020018281038252605281526020018061152f6052913960600191505060405180910390fd5b610c15826003805480602002602001604051908101604052809291908181526020018280548015610c0257602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610be4575b505050505061108890919063ffffffff16565b8051610c2991600391602090910190611289565b50600160a060020a038083166000818152600460209081526040918290208054600160a060020a031916905581519385168452905191927fcfacf9d602eaae62e56c577b2340ef89b971ff33287fa964a1d17027e8ea2d42929081900390910190a2505b50565b610c98610941565b610cd65760405160e560020a62461bcd02815260040180806020018281038252602f815260200180611485602f913960400191505060405180910390fd5b60015415610e185760008036604051602001808383808284376040805191909301818103601f1901825283528051602091820120600081815260029092529290205491955090935050508115159050610db257426002600084815260200190815260200160002081905550817fe44f46be6285c6d0bb89d91e4b554c2fd26cf7c68fc1379279b8e97a2d712b6a4260003660405180848152602001806020018281038252848482818152602001925080828437600083820152604051601f909101601f1916909201829003965090945050505050a250506108cc565b600154610dc690829063ffffffff61106f16565b421015610e075760405160e560020a62461bcd0281526004018080602001828103825260368152602001806114156036913960400191505060405180910390fd5b506000908152600260205260408120555b600160a060020a038281166000908152600460205260409020541615610e725760405160e560020a62461bcd02815260040180806020018281038252603f8152602001806113d6603f913960400191505060405180910390fd5b600160a060020a038116610eba5760405160e560020a62461bcd02815260040180806020018281038252603a81526020018061144b603a913960400191505060405180910390fd5b60038054600181019091557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b018054600160a060020a03808516600160a060020a0319928316811790935560008381526004602090815260409182902080549387169390941683179093558051918252517fc26cc79589f7c5b1fb18650002371abf239e6083ab356e4179c11da5185611ec929181900390910190a25050565b610f62610941565b610f6b57600080fd5b600081815260026020526040902054610fb85760405160e560020a62461bcd02815260040180806020018281038252604a81526020018061134e604a913960600191505060405180910390fd5b6000818152600260205260408082208290555182917f068cc8f97648f23db94d0e1a707a54447d07effeb11c1c297168aa67321dc4ec91a250565b6060600380548060200260200160405190810160405280929190818152602001828054801561104b57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161102d575b5050505050905090565b61105d610941565b61106657600080fd5b610c8d816110bd565b60008282018381101561108157600080fd5b9392505050565b6060600080611097858561112b565b91509150806110a557600080fd5b60606110b1868461118f565b5093506104c492505050565b600160a060020a0381166110d057600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a360008054600160a060020a031916600160a060020a0392909216919091179055565b81516000908190815b8181101561117e5784600160a060020a031686828151811061115257fe5b6020026020010151600160a060020a03161415611176579250600191506111889050565b600101611134565b5060009250829150505b9250929050565b6060600080845190506060600182036040519080825280602002602001820160405280156111c7578160200160208202803883390190505b50905060005b85811015611215578681815181106111e157fe5b60200260200101518282815181106111f557fe5b600160a060020a03909216602092830291909101909101526001016111cd565b50600185015b828110156112665786818151811061122f57fe5b602002602001015182600183038151811061124657fe5b600160a060020a039092166020928302919091019091015260010161121b565b508086868151811061127457fe5b60200260200101519350935050509250929050565b8280548282559060005260206000209081019282156112de579160200282015b828111156112de5782518254600160a060020a031916600160a060020a039091161782556020909201916001909101906112a9565b506112ea9291506112ee565b5090565b61093e91905b808211156112ea578054600160a060020a03191681556001016112f456fe54696d654c6f636b5570677261646556323a204e657720706572696f64206d7573742062652067726561746572207468616e206578697374696e6754696d654c6f636b5570677261646556322e72656d6f766552656769737465726564557067726164653a20557067726164652068617368206d757374206265207265676973746572656441646472657373546f4164647265737357686974654c6973742e67657456616c75653a204e6f2076616c756520666f72207468617420616464726573732e41646472657373546f4164647265737357686974654c6973742e616464506169723a2041646472657373207061697220616c7265616479206578697374732e54696d654c6f636b5570677261646556323a2054696d65206c6f636b20706572696f64206d757374206861766520656c61707365642e41646472657373546f4164647265737357686974654c6973742e616464506169723a2056616c7565206d757374206265206e6f6e207a65726f2e54696d654c6f636b5570677261646556323a205468652063616c6c6572206d75737420626520746865206f776e657241646472657373546f4164647265737357686974654c6973742e65646974506169723a20416464726573732070616972206d7573742065786973742e41646472657373546f4164647265737357686974654c6973742e65646974506169723a204e65772076616c7565206d757374206265206e6f6e207a65726f2e41646472657373546f4164647265737357686974654c6973742e72656d6f7665506169723a206b657920747970652061646472657373206973206e6f742063757272656e742077686974656c69737465642ea165627a7a723058201147dab8a76289f5907025fc9369e6cc0256b690ab4355f76ab51c4dd55f8519002941646472657373546f4164647265737357686974654c6973742e636f6e7374727563746f723a2041646472657373206172726179206c656e67746873206d757374206d617463682e41646472657373546f4164647265737357686974654c6973742e636f6e7374727563746f723a2056616c7565206d757374206265206e6f6e207a65726f2e41646472657373546f4164647265737357686974654c6973742e636f6e7374727563746f723a204b6579206d75737420626520756e697175652e",deployedBytecode:"",
sourceMap:"951:6784:117:-;;;1986:1021;8:9:-1;5:2;;;30:1;27;20:12;5:2;1986:1021:117;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1986:1021:117;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;1986:1021:117;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;-1:-1;;515:6:167;:19;;-1:-1:-1;;;;;;515:19:167;524:10;515:19;;;;549:40;;1986:1021:117;;-1:-1:-1;;;;;;582:6:167;;-1:-1:-1;515:6:167;-1:-1:-1;549:40:167;;515:6;;549:40;2157:14:117;:21;2134:12;:19;:44;2113:163;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2342:9;2337:664;2361:12;:19;2357:1;:23;2337:664;;;2401:27;2431:12;2444:1;2431:15;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2525:30:117;;;2567:1;2525:30;;;:9;:30;;;;;;;;2431:15;;-1:-1:-1;2525:30:117;:44;2500:161;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2783:1;-1:-1:-1;;;;;2754:31:117;:14;2769:1;2754:17;;;;;;;;;;;;;;-1:-1:-1;;;;;2754:31:117;;;2729:152;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2896:4;27:10:-1;;39:1;23:18;;45:23;;-1:-1;2896:30:117;;;;;;;;-1:-1:-1;;;;;;2896:30:117;-1:-1:-1;;;;;2896:30:117;;;;;2973:17;;;;2988:1;;2973:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2940:30:117;;;;;;;:9;:30;;;;;;;:50;;-1:-1:-1;;;;;;2940:50:117;;;;;;;;;;;-1:-1:-1;2382:3:117;2337:664;;;;1986:1021;;951:6784;;;;;;",deployedSourceMap:"951:6784:117:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;951:6784:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5793:565;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5793:565:117;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;5793:565:117;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;5793:565:117;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;-1:-1;5793:565:117;;-1:-1:-1;5793:565:117;-1:-1:-1;5793:565:117;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;5793:565:117;;;;;;;;;;;;;;;;;1114:21;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1114:21:117;;:::i;:::-;;;;-1:-1:-1;;;;;1114:21:117;;;;;;;;;;;;;;1399:53:181;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1399:53:181;;:::i;:::-;;;;;;;;;;;;;;;;7249:484:117;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7249:484:117;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;7249:484:117;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7249:484:117;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;-1:-1;7249:484:117;;-1:-1:-1;7249:484:117;-1:-1:-1;7249:484:117;:::i;:::-;;;;;;;;;;;;;;;;;;6581:404;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6581:404:117;-1:-1:-1;;;;;6581:404:117;;:::i;4595:667::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4595:667:117;;;;;;;;;;:::i;:::-;;1423:137:167;;;:::i;1284:29:181:-;;;:::i;659:77:167:-;;;:::i;979:90::-;;;:::i;4099:398:181:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4099:398:181;;:::i;1141:44:117:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1141:44:117;-1:-1:-1;;;;;1141:44:117;;:::i;3931:437::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3931:437:117;-1:-1:-1;;;;;3931:437:117;;:::i;3272:505::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3272:505:117;;;;;;;;;;:::i;3428:444:181:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3428:444:181;;:::i;5398:123:117:-;;;:::i;1731:107:167:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1731:107:167;-1:-1:-1;;;;;1731:107:167;;:::i;5793:565:117:-;6088:26;;;;;;;;;;;;;;;;5898:16;;5990:4;;5898:16;;5990:4;6088:26;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;6088:26:117;-1:-1:-1;6062:52:117;-1:-1:-1;6130:9:117;6125:196;6149:11;6145:1;:15;6125:196;;;6263:47;6289:4;;6294:1;6289:7;;;;;;;;;;;;;-1:-1:-1;;;;;6289:7:117;6263:8;:47::i;:::-;6251:6;6258:1;6251:9;;;;;;;;-1:-1:-1;;;;;6251:59:117;;;:9;;;;;;;;;;;:59;6162:3;;6125:196;;;-1:-1:-1;6338:6:117;-1:-1:-1;;5793:565:117;;;;;:::o;1114:21::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1114:21:117;;-1:-1:-1;1114:21:117;:::o;1399:53:181:-;;;;;;;;;;;;;:::o;7249:484:117:-;7363:4;7443:5;7363:4;7466:239;7490:11;7486:1;:15;7466:239;;;7646:1;7615:9;7646:1;7625:5;;7631:1;7625:8;;;;;;;-1:-1:-1;;;;;7625:8:117;;;;;;;;;;;7615:19;;;;;;;;;;;;-1:-1:-1;7615:19:117;;;:33;;;;7611:84;;-1:-1:-1;7611:84:117;;7675:5;7668:12;;;;;;7611:84;7503:3;;7466:239;;;-1:-1:-1;7722:4:117;;7249:484;-1:-1:-1;;;;7249:484:117:o;6581:404::-;-1:-1:-1;;;;;6775:15:117;;;6672:7;6775:15;;;:9;:15;;;;;;6672:7;;6775:15;6754:138;;;;-1:-1:-1;;;;;6754:138:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;6956:15:117;;;;;;;:9;:15;;;;;;;;6581:404::o;4595:667::-;1818:9:181;:7;:9::i;:::-;1797:103;;;;-1:-1:-1;;;;;1797:103:181;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2069:14;;:18;2065:1091;;2278:19;2365:8;;2327:64;;;;;;;30:3:-1;22:6;14;1:33;2327:64:181;;;45:16:-1;;;;26:21;;;-1:-1;;22:32;6:49;;2327:64:181;;2300:105;;49:4:-1;2300:105:181;;;;2420:24;2447:31;;;:18;:31;;;;;;;2300:105;;-1:-1:-1;2447:31:181;;-1:-1:-1;;;2583:21:181;;2579:293;;-1:-1:-1;2579:293:181;;2658:15;2624:18;:31;2643:11;2624:31;;;;;;;;;;;:49;;;;2736:11;2697:135;2769:15;2806:8;;2697:135;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;;74:27;2697:135:181;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;2697:135:181;;;;-1:-1:-1;2697:135:181;;-1:-1:-1;;;;;2697:135:181;2851:7;;;;2579:293;2951:14;;2930:36;;:16;;:36;:20;:36;:::i;:::-;2911:15;:55;;2886:168;;;;-1:-1:-1;;;;;2886:168:181;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3143:1:181;3109:31;;;:18;:31;;;;;:35;2065:1091;-1:-1:-1;;;;;4741:15:117;;;4768:1;4741:15;;;:9;:15;;;;;;;4720:136;;;;-1:-1:-1;;;;;4720:136:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4888:20:117;;4867:130;;;;-1:-1:-1;;;;;4867:130:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5013:68:117;;;5056:15;;;;:9;:15;;;;;;;;;;5013:68;;5056:15;;5013:68;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5158:15:117;;;;;;;:9;:15;;;;;;;;;:24;;-1:-1:-1;;;;;;5158:24:117;;;;;;;;;5198:57;;;;;;;5158:15;;5198:57;;;;;;;;;;;4595:667;;;:::o;1423:137:167:-;863:9;:7;:9::i;:::-;855:18;;;;;;1521:1;1505:6;;1484:40;;-1:-1:-1;;;;;1505:6:167;;;;1484:40;;1521:1;;1484:40;1551:1;1534:19;;-1:-1:-1;;;;;;1534:19:167;;;1423:137::o;1284:29:181:-;;;;:::o;659:77:167:-;697:7;723:6;-1:-1:-1;;;;;723:6:167;659:77;;:::o;979:90::-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:167;1042:10;:20;;979:90::o;4099:398:181:-;863:9:167;:7;:9::i;:::-;855:18;;;;;;4348:14:181;;4330:15;:32;4309:138;;;;-1:-1:-1;;;;;4309:138:181;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4458:14;:32;4099:398::o;1141:44:117:-;;;;;;;;;;;;-1:-1:-1;;;;;1141:44:117;;:::o;3931:437::-;1818:9:181;:7;:9::i;:::-;1797:103;;;;-1:-1:-1;;;;;1797:103:181;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2069:14;;:18;2065:1091;;2278:19;2365:8;;2327:64;;;;;;;30:3:-1;22:6;14;1:33;2327:64:181;;;45:16:-1;;;;26:21;;;-1:-1;;22:32;6:49;;2327:64:181;;2300:105;;49:4:-1;2300:105:181;;;;2420:24;2447:31;;;:18;:31;;;;;;;2300:105;;-1:-1:-1;2447:31:181;;-1:-1:-1;;;2583:21:181;;2579:293;;-1:-1:-1;2579:293:181;;2658:15;2624:18;:31;2643:11;2624:31;;;;;;;;;;;:49;;;;2736:11;2697:135;2769:15;2806:8;;2697:135;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;;74:27;2697:135:181;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;2697:135:181;;;;-1:-1:-1;2697:135:181;;-1:-1:-1;;;;;2697:135:181;2851:7;;;;2579:293;2951:14;;2930:36;;:16;;:36;:20;:36;:::i;:::-;2911:15;:55;;2886:168;;;;-1:-1:-1;;;;;2886:168:181;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3143:1:181;3109:31;;;:18;:31;;;;;:35;2065:1091;-1:-1:-1;;;;;4058:15:117;;;4034:21;4058:15;;;:9;:15;;;;;;;4105:27;4084:156;;;;-1:-1:-1;;;;;4084:156:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4258:17;4270:4;4258;:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4258:11:117;;;;;;;;;;;;;;;;;;;;;;;:17;;;;:::i;:::-;4251:24;;;;:4;;:24;;;;;;:::i;:::-;-1:-1:-1;;;;;;4285:15:117;;;4311:1;4285:15;;;:9;:15;;;;;;;;;:28;;-1:-1:-1;;;;;;4285:28:117;;;4329:32;;;;;;;;;4285:15;;4329:32;;;;;;;;;;;3206:1:181;3931:437:117;;:::o;3272:505::-;1818:9:181;:7;:9::i;:::-;1797:103;;;;-1:-1:-1;;;;;1797:103:181;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2069:14;;:18;2065:1091;;2278:19;2365:8;;2327:64;;;;;;;30:3:-1;22:6;14;1:33;2327:64:181;;;45:16:-1;;;;26:21;;;-1:-1;;22:32;6:49;;2327:64:181;;2300:105;;49:4:-1;2300:105:181;;;;2420:24;2447:31;;;:18;:31;;;;;;;2300:105;;-1:-1:-1;2447:31:181;;-1:-1:-1;;;2583:21:181;;2579:293;;-1:-1:-1;2579:293:181;;2658:15;2624:18;:31;2643:11;2624:31;;;;;;;;;;;:49;;;;2736:11;2697:135;2769:15;2806:8;;2697:135;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;;74:27;2697:135:181;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;2697:135:181;;;;-1:-1:-1;2697:135:181;;-1:-1:-1;;;;;2697:135:181;2851:7;;;;2579:293;2951:14;;2930:36;;:16;;:36;:20;:36;:::i;:::-;2911:15;:55;;2886:168;;;;-1:-1:-1;;;;;2886:168:181;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3143:1:181;3109:31;;;:18;:31;;;;;:35;2065:1091;-1:-1:-1;;;;;3417:15:117;;;3444:1;3417:15;;;:9;:15;;;;;;;:29;3396:139;;;;-1:-1:-1;;;;;3396:139:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3567:20:117;;3546:125;;;;-1:-1:-1;;;;;3546:125:117;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3682:4;27:10:-1;;39:1;23:18;;45:23;;;3682:15:117;;;;-1:-1:-1;;;;;3682:15:117;;;-1:-1:-1;;;;;;3682:15:117;;;;;;;;-1:-1:-1;3707:15:117;;;:9;3682:15;3707;;;;;;;;:24;;;;;;;;;;;;;;3747:23;;;;;;;;;;;;;;;;;3272:505;;:::o;3428:444:181:-;863:9:167;:7;:9::i;:::-;855:18;;;;;;3568:32:181;;;;:18;:32;;;;;;3547:158;;;;-1:-1:-1;;;;;3547:158:181;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3787:1;3752:32;;;:18;:32;;;;;;:36;;;3804:59;3771:12;;3804:59;;;3428:444;:::o;5398:123:117:-;5471:16;5510:4;5503:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5503:11:117;;;;;;;;;;;;;;;;;;;;;;;5398:123;:::o;1731:107:167:-;863:9;:7;:9::i;:::-;855:18;;;;;;1803:28;1822:8;1803:18;:28::i;1439:145:166:-;1497:7;1528:5;;;1551:6;;;;1543:15;;;;;;1576:1;1439:145;-1:-1:-1;;;1439:145:166:o;5536:320:172:-;5630:16;5663:13;5678:9;5691:13;5699:1;5702;5691:7;:13::i;:::-;5662:42;;;;5719:4;5714:136;;5739:8;;;5714:136;5779:19;5803:13;5807:1;5810:5;5803:3;:13::i;:::-;-1:-1:-1;5778:38:172;-1:-1:-1;5830:9:172;;-1:-1:-1;;;5830:9:172;1982:183:167;-1:-1:-1;;;;;2055:22:167;;2047:31;;;;;;2114:6;;;2093:38;;-1:-1:-1;;;;;2093:38:167;;;;2114:6;;;2093:38;;;2141:6;:17;;-1:-1:-1;;;;;;2141:17:167;-1:-1:-1;;;;;2141:17:167;;;;;;;;;;1982:183::o;509:289:172:-;622:8;;580:7;;;;;640:125;664:6;660:1;:10;640:125;;;703:1;-1:-1:-1;;;;;695:9:172;:1;697;695:4;;;;;;;;;;;;;;-1:-1:-1;;;;;695:9:172;;691:64;;;732:1;-1:-1:-1;735:4:172;;-1:-1:-1;724:16:172;;-1:-1:-1;724:16:172;691:64;672:3;;640:125;;;-1:-1:-1;782:1:172;;-1:-1:-1;782:1:172;;-1:-1:-1;;509:289:172;;;;;;:::o;5004:473::-;5099:16;5117:7;5140:14;5157:1;:8;5140:25;;5175:29;5230:1;5221:6;:10;5207:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;5207:25:172;-1:-1:-1;5175:57:172;-1:-1:-1;5247:9:172;5242:83;5266:5;5262:1;:9;5242:83;;;5310:1;5312;5310:4;;;;;;;;;;;;;;5292:12;5305:1;5292:15;;;;;;;;-1:-1:-1;;;;;5292:22:172;;;:15;;;;;;;;;;;:22;5273:3;;5242:83;;;-1:-1:-1;5359:1:172;5351:9;;5334:96;5366:6;5362:1;:10;5334:96;;;5415:1;5417;5415:4;;;;;;;;;;;;;;5393:12;5410:1;5406;:5;5393:19;;;;;;;;-1:-1:-1;;;;;5393:26:172;;;:19;;;;;;;;;;;:26;5374:3;;5334:96;;;;5447:12;5461:1;5463:5;5461:8;;;;;;;;;;;;;;5439:31;;;;;;5004:473;;;;;:::o;951:6784:117:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;951:6784:117;-1:-1:-1;;;;;951:6784:117;;;;;;;;;;;-1:-1:-1;951:6784:117;;;;;;;-1:-1:-1;951:6784:117;;;-1:-1:-1;951:6784:117;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;;951:6784:117;;;;;;",source:'/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\npragma solidity 0.5.7;\n\nimport { AddressArrayUtils } from "set-protocol-contract-utils/contracts/lib/AddressArrayUtils.sol";\nimport { TimeLockUpgradeV2 } from "set-protocol-contract-utils/contracts/lib/TimeLockUpgradeV2.sol";\n\n\n/**\n * @title AddressToAddressWhiteList\n * @author Set Protocol\n *\n * WhiteList that matches addresses to other addresses\n */\ncontract AddressToAddressWhiteList is\n    TimeLockUpgradeV2\n{\n    using AddressArrayUtils for address[];\n\n    /* ============ State Variables ============ */\n\n    address[] public keys;\n    mapping(address => address) public whitelist;\n\n    /* ============ Events ============ */\n\n    event PairAdded(\n        address indexed key,\n        address value\n    );\n\n    event PairRemoved(\n        address indexed key,\n        address value\n    );\n\n    /* ============ Constructor ============ */\n\n    /**\n     * Constructor function for AddressToAddressWhiteList\n     *\n     * Allow initial addresses to be passed in so a separate transaction is not required for each.\n     * Each key type address passed is matched with a corresponding value type token address at the same index.\n     * The _initialKeys and _initialValues arrays must be equal length.\n     *\n     * @param _initialKeys         Starting set of key type addresses to whitelist\n     * @param _initialValues       Starting set of value type addresses to whitelist\n     */\n    constructor(\n        address[] memory _initialKeys,\n        address[] memory _initialValues\n    )\n        public\n    {\n        require(\n            _initialKeys.length == _initialValues.length,\n            "AddressToAddressWhiteList.constructor: Address array lengths must match."\n        );\n\n        // Add each of initial addresses to state\n        for (uint256 i = 0; i < _initialKeys.length; i++) {\n            address keyTypeAddressToAdd = _initialKeys[i];\n\n            // Require keys are unique\n            require(\n                whitelist[keyTypeAddressToAdd] == address(0),\n                "AddressToAddressWhiteList.constructor: Key must be unique."\n            );\n\n            // Require values are non zero addresses\n            require(\n                _initialValues[i] != address(0),\n                "AddressToAddressWhiteList.constructor: Value must be non zero."\n            );\n\n            keys.push(keyTypeAddressToAdd);\n            whitelist[keyTypeAddressToAdd] = _initialValues[i];\n        }\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * Add an address to the whitelist\n     *\n     * @param _key     Key type address to add to the whitelist\n     * @param _value   Value type address to add to the whitelist under _key\n     */\n    function addPair(\n        address _key,\n        address _value\n    )\n        external\n        timeLockUpgrade\n    {\n        require(\n            whitelist[_key] == address(0),\n            "AddressToAddressWhiteList.addPair: Address pair already exists."\n        );\n\n        require(\n            _value != address(0),\n            "AddressToAddressWhiteList.addPair: Value must be non zero."\n        );\n\n        keys.push(_key);\n        whitelist[_key] = _value;\n\n        emit PairAdded(_key, _value);\n    }\n\n    /**\n     * Remove a address to address pair from the whitelist\n     *\n     * @param _key    Key type address to remove to the whitelist\n     */\n    function removePair(\n        address _key\n    )\n        external\n        timeLockUpgrade\n    {\n        address valueToRemove = whitelist[_key];\n\n        require(\n            valueToRemove != address(0),\n            "AddressToAddressWhiteList.removePair: key type address is not current whitelisted."\n        );\n\n        keys = keys.remove(_key);\n        whitelist[_key] = address(0);\n\n        emit PairRemoved(_key, valueToRemove);\n    }\n\n    /**\n     * Edit value type address associated with a key\n     *\n     * @param _key       Key type address to add to the whitelist\n     * @param _value     Value type address to add to the whitelist under _key\n     */\n    function editPair(\n        address _key,\n        address _value\n    )\n        external\n        timeLockUpgrade\n    {\n        require(\n            whitelist[_key] != address(0),\n            "AddressToAddressWhiteList.editPair: Address pair must exist."\n        );\n\n        require(\n            _value != address(0),\n            "AddressToAddressWhiteList.editPair: New value must be non zero."\n        );\n\n        emit PairRemoved(\n            _key,\n            whitelist[_key]\n        );\n\n        // Set new value type address for passed key type address\n        whitelist[_key] = _value;\n\n        emit PairAdded(\n            _key,\n            _value\n        );\n    }\n\n    /**\n     * Return array of all whitelisted addresses\n     *\n     * @return address[]      Array of key type addresses\n     */\n    function validAddresses()\n        external\n        view\n        returns (address[] memory)\n    {\n        return keys;\n    }\n\n    /**\n     * Return array of value type addresses based on passed in key type addresses \n     *\n     * @param  _key                Array of key type addresses to get value type addresses for\n     * @return address[]           Array of value type addresses\n     */\n    function getValues(\n        address[] calldata _key\n    )\n        external\n        view\n        returns (address[] memory)\n    {\n        // Get length of passed array\n        uint256 arrayLength = _key.length;\n\n        // Instantiate value type addresses array\n        address[] memory values = new address[](arrayLength);\n\n        for (uint256 i = 0; i < arrayLength; i++) {\n            // Get value type address for key type address at index i\n            values[i] = getValue(\n                _key[i]\n            );\n        }\n\n        return values;       \n    }\n\n    /**\n     * Return value type address associated with a passed key type address \n     *\n     * @param  _key               Address of key type\n     * @return address            Address associated with _key \n     */\n    function getValue(\n        address _key\n    )\n        public\n        view\n        returns (address)\n    {\n        // Require key to have matching value type address\n        require(\n            whitelist[_key] != address(0),\n            "AddressToAddressWhiteList.getValue: No value for that address."\n        );\n\n        // Return address associated with key\n        return whitelist[_key];       \n    }\n\n    /**\n     * Verifies an array of addresses against the whitelist\n     *\n     * @param  _keys                Array of key type addresses to check if value exists\n     * @return bool                 Whether all addresses in the list are whitelisted\n     */\n    function areValidAddresses(\n        address[] calldata _keys\n    )\n        external\n        view\n        returns (bool)\n    {\n        // Get length of passed array\n        uint256 arrayLength = _keys.length;\n\n        for (uint256 i = 0; i < arrayLength; i++) {\n            // Return false if key type address doesn\'t have matching value type address\n            if (whitelist[_keys[i]] == address(0)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}',sourcePath:"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/lib/AddressToAddressWhiteList.sol",compiler:{name:"solc",version:"0.5.7+commit.6da8b019.Linux.g++"},networks:{},schemaVersion:"3.0.23",updatedAt:"2020-05-05T17:13:37.011Z",devdoc:{author:"Set Protocol * WhiteList that matches addresses to other addresses",methods:{"addPair(address,address)":{params:{_key:"Key type address to add to the whitelist",_value:"Value type address to add to the whitelist under _key"}},"areValidAddresses(address[])":{params:{_keys:"Array of key type addresses to check if value exists"},"return":"bool                 Whether all addresses in the list are whitelisted"},constructor:{params:{_initialKeys:"Starting set of key type addresses to whitelist",_initialValues:"Starting set of value type addresses to whitelist"}},"editPair(address,address)":{params:{_key:"Key type address to add to the whitelist",_value:"Value type address to add to the whitelist under _key"}},"getValue(address)":{params:{_key:"Address of key type"},"return":"address            Address associated with _key "},"getValues(address[])":{params:{_key:"Array of key type addresses to get value type addresses for"},"return":"address[]           Array of value type addresses"},"isOwner()":{"return":"true if `msg.sender` is the owner of the contract."},"owner()":{"return":"the address of the owner."},"removePair(address)":{params:{_key:"Key type address to remove to the whitelist"}},"removeRegisteredUpgrade(bytes32)":{params:{_upgradeHash:"Keccack256 hash that uniquely identifies function called and arguments "}},"renounceOwnership()":{details:"Allows the current owner to relinquish control of the contract. It will not be possible to call the functions with the `onlyOwner` modifier anymore."},"setTimeLockPeriod(uint256)":{params:{_timeLockPeriod:"Time in seconds that upgrades need to be evaluated before execution"}},"transferOwnership(address)":{details:"Allows the current owner to transfer control of the contract to a newOwner.",params:{newOwner:"The address to transfer ownership to."}},"validAddresses()":{"return":"address[]      Array of key type addresses"}},title:"AddressToAddressWhiteList"},userdoc:{methods:{"addPair(address,address)":{notice:"Add an address to the whitelist"},"areValidAddresses(address[])":{notice:"Verifies an array of addresses against the whitelist"},constructor:"Constructor function for AddressToAddressWhiteList     * Allow initial addresses to be passed in so a separate transaction is not required for each. Each key type address passed is matched with a corresponding value type token address at the same index. The _initialKeys and _initialValues arrays must be equal length.","editPair(address,address)":{notice:"Edit value type address associated with a key"},"getValue(address)":{notice:"Return value type address associated with a passed key type address "},"getValues(address[])":{notice:"Return array of value type addresses based on passed in key type addresses "},"removePair(address)":{notice:"Remove a address to address pair from the whitelist"},"removeRegisteredUpgrade(bytes32)":{notice:"Removes an existing upgrade."},"renounceOwnership()":{notice:"Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"setTimeLockPeriod(uint256)":{notice:"Change timeLockPeriod period. Generally called after initially settings have been set up."},"validAddresses()":{notice:"Return array of all whitelisted addresses"}}}};