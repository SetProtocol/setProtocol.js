"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.StartRebalanceLibrary={contractName:"StartRebalanceLibrary",abi:[],metadata:'{"compiler":{"version":"0.5.7+commit.6da8b019"},"language":"Solidity","output":{"abi":[],"devdoc":{"author":"Set Protocol * Default implementation of Rebalancing Set Token startRebalance function","methods":{"calculateCombinedUnitArrays(SetTokenLibrary.SetDetails,SetTokenLibrary.SetDetails,uint256,address,address[])":{"params":{"_auctionLibrary":"Address of auction library being used in rebalance","_combinedTokenArray":"Array of component tokens involved in rebalance","_currentSet":"Information on currentSet","_minimumBid":"Minimum bid amount","_nextSet":"Information on nextSet"},"return":"Unit inflow/outflow arrays for current and next Set"},"redeemCurrentSet(address,address,address)":{"params":{"_coreAddress":"Core address","_currentSet":"Address of current Set","_vaultAddress":"Vault address"},"return":"Amount of currentSets remaining"},"redeemCurrentSetAndGetBiddingParameters(address,address,address,address,address)":{"params":{"_auctionLibrary":"Address of auction library being used in rebalance","_coreAddress":"Core address","_currentSet":"Address of current Set","_nextSet":"Address of next Set","_vaultAddress":"Vault address"},"return":"Struct containing bidding parameters"},"setUpBiddingParameters(address,address,address,uint256)":{"params":{"_auctionLibrary":"Address of auction library being used in rebalance","_currentSet":"Address of current Set","_nextSet":"Address of next Set","_remainingCurrentSets":"Quantity of Current Sets redeemed"},"return":"Struct containing bidding parameters"},"validateStartRebalance(uint256,uint256,uint8)":{"params":{"_proposalPeriod":"Required length of proposal period","_proposalStartTime":"Start time of proposal period","_rebalanceState":"State rebalancing set token is in"}}},"title":"StartRebalanceLibrary"},"userdoc":{"methods":{"calculateCombinedUnitArrays(SetTokenLibrary.SetDetails,SetTokenLibrary.SetDetails,uint256,address,address[])":{"notice":"Create arrays that represent all components in currentSet and nextSet. Calcualate unit difference between both sets relative to the largest natural unit of the two sets."},"redeemCurrentSet(address,address,address)":{"notice":"Calculates the maximum redemption quantity and redeems the Set into the vault. Also updates remainingCurrentSets state variable"},"redeemCurrentSetAndGetBiddingParameters(address,address,address,address,address)":{"notice":"Function used to validate inputs to propose function and initialize biddingParameters struct"},"setUpBiddingParameters(address,address,address,uint256)":{"notice":"Create struct that holds array representing all components in currentSet and nextSet. Calcualate unit difference between both sets relative to the largest natural unit of the two sets. Calculate minimumBid."},"validateStartRebalance(uint256,uint256,uint8)":{"notice":"Function used to validate time passed to start a rebalance"}}}},"settings":{"compilationTarget":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/tokens/rebalancing-libraries/StartRebalanceLibrary.sol":"StartRebalanceLibrary"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/ICore.sol":{"keccak256":"0x5dc3db4398630ea52d2a40c9ddfa89d94e65c2770a12bab4d2a5c8eb573fb0a0","urls":["bzzr://25e90b53f61b388e0950b808e2296f82d427b66cfd6021212713436b2a592e31"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/ISetToken.sol":{"keccak256":"0xfa6c0c07f8394d89b6b8f72e15778f8452a9341acb20cebb8421f3522aaca1bd","urls":["bzzr://ccf23bb78fd507bf8cbf5cf7ac2a660a1463b87a3689196e42b8f6862d1a6b11"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/IVault.sol":{"keccak256":"0xf8a6d376173be39f5744492866db5dd3f91453a124d23679ff164ff3817f2f4f","urls":["bzzr://896c0a8329175c1620e1a22467778b835defe0e61847e5a8427a306f42391e64"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/lib/RebalancingLibrary.sol":{"keccak256":"0x7f9dd2f95b2ee71a98b94cb9b0df15874aa134e7480d04a1fcf36aff166a55f4","urls":["bzzr://f43a5563ec5df095151eee30cf7a0941b5a971917c27c7b34d9586b36563ab5b"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/lib/SetTokenLibrary.sol":{"keccak256":"0x0c0952057a64c3af0ace01db29258145deff7d935bdc53d1bbab6fff87b3b146","urls":["bzzr://ad1944f45fade934870661a4e91c260625755760ff0ef047677547fbdc6a16bf"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/lib/auction-price-libraries/IAuctionPriceCurve.sol":{"keccak256":"0x52e8b84f3475cb162f93666d1d32dd19cc8838a72c6934ebc22075e58a7acf1b","urls":["bzzr://5d6b372b7dcfab18dfa74013bedaadb1bb455d263dd414a30d01b05abbf5300c"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/tokens/rebalancing-libraries/StartRebalanceLibrary.sol":{"keccak256":"0x4522fc8f2284ee5335a484b0262c068e8474ee844f4ff227996343e0e7af853a","urls":["bzzr://7fa89da302f9b3e0457df23143b691c5a612ce60482ada921e9d53fd2dd82768"]},"openzeppelin-solidity/contracts/math/Math.sol":{"keccak256":"0x775160984ceb0931bf67e718fb23afd6fc2a5d38a6e2378ebb438a039ed2269e","urls":["bzzr://209e27ad1c13e3e9b157915e0269ee4c3b6f0a494660dcc4acf1faf102e1a7ad"]},"openzeppelin-solidity/contracts/math/SafeMath.sol":{"keccak256":"0xc2a200a877c4a9b2475c246c54ffecc69ffde3e11af83319c63c2dc5458bac80","urls":["bzzr://c8876e2c39b60f155d748d71d715c8f3903fae5a405ac599adcb6ad2f9a583f9"]},"set-protocol-contract-utils/contracts/lib/AddressArrayUtils.sol":{"keccak256":"0xb716eab4e8c5a336a2f19078928530829af097912bd1b925644f914b63601f08","urls":["bzzr://d8a21d39779beb316adb5180d08dcba1941eeccd9412ff08feb21a631c18c269"]}},"version":1}',bytecode:"0x6117ba610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100645760e060020a60003504634f97078481146100695780635e7c35db1461009f5780638f1880c4146100cd578063a569cda1146100ef578063ff9886ca1461010f575b600080fd5b81801561007557600080fd5b50610089610084366004611161565b61013c565b60405161009691906116ec565b60405180910390f35b8180156100ab57600080fd5b506100bf6100ba36600461122c565b610229565b604051610096929190611697565b8180156100d957600080fd5b506100ed6100e83660046112f9565b61030f565b005b8180156100fb57600080fd5b5061008961010a3660046110ec565b61039a565b81801561011b57600080fd5b5061012f61012a36600461109f565b6103d1565b60405161009691906116fd565b610144610d49565b61014c610d78565b6101558661057a565b905061015f610d78565b6101688661057a565b905060606101878260200151846020015161071990919063ffffffff16565b9050600061019e8460000151846000015189610763565b9050808610156101e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101da906116cc565b60405180910390fd5b6060806101f38686858c88610229565b6040805160a081018252958652602086018b9052850191909152606084015250506080810191909152925050505b949350505050565b60608060608351604051908082528060200260200182016040528015610259578160200160208202803883390190505b50905060608451604051908082528060200260200182016040528015610289578160200160208202803883390190505b50905060005b8551811015610300576102b78a89898985815181106102aa57fe5b602002602001015161080d565b8382815181106102c357fe5b6020026020010181815250506102e18989898985815181106102aa57fe5b8282815181106102ed57fe5b602090810291909101015260010161028f565b50909890975095505050505050565b60ff811660011461034c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101da906116bc565b61035c838363ffffffff61087116565b421015610395576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101da906116dc565b505050565b6103a2610d49565b60006103af8785856103d1565b90506103b9610d49565b6103c58888888561013c565b98975050505050505050565b60008082600160a060020a0316631f98ade386306040518363ffffffff1660e060020a028152600401610405929190611661565b60206040518083038186803b15801561041d57600080fd5b505afa158015610431573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061045591908101906112db565b9050600085600160a060020a03166342a7cfd56040518163ffffffff1660e060020a02815260040160206040518083038186803b15801561049557600080fd5b505afa1580156104a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104cd91908101906112db565b905060006104f1826104e5858263ffffffff61088316565b9063ffffffff6108a516565b6040517fa782132c000000000000000000000000000000000000000000000000000000008152909150600160a060020a0387169063a782132c9061053b908a90859060040161167c565b600060405180830381600087803b15801561055557600080fd5b505af1158015610569573d6000803e3d6000fd5b5092955050505050505b9392505050565b610582610d78565b6000829050600081600160a060020a03166342a7cfd56040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156105c557600080fd5b505afa1580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506105fd91908101906112db565b9050606082600160a060020a03166399d50d5d6040518163ffffffff1660e060020a02815260040160006040518083038186803b15801561063d57600080fd5b505afa158015610651573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261067991908101906111c2565b9050606083600160a060020a031663027aa9f56040518163ffffffff1660e060020a02815260040160006040518083038186803b1580156106b957600080fd5b505afa1580156106cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106f591908101906111f7565b60408051606081018252948552602085019390935291830191909152509392505050565b60608061072684846108cc565b9050606061073484866108cc565b905060606107428686610a0c565b9050610757836107528385610b3a565b610b3a565b93505050505b92915050565b60008082600160a060020a031663d690a8c36040518163ffffffff1660e060020a02815260040160206040518083038186803b1580156107a257600080fd5b505afa1580156107b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506107da91908101906112db565b90506108046107ef868363ffffffff6108a516565b6107ff868463ffffffff6108a516565b610c1c565b95945050505050565b6000806000610829848860200151610c3390919063ffffffff16565b909250905080156108645761085b8760400151838151811061084757fe5b602002602001015188600001518888610c97565b92505050610221565b5060009695505050505050565b60008282018381101561057357600080fd5b600080821161089157600080fd5b600082848161089c57fe5b04949350505050565b6000826108b45750600061075d565b828202828482816108c157fe5b041461057357600080fd5b6060600083519050606081604051908082528060200260200182016040528015610900578160200160208202803883390190505b5090506000805b8381101561096357600087828151811061091d57fe5b602002602001015190506109318782610d3c565b61095a57600184838151811061094357fe5b911515602092830291909101909101526001909201915b50600101610907565b50606081604051908082528060200260200182016040528015610990578160200160208202803883390190505b5090506000805b858110156109ff578481815181106109ab57fe5b6020026020010151156109f7578881815181106109c457fe5b60200260200101518383815181106109d857fe5b600160a060020a03909216602092830291909101909101526001909101905b600101610997565b5090979650505050505050565b6060600083519050606081604051908082528060200260200182016040528015610a40578160200160208202803883390190505b5090506000805b83811015610a9e57610a6c86888381518110610a5f57fe5b6020026020010151610d3c565b15610a96576001838281518110610a7f57fe5b911515602092830291909101909101526001909101905b600101610a47565b50606081604051908082528060200260200182016040528015610acb578160200160208202803883390190505b5090506000805b858110156109ff57848181518110610ae657fe5b602002602001015115610b3257888181518110610aff57fe5b6020026020010151838381518110610b1357fe5b600160a060020a03909216602092830291909101909101526001909101905b600101610ad2565b60606000835190506000835190506060818301604051908082528060200260200182016040528015610b76578160200160208202803883390190505b50905060005b83811015610bc457868181518110610b9057fe5b6020026020010151828281518110610ba457fe5b600160a060020a0390921660209283029190910190910152600101610b7c565b5060005b82811015610c1257858181518110610bdc57fe5b60200260200101518282860181518110610bf257fe5b600160a060020a0390921660209283029190910190910152600101610bc8565b5095945050505050565b600081831015610c2c5781610573565b5090919050565b81516000908190815b81811015610c865784600160a060020a0316868281518110610c5a57fe5b6020026020010151600160a060020a03161415610c7e57925060019150610c909050565b600101610c3c565b5060009250829150505b9250929050565b60008082600160a060020a031663d690a8c36040518163ffffffff1660e060020a02815260040160206040518083038186803b158015610cd657600080fd5b505afa158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610d0e91908101906112db565b9050610d3281610d268781888b63ffffffff6108a516565b9063ffffffff61088316565b9695505050505050565b6000806108048484610c33565b6040518060a0016040528060008152602001600081526020016060815260200160608152602001606081525090565b60405180606001604052806000815260200160608152602001606081525090565b60006105738235611766565b60006105738251611766565b600082601f830112610dc257600080fd5b8135610dd5610dd082611732565b61170b565b91508181835260208401935060208101905083856020840282011115610dfa57600080fd5b60005b83811015610e265781610e108882610d99565b8452506020928301929190910190600101610dfd565b5050505092915050565b600082601f830112610e4157600080fd5b8135610e4f610dd082611732565b91508181835260208401935060208101905083856020840282011115610e7457600080fd5b60005b83811015610e265781610e8a8882610d99565b8452506020928301929190910190600101610e77565b600082601f830112610eb157600080fd5b8151610ebf610dd082611732565b91508181835260208401935060208101905083856020840282011115610ee457600080fd5b60005b83811015610e265781610efa8882610da5565b8452506020928301929190910190600101610ee7565b600082601f830112610f2157600080fd5b8135610f2f610dd082611732565b91508181835260208401935060208101905083856020840282011115610f5457600080fd5b60005b83811015610e265781610f6a888261107b565b8452506020928301929190910190600101610f57565b600082601f830112610f9157600080fd5b8151610f9f610dd082611732565b91508181835260208401935060208101905083856020840282011115610fc457600080fd5b60005b83811015610e265781610fda8882611087565b8452506020928301929190910190600101610fc7565b60006060828403121561100257600080fd5b61100c606061170b565b9050600061101a848461107b565b825250602082013567ffffffffffffffff81111561103757600080fd5b61104384828501610db1565b602083015250604082013567ffffffffffffffff81111561106357600080fd5b61106f84828501610f10565b60408301525092915050565b60006105738235611777565b60006105738251611777565b6000610573823561177a565b6000806000606084860312156110b457600080fd5b60006110c08686610d99565b93505060206110d186828701610d99565b92505060406110e286828701610d99565b9150509250925092565b600080600080600060a0868803121561110457600080fd5b60006111108888610d99565b955050602061112188828901610d99565b945050604061113288828901610d99565b935050606061114388828901610d99565b925050608061115488828901610d99565b9150509295509295909350565b6000806000806080858703121561117757600080fd5b60006111838787610d99565b945050602061119487828801610d99565b93505060406111a587828801610d99565b92505060606111b68782880161107b565b91505092959194509250565b6000602082840312156111d457600080fd5b815167ffffffffffffffff8111156111eb57600080fd5b61022184828501610ea0565b60006020828403121561120957600080fd5b815167ffffffffffffffff81111561122057600080fd5b61022184828501610f80565b600080600080600060a0868803121561124457600080fd5b853567ffffffffffffffff81111561125b57600080fd5b61126788828901610ff0565b955050602086013567ffffffffffffffff81111561128457600080fd5b61129088828901610ff0565b94505060406112a18882890161107b565b93505060606112b288828901610d99565b925050608086013567ffffffffffffffff8111156112cf57600080fd5b61115488828901610e30565b6000602082840312156112ed57600080fd5b60006102218484611087565b60008060006060848603121561130e57600080fd5b600061131a868661107b565b935050602061132b8682870161107b565b92505060406110e286828701611093565b6000611348838361135c565b505060200190565b60006113488383611658565b61136581611766565b82525050565b600061137682611759565b611380818561175d565b935061138b83611753565b60005b828110156113b6576113a186835161133c565b95506113ac82611753565b915060010161138e565b5093949350505050565b60006113cb82611759565b6113d5818561175d565b93506113e083611753565b60005b828110156113b6576113f6868351611350565b955061140182611753565b91506001016113e3565b600061141682611759565b611420818561175d565b935061142b83611753565b60005b828110156113b657611441868351611350565b955061144c82611753565b915060010161142e565b600061146360428361175d565b7f526562616c616e63696e67536574546f6b656e2e76616c69646174655374617281527f74526562616c616e63653a205374617465206d7573742062652050726f706f7360208201527f616c000000000000000000000000000000000000000000000000000000000000604082015260600192915050565b60006114e8604e8361175d565b7f526562616c616e63696e67536574546f6b656e2e736574557042696464696e6781527f506172616d65746572733a204e6f7420656e6f75676820636f6c6c617465726160208201527f6c20746f20726562616c616e6365000000000000000000000000000000000000604082015260600192915050565b600061156d60478361175d565b7f526562616c616e63696e67536574546f6b656e2e76616c69646174655374617281527f74526562616c616e63653a2050726f706f73616c20706572696f64206e6f742060208201527f656c617073656400000000000000000000000000000000000000000000000000604082015260600192915050565b805160009060a08401906115f98582611658565b50602083015161160c6020860182611658565b5060408301518482036040860152611624828261140b565b9150506060830151848203606086015261163e828261140b565b91505060808301518482036080860152610804828261136b565b61136581611777565b6040810161166f828561135c565b610573602083018461135c565b6040810161168a828561135c565b6105736020830184611658565b604080825281016116a881856113c0565b9050818103602083015261022181846113c0565b6020808252810161075d81611456565b6020808252810161075d816114db565b6020808252810161075d81611560565b6020808252810161057381846115e5565b6020810161075d8284611658565b60405181810167ffffffffffffffff8111828210171561172a57600080fd5b604052919050565b600067ffffffffffffffff82111561174957600080fd5b5060209081020190565b60200190565b5190565b90815260200190565b6000600160a060020a03821661075d565b90565b60ff169056fea265627a7a7230582024438957efa25de54e08ef2bda271cf2dd1a29f9a2b3e4e91e740bdbf3692b616c6578706572696d656e74616cf50037",deployedBytecode:"",sourceMap:"1449:11247:85:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24",deployedSourceMap:"1449:11247:85:-;;;;;;;;;;;-1:-1:-1;;;1449:11247:85;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4553:2057;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;4553:2057:85;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;8135:1261;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;8135:1261:85;;;;;;;;:::i;:::-;;;;;;;;;1913:666;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1913:666:85;;;;;;;;:::i;:::-;;3082:869;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;3082:869:85;;;;;;;;:::i;11012:890::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;11012:890:85;;;;;;;;:::i;:::-;;;;;;;;4553:2057;4750:43;;:::i;:::-;4898:44;;:::i;:::-;4945:42;4975:11;4945:29;:42::i;:::-;4898:89;;4997:41;;:::i;:::-;5041:39;5071:8;5041:29;:39::i;:::-;4997:83;;5128:35;5166:69;5207:7;:18;;;5166:10;:21;;;:27;;:69;;;;:::i;:::-;5128:107;;5279:18;5300:127;5333:10;:22;;;5369:7;:19;;;5402:15;5300:19;:127::i;:::-;5279:148;;5603:10;5578:21;:35;;5557:160;;;;;;;;;;;;;;;;;;;;;;5884:37;5931;6059:167;6100:10;6124:7;6145:10;6169:15;6198:18;6059:27;:167::i;:::-;6298:305;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6298:305:85;;;;;;;;-1:-1:-1;;;4553:2057:85;;;;;;;:::o;8135:1261::-;8425:16;8443;8631:43;8691:19;:26;8677:41;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;8677:41:85;;8631:87;;8728:43;8788:19;:26;8774:41;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;8774:41:85;-1:-1:-1;8728:87:85;-1:-1:-1;8831:9:85;8826:490;8850:19;:26;8846:1;:30;8826:490;;;8929:166;8968:11;8997;9026:15;9059:19;9079:1;9059:22;;;;;;;;;;;;;;8929:21;:166::i;:::-;8897:26;8924:1;8897:29;;;;;;;;;;;;;:198;;;;;9142:163;9181:8;9207:11;9236:15;9269:19;9289:1;9269:22;;;;;;;9142:163;9110:26;9137:1;9110:29;;;;;;;;;;;;;;;;;:195;8878:3;;8826:490;;;-1:-1:-1;9334:26:85;;;;-1:-1:-1;8135:1261:85;-1:-1:-1;;;;;;8135:1261:85:o;1913:666::-;2178:59;;;2203:33;2178:59;2157:172;;;;;;;;;;;;;;2436:39;:18;2459:15;2436:39;:22;:39;:::i;:::-;2417:15;:58;;2396:176;;;;;;;;;;;;;;1913:666;;;:::o;3082:869::-;3318:43;;:::i;:::-;3463:28;3494:104;3524:11;3549:12;3575:13;3494:16;:104::i;:::-;3463:135;;3703:61;;:::i;:::-;3767:142;3803:11;3828:8;3850:15;3879:20;3767:22;:142::i;:::-;3703:206;3082:869;-1:-1:-1;;;;;;;;3082:869:85:o;11012:890::-;11166:7;11274:25;11309:13;-1:-1:-1;;;;;11302:37:85;;11353:11;11386:4;11302:99;;;;;-1:-1:-1;;;11302:99:85;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11302:99:85;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11302:99:85;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;11302:99:85;;;;;;;;;11274:127;;11457:29;11499:11;-1:-1:-1;;;;;11489:34:85;;:36;;;;;-1:-1:-1;;;11489:36:85;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11489:36:85;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11489:36:85;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;11489:36:85;;;;;;;;;11457:68;-1:-1:-1;11642:28:85;11673:71;11457:68;11673:44;:17;11457:68;11673:44;:21;:44;:::i;:::-;:48;:71;:48;:71;:::i;:::-;11755:102;;;;;11642;;-1:-1:-1;;;;;;11755:33:85;;;;;:102;;11802:11;;11642:102;;11755;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11755:102:85;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;11875:20:85;;-1:-1:-1;;;;;;11012:890:85;;;;;;:::o;2980:564:46:-;3078:17;;:::i;:::-;3150:18;3181:4;3150:36;;3235:19;3257:8;-1:-1:-1;;;;;3257:20:46;;:22;;;;;-1:-1:-1;;;3257:22:46;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3257:22:46;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3257:22:46;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;3257:22:46;;;;;;;;;3235:44;;3289:27;3319:8;-1:-1:-1;;;;;3319:22:46;;:24;;;;;-1:-1:-1;;;3319:24:46;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3319:24:46;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3319:24:46;;;;;;39:16:-1;36:1;17:17;2:54;101:4;3319:24:46;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;3319:24:46;;;;;;;;;3289:54;;3353:22;3378:8;-1:-1:-1;;;;;3378:17:46;;:19;;;;;-1:-1:-1;;;3378:19:46;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3378:19:46;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3378:19:46;;;;;;39:16:-1;36:1;17:17;2:54;101:4;3378:19:46;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;3378:19:46;;;;;;;;;3415:122;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3415:122:46;2980:564;-1:-1:-1;;;2980:564:46:o;3487:359:172:-;3565:16;3593:31;3627:16;3638:1;3641;3627:10;:16::i;:::-;3593:50;;3653:32;3688:16;3699:1;3702;3688:10;:16::i;:::-;3653:51;;3714:29;3746:15;3756:1;3759;3746:9;:15::i;:::-;3714:47;;3778:61;3785:14;3801:37;3808:12;3822:15;3801:6;:37::i;:::-;3778:6;:61::i;:::-;3771:68;;;;;3487:359;;;;;:::o;6973:483:85:-;7164:7;7235:20;7277:15;-1:-1:-1;;;;;7258:48:85;;:50;;;;;-1:-1:-1;;;7258:50:85;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7258:50:85;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7258:50:85;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;7258:50:85;;;;;;;;;7235:73;-1:-1:-1;7326:123:85;7348:40;:22;7235:73;7348:40;:26;:40;:::i;:::-;7402:37;:19;7426:12;7402:37;:23;:37;:::i;:::-;7326:8;:123::i;:::-;7319:130;6973:483;-1:-1:-1;;;;;6973:483:85:o;9861:754::-;10081:7;10167:20;10197:16;10253:47;10282:17;10253:9;:20;;;:28;;:47;;;;:::i;:::-;10223:77;;-1:-1:-1;10223:77:85;-1:-1:-1;10359:231:85;;;;10397:182;10435:9;:15;;;10451:12;10435:29;;;;;;;;;;;;;;10482:9;:21;;;10521:11;10550:15;10397:20;:182::i;:::-;10390:189;;;;;;10359:231;-1:-1:-1;10607:1:85;;9861:754;-1:-1:-1;;;;;;9861:754:85:o;1439:145:166:-;1497:7;1528:5;;;1551:6;;;;1543:15;;;;;782:296;840:7;937:1;933;:5;925:14;;;;;;949:9;965:1;961;:5;;;;;;;782:296;-1:-1:-1;;;;782:296:166:o;231:421::-;289:7;529:6;525:45;;-1:-1:-1;558:1:166;551:8;;525:45;592:5;;;596:1;592;:5;:1;615:5;;;;;:10;607:19;;;;;4060:781:172;4143:16;4171:14;4188:1;:8;4171:25;;4206:24;4244:6;4233:18;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4233:18:172;-1:-1:-1;4206:45:172;-1:-1:-1;4261:13:172;;4366:190;4390:6;4386:1;:10;4366:190;;;4417:9;4429:1;4431;4429:4;;;;;;;;;;;;;;4417:16;;4452:14;4461:1;4464;4452:8;:14::i;:::-;4447:99;;4502:4;4486:10;4497:1;4486:13;;;;;;;;:20;;;:13;;;;;;;;;;;:20;4524:7;;;;;4447:99;-1:-1:-1;4398:3:172;;4366:190;;;;4565:29;4611:5;4597:20;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4597:20:172;-1:-1:-1;4565:52:172;-1:-1:-1;4627:9:172;;4650:156;4674:6;4670:1;:10;4650:156;;;4705:10;4716:1;4705:13;;;;;;;;;;;;;;4701:95;;;4756:1;4758;4756:4;;;;;;;;;;;;;;4738:12;4751:1;4738:15;;;;;;;;-1:-1:-1;;;;;4738:22:172;;;:15;;;;;;;;;;;:22;4778:3;;;;;4701:95;4682:3;;4650:156;;;-1:-1:-1;4822:12:172;;4060:781;-1:-1:-1;;;;;;;4060:781:172:o;2602:686::-;2684:16;2712:14;2729:1;:8;2712:25;;2747:24;2785:6;2774:18;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;2774:18:172;-1:-1:-1;2747:45:172;-1:-1:-1;2802:17:172;;2833:166;2857:6;2853:1;:10;2833:166;;;2888:17;2897:1;2900;2902;2900:4;;;;;;;;;;;;;;2888:8;:17::i;:::-;2884:105;;;2941:4;2925:10;2936:1;2925:13;;;;;;;;:20;;;:13;;;;;;;;;;;:20;2963:11;;;;;2884:105;2865:3;;2833:166;;;;3008:29;3054:9;3040:24;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;3040:24:172;-1:-1:-1;3008:56:172;-1:-1:-1;3074:9:172;;3097:156;3121:6;3117:1;:10;3097:156;;;3152:10;3163:1;3152:13;;;;;;;;;;;;;;3148:95;;;3203:1;3205;3203:4;;;;;;;;;;;;;;3185:12;3198:1;3185:15;;;;;;;;-1:-1:-1;;;;;3185:22:172;;;:15;;;;;;;;;;;:22;3225:3;;;;;3148:95;3129:3;;3097:156;;1382:477;1461:16;1489:15;1507:1;:8;1489:26;;1525:15;1543:1;:8;1525:26;;1561:29;1617:7;1607;:17;1593:32;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;1593:32:172;-1:-1:-1;1561:64:172;-1:-1:-1;1640:9:172;1635:85;1659:7;1655:1;:11;1635:85;;;1705:1;1707;1705:4;;;;;;;;;;;;;;1687:12;1700:1;1687:15;;;;;;;;-1:-1:-1;;;;;1687:22:172;;;:15;;;;;;;;;;;:22;1668:3;;1635:85;;;-1:-1:-1;1734:9:172;1729:95;1753:7;1749:1;:11;1729:95;;;1809:1;1811;1809:4;;;;;;;;;;;;;;1781:12;1804:1;1794:7;:11;1781:25;;;;;;;;-1:-1:-1;;;;;1781:32:172;;;:25;;;;;;;;;;;:32;1762:3;;1729:95;;;-1:-1:-1;1840:12:172;1382:477;-1:-1:-1;;;;;1382:477:172:o;164:105:165:-;222:7;253:1;248;:6;;:14;;261:1;248:14;;;-1:-1:-1;257:1:165;;241:21;-1:-1:-1;164:105:165:o;509:289:172:-;622:8;;580:7;;;;;640:125;664:6;660:1;:10;640:125;;;703:1;-1:-1:-1;;;;;695:9:172;:1;697;695:4;;;;;;;;;;;;;;-1:-1:-1;;;;;695:9:172;;691:64;;;732:1;-1:-1:-1;735:4:172;;-1:-1:-1;724:16:172;;-1:-1:-1;724:16:172;691:64;672:3;;640:125;;;-1:-1:-1;782:1:172;;-1:-1:-1;782:1:172;;-1:-1:-1;;509:289:172;;;;;;:::o;12331:363:85:-;12516:7;12539:20;12581:15;-1:-1:-1;;;;;12562:48:85;;:50;;;;;-1:-1:-1;;;12562:50:85;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12562:50:85;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;12562:50:85;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;12562:50:85;;;;;;;;;12539:73;-1:-1:-1;12629:58:85;12539:73;12629:40;12656:12;12629:40;:11;12645:5;12629:22;:15;:22;:::i;:::-;:26;:40;:26;:40;:::i;:58::-;12622:65;12331:363;-1:-1:-1;;;;;;12331:363:85:o;1048:159:172:-;1120:4;1136:9;1166:13;1174:1;1177;1166:7;:13::i;1449:11247:85:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;130:122;;208:39;239:6;233:13;208:39;;277:699;;390:3;383:4;375:6;371:17;367:27;357:2;;408:1;405;398:12;357:2;445:6;432:20;467:76;482:60;535:6;482:60;;;467:76;;;458:85;;560:5;585:6;578:5;571:21;615:4;607:6;603:17;593:27;;637:4;632:3;628:14;621:21;;690:6;737:3;729:4;721:6;717:17;712:3;708:27;705:36;702:2;;;754:1;751;744:12;702:2;779:1;764:206;789:6;786:1;783:13;764:206;;;847:3;869:37;902:3;890:10;869:37;;;857:50;;-1:-1;930:4;921:14;;;;949;;;;;811:1;804:9;764:206;;;768:14;350:626;;;;;;;;1002:707;;1119:3;1112:4;1104:6;1100:17;1096:27;1086:2;;1137:1;1134;1127:12;1086:2;1174:6;1161:20;1196:80;1211:64;1268:6;1211:64;;1196:80;1187:89;;1293:5;1318:6;1311:5;1304:21;1348:4;1340:6;1336:17;1326:27;;1370:4;1365:3;1361:14;1354:21;;1423:6;1470:3;1462:4;1454:6;1450:17;1445:3;1441:27;1438:36;1435:2;;;1487:1;1484;1477:12;1435:2;1512:1;1497:206;1522:6;1519:1;1516:13;1497:206;;;1580:3;1602:37;1635:3;1623:10;1602:37;;;1590:50;;-1:-1;1663:4;1654:14;;;;1682;;;;;1544:1;1537:9;1497:206;;1735:722;;1863:3;1856:4;1848:6;1844:17;1840:27;1830:2;;1881:1;1878;1871:12;1830:2;1911:6;1905:13;1933:80;1948:64;2005:6;1948:64;;1933:80;1924:89;;2030:5;2055:6;2048:5;2041:21;2085:4;2077:6;2073:17;2063:27;;2107:4;2102:3;2098:14;2091:21;;2160:6;2207:3;2199:4;2191:6;2187:17;2182:3;2178:27;2175:36;2172:2;;;2224:1;2221;2214:12;2172:2;2249:1;2234:217;2259:6;2256:1;2253:13;2234:217;;;2317:3;2339:48;2383:3;2371:10;2339:48;;;2327:61;;-1:-1;2411:4;2402:14;;;;2430;;;;;2281:1;2274:9;2234:217;;2483:699;;2596:3;2589:4;2581:6;2577:17;2573:27;2563:2;;2614:1;2611;2604:12;2563:2;2651:6;2638:20;2673:76;2688:60;2741:6;2688:60;;2673:76;2664:85;;2766:5;2791:6;2784:5;2777:21;2821:4;2813:6;2809:17;2799:27;;2843:4;2838:3;2834:14;2827:21;;2896:6;2943:3;2935:4;2927:6;2923:17;2918:3;2914:27;2911:36;2908:2;;;2960:1;2957;2950:12;2908:2;2985:1;2970:206;2995:6;2992:1;2989:13;2970:206;;;3053:3;3075:37;3108:3;3096:10;3075:37;;;3063:50;;-1:-1;3136:4;3127:14;;;;3155;;;;;3017:1;3010:9;2970:206;;3208:722;;3336:3;3329:4;3321:6;3317:17;3313:27;3303:2;;3354:1;3351;3344:12;3303:2;3384:6;3378:13;3406:80;3421:64;3478:6;3421:64;;3406:80;3397:89;;3503:5;3528:6;3521:5;3514:21;3558:4;3550:6;3546:17;3536:27;;3580:4;3575:3;3571:14;3564:21;;3633:6;3680:3;3672:4;3664:6;3660:17;3655:3;3651:27;3648:36;3645:2;;;3697:1;3694;3687:12;3645:2;3722:1;3707:217;3732:6;3729:1;3726:13;3707:217;;;3790:3;3812:48;3856:3;3844:10;3812:48;;;3800:61;;-1:-1;3884:4;3875:14;;;;3903;;;;;3754:1;3747:9;3707:217;;3978:841;;4095:4;4083:9;4078:3;4074:19;4070:30;4067:2;;;4113:1;4110;4103:12;4067:2;4131:20;4146:4;4131:20;;;4122:29;-1:-1;4208:1;4239:49;4284:3;4264:9;4239:49;;;4215:74;;-1:-1;4384:2;4369:18;;4356:32;4408:18;4397:30;;4394:2;;;4440:1;4437;4430:12;4394:2;4475:70;4541:3;4532:6;4521:9;4517:22;4475:70;;;4468:4;4461:5;4457:16;4450:96;4310:247;4636:2;4625:9;4621:18;4608:32;4660:18;4652:6;4649:30;4646:2;;;4692:1;4689;4682:12;4646:2;4727:70;4793:3;4784:6;4773:9;4769:22;4727:70;;;4720:4;4713:5;4709:16;4702:96;4567:242;4061:758;;;;;4826:118;;4893:46;4931:6;4918:20;4893:46;;4951:122;;5029:39;5060:6;5054:13;5029:39;;5080:114;;5145:44;5181:6;5168:20;5145:44;;5201:491;;;;5339:2;5327:9;5318:7;5314:23;5310:32;5307:2;;;5355:1;5352;5345:12;5307:2;5390:1;5407:53;5452:7;5432:9;5407:53;;;5397:63;;5369:97;5497:2;5515:53;5560:7;5551:6;5540:9;5536:22;5515:53;;;5505:63;;5476:98;5605:2;5623:53;5668:7;5659:6;5648:9;5644:22;5623:53;;;5613:63;;5584:98;5301:391;;;;;;5699:743;;;;;;5871:3;5859:9;5850:7;5846:23;5842:33;5839:2;;;5888:1;5885;5878:12;5839:2;5923:1;5940:53;5985:7;5965:9;5940:53;;;5930:63;;5902:97;6030:2;6048:53;6093:7;6084:6;6073:9;6069:22;6048:53;;;6038:63;;6009:98;6138:2;6156:53;6201:7;6192:6;6181:9;6177:22;6156:53;;;6146:63;;6117:98;6246:2;6264:53;6309:7;6300:6;6289:9;6285:22;6264:53;;;6254:63;;6225:98;6354:3;6373:53;6418:7;6409:6;6398:9;6394:22;6373:53;;;6363:63;;6333:99;5833:609;;;;;;;;;6449:617;;;;;6604:3;6592:9;6583:7;6579:23;6575:33;6572:2;;;6621:1;6618;6611:12;6572:2;6656:1;6673:53;6718:7;6698:9;6673:53;;;6663:63;;6635:97;6763:2;6781:53;6826:7;6817:6;6806:9;6802:22;6781:53;;;6771:63;;6742:98;6871:2;6889:53;6934:7;6925:6;6914:9;6910:22;6889:53;;;6879:63;;6850:98;6979:2;6997:53;7042:7;7033:6;7022:9;7018:22;6997:53;;;6987:63;;6958:98;6566:500;;;;;;;;7073:392;;7213:2;7201:9;7192:7;7188:23;7184:32;7181:2;;;7229:1;7226;7219:12;7181:2;7264:24;;7308:18;7297:30;;7294:2;;;7340:1;7337;7330:12;7294:2;7360:89;7441:7;7432:6;7421:9;7417:22;7360:89;;7472:392;;7612:2;7600:9;7591:7;7587:23;7583:32;7580:2;;;7628:1;7625;7618:12;7580:2;7663:24;;7707:18;7696:30;;7693:2;;;7739:1;7736;7729:12;7693:2;7759:89;7840:7;7831:6;7820:9;7816:22;7759:89;;7871:1163;;;;;;8124:3;8112:9;8103:7;8099:23;8095:33;8092:2;;;8141:1;8138;8131:12;8092:2;8176:31;;8227:18;8216:30;;8213:2;;;8259:1;8256;8249:12;8213:2;8279:81;8352:7;8343:6;8332:9;8328:22;8279:81;;;8269:91;;8155:211;8425:2;8414:9;8410:18;8397:32;8449:18;8441:6;8438:30;8435:2;;;8481:1;8478;8471:12;8435:2;8501:81;8574:7;8565:6;8554:9;8550:22;8501:81;;;8491:91;;8376:212;8619:2;8637:53;8682:7;8673:6;8662:9;8658:22;8637:53;;;8627:63;;8598:98;8727:2;8745:53;8790:7;8781:6;8770:9;8766:22;8745:53;;;8735:63;;8706:98;8863:3;8852:9;8848:19;8835:33;8888:18;8880:6;8877:30;8874:2;;;8920:1;8917;8910:12;8874:2;8940:78;9010:7;9001:6;8990:9;8986:22;8940:78;;9041:263;;9156:2;9144:9;9135:7;9131:23;9127:32;9124:2;;;9172:1;9169;9162:12;9124:2;9207:1;9224:64;9280:7;9260:9;9224:64;;9311:487;;;;9447:2;9435:9;9426:7;9422:23;9418:32;9415:2;;;9463:1;9460;9453:12;9415:2;9498:1;9515:53;9560:7;9540:9;9515:53;;;9505:63;;9477:97;9605:2;9623:53;9668:7;9659:6;9648:9;9644:22;9623:53;;;9613:63;;9584:98;9713:2;9731:51;9774:7;9765:6;9754:9;9750:22;9731:51;;9806:189;;9901:54;9951:3;9943:6;9901:54;;;-1:-1;;9984:4;9975:14;;9894:101;10004:189;;10099:54;10149:3;10141:6;10099:54;;10201:120;10284:31;10309:5;10284:31;;;10279:3;10272:44;10266:55;;;10484:609;;10623:50;10667:5;10623:50;;;10686:84;10763:6;10758:3;10686:84;;;10679:91;;10790:52;10836:5;10790:52;;;10863:1;10848:223;10873:6;10870:1;10867:13;10848:223;;;10920:71;10987:3;10978:6;10972:13;10920:71;;;10913:78;;11008:56;11057:6;11008:56;;;10998:66;-1:-1;10895:1;10888:9;10848:223;;;-1:-1;11084:3;;10602:491;-1:-1;;;;10602:491;11132:645;;11285:54;11333:5;11285:54;;;11352:94;11439:6;11434:3;11352:94;;;11345:101;;11466:56;11516:5;11466:56;;;11543:1;11528:227;11553:6;11550:1;11547:13;11528:227;;;11600:71;11667:3;11658:6;11652:13;11600:71;;;11593:78;;11688:60;11741:6;11688:60;;;11678:70;-1:-1;11575:1;11568:9;11528:227;;11816:609;;11955:50;11999:5;11955:50;;;12018:84;12095:6;12090:3;12018:84;;;12011:91;;12122:52;12168:5;12122:52;;;12195:1;12180:223;12205:6;12202:1;12199:13;12180:223;;;12252:71;12319:3;12310:6;12304:13;12252:71;;;12245:78;;12340:56;12389:6;12340:56;;;12330:66;-1:-1;12227:1;12220:9;12180:223;;12434:566;;12594:67;12658:2;12653:3;12594:67;;;12694:66;12674:87;;12795:66;12790:2;12781:12;;12774:88;12896:66;12891:2;12882:12;;12875:88;12991:2;12982:12;;12580:420;-1:-1;;12580:420;13009:566;;13169:67;13233:2;13228:3;13169:67;;;13269:66;13249:87;;13370:66;13365:2;13356:12;;13349:88;13471:66;13466:2;13457:12;;13450:88;13566:2;13557:12;;13155:420;-1:-1;;13155:420;13584:566;;13744:67;13808:2;13803:3;13744:67;;;13844:66;13824:87;;13945:66;13940:2;13931:12;;13924:88;14046:66;14041:2;14032:12;;14025:88;14141:2;14132:12;;13730:420;-1:-1;;13730:420;14255:1387;14505:22;;14255:1387;;14434:4;14425:14;;;14533:69;14429:3;14505:22;14533:69;;;14454:154;14696:4;14689:5;14685:16;14679:23;14708:70;14772:4;14767:3;14763:14;14750:11;14708:70;;;14618:166;14872:4;14865:5;14861:16;14855:23;14924:3;14918:4;14914:14;14907:4;14902:3;14898:14;14891:38;14944:106;15045:4;15032:11;14944:106;;;14936:114;;14794:268;15150:4;15143:5;15139:16;15133:23;15202:3;15196:4;15192:14;15185:4;15180:3;15176:14;15169:38;15222:106;15323:4;15310:11;15222:106;;;15214:114;;15072:268;15426:4;15419:5;15415:16;15409:23;15478:3;15472:4;15468:14;15461:4;15456:3;15452:14;15445:38;15498:106;15599:4;15586:11;15498:106;;15649:120;15732:31;15757:5;15732:31;;16036:324;16182:2;16167:18;;16196:71;16171:9;16240:6;16196:71;;;16278:72;16346:2;16335:9;16331:18;16322:6;16278:72;;16367:324;16513:2;16498:18;;16527:71;16502:9;16571:6;16527:71;;;16609:72;16677:2;16666:9;16662:18;16653:6;16609:72;;16698:644;16952:2;16966:47;;;16937:18;;17027:116;16937:18;17129:6;17027:116;;;17019:124;;17191:9;17185:4;17181:20;17176:2;17165:9;17161:18;17154:48;17216:116;17327:4;17318:6;17216:116;;17349:407;17540:2;17554:47;;;17525:18;;17615:131;17525:18;17615:131;;17763:407;17954:2;17968:47;;;17939:18;;18029:131;17939:18;18029:131;;18177:407;18368:2;18382:47;;;18353:18;;18443:131;18353:18;18443:131;;18591:417;18787:2;18801:47;;;18772:18;;18862:136;18772:18;18984:6;18862:136;;19015:229;19141:2;19126:18;;19155:79;19130:9;19207:6;19155:79;;19251:256;19313:2;19307:9;19339:17;;;19414:18;19399:34;;19435:22;;;19396:62;19393:2;;;19471:1;19468;19461:12;19393:2;19487;19480:22;19291:216;;-1:-1;19291:216;19514:254;;19669:18;19661:6;19658:30;19655:2;;;19701:1;19698;19691:12;19655:2;-1:-1;19730:4;19718:17;;;19748:15;;19592:176;20568:117;20673:4;20661:17;;20642:43;20954:103;21040:12;;21024:33;21674:176;21790:19;;;21839:4;21830:14;;21783:67;22410:105;;-1:-1;;;;;22591:54;;22479:31;22574:76;22657:79;22726:5;22709:27;23076:88;23154:4;23143:16;;23126:38",
source:'/*\n    Copyright 2018 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\npragma solidity 0.5.7;\npragma experimental "ABIEncoderV2";\n\nimport { Math } from "openzeppelin-solidity/contracts/math/Math.sol";\nimport { SafeMath } from "openzeppelin-solidity/contracts/math/SafeMath.sol";\nimport { AddressArrayUtils } from "set-protocol-contract-utils/contracts/lib/AddressArrayUtils.sol";\n\nimport { IAuctionPriceCurve } from "../../lib/auction-price-libraries/IAuctionPriceCurve.sol";\nimport { ICore } from "../../interfaces/ICore.sol";\nimport { ISetToken } from "../../interfaces/ISetToken.sol";\nimport { IVault } from "../../interfaces/IVault.sol";\nimport { RebalancingLibrary } from "../../lib/RebalancingLibrary.sol";\nimport { SetTokenLibrary } from "../../lib/SetTokenLibrary.sol";\n\n/**\n * @title StartRebalanceLibrary\n * @author Set Protocol\n *\n * Default implementation of Rebalancing Set Token startRebalance function\n */\n\n\nlibrary StartRebalanceLibrary {\n    using SafeMath for uint256;\n    using AddressArrayUtils for address[];\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * Function used to validate time passed to start a rebalance\n     *\n     * @param _proposalStartTime    Start time of proposal period\n     * @param _proposalPeriod       Required length of proposal period\n     * @param _rebalanceState       State rebalancing set token is in\n     */\n    function validateStartRebalance(\n        uint256 _proposalStartTime,\n        uint256 _proposalPeriod,\n        uint8 _rebalanceState\n    )\n        external\n    {\n        // Must be in "Proposal" state before going into "Rebalance" state\n        require(\n            _rebalanceState == uint8(RebalancingLibrary.State.Proposal),\n            "RebalancingSetToken.validateStartRebalance: State must be Proposal"\n        );\n\n        // Be sure the full proposal period has elapsed\n        require(\n            block.timestamp >= _proposalStartTime.add(_proposalPeriod),\n            "RebalancingSetToken.validateStartRebalance: Proposal period not elapsed"\n        );\n    }\n\n    /**\n     * Function used to validate inputs to propose function and initialize biddingParameters struct\n     *\n     * @param _currentSet           Address of current Set\n     * @param _nextSet              Address of next Set\n     * @param _auctionLibrary       Address of auction library being used in rebalance\n     * @param _coreAddress          Core address\n     * @param _vaultAddress         Vault address\n     * @return                      Struct containing bidding parameters\n     */\n    function redeemCurrentSetAndGetBiddingParameters(\n        address _currentSet,\n        address _nextSet,\n        address _auctionLibrary,\n        address _coreAddress,\n        address _vaultAddress\n    )\n        public\n        returns (RebalancingLibrary.BiddingParameters memory)\n    {\n        // Redeem rounded quantity of current Sets and return redeemed amount of Sets\n        uint256 remainingCurrentSets = redeemCurrentSet(\n            _currentSet,\n            _coreAddress,\n            _vaultAddress\n        );\n\n        // Create combined array data structures and calculate minimum bid needed for auction\n        RebalancingLibrary.BiddingParameters memory biddingParameters = setUpBiddingParameters(\n            _currentSet,\n            _nextSet,\n            _auctionLibrary,\n            remainingCurrentSets\n        );\n\n        return biddingParameters;\n    }\n\n    /**\n     * Create struct that holds array representing all components in currentSet and nextSet.\n     * Calcualate unit difference between both sets relative to the largest natural\n     * unit of the two sets. Calculate minimumBid.\n     *\n     * @param _currentSet           Address of current Set\n     * @param _nextSet              Address of next Set\n     * @param _auctionLibrary       Address of auction library being used in rebalance\n     * @param _remainingCurrentSets Quantity of Current Sets redeemed\n     * @return                      Struct containing bidding parameters\n     */\n    function setUpBiddingParameters(\n        address _currentSet,\n        address _nextSet,\n        address _auctionLibrary,\n        uint256 _remainingCurrentSets\n    )\n        public\n        returns (RebalancingLibrary.BiddingParameters memory)\n    {\n        // Get set details for currentSet and nextSet (units, components, natural units)\n        SetTokenLibrary.SetDetails memory currentSet = SetTokenLibrary.getSetDetails(_currentSet);\n        SetTokenLibrary.SetDetails memory nextSet = SetTokenLibrary.getSetDetails(_nextSet);\n\n        // Create combinedTokenArray\n        address[] memory combinedTokenArray = currentSet.components.union(\n            nextSet.components\n        );\n\n        // Calcualate minimumBid\n        uint256 minimumBid = calculateMinimumBid(\n            currentSet.naturalUnit,\n            nextSet.naturalUnit,\n            _auctionLibrary\n        );\n\n        // Require remainingCurrentSets to be greater than minimumBid otherwise no bidding would\n        // be allowed\n        require(\n            _remainingCurrentSets >= minimumBid,\n            "RebalancingSetToken.setUpBiddingParameters: Not enough collateral to rebalance"\n        );\n\n        // Create memory version of combinedNextSetUnits and combinedCurrentUnits to only make one\n        // call to storage once arrays have been created\n        uint256[] memory combinedCurrentUnits;\n        uint256[] memory combinedNextSetUnits;\n        (\n            combinedCurrentUnits,\n            combinedNextSetUnits\n        ) = calculateCombinedUnitArrays(\n            currentSet,\n            nextSet,\n            minimumBid,\n            _auctionLibrary,\n            combinedTokenArray\n        );\n\n        // Build Bidding Parameters struct and return\n        return RebalancingLibrary.BiddingParameters({\n            minimumBid: minimumBid,\n            remainingCurrentSets: _remainingCurrentSets,\n            combinedCurrentUnits: combinedCurrentUnits,\n            combinedNextSetUnits: combinedNextSetUnits,\n            combinedTokenArray: combinedTokenArray\n        });\n    }\n\n    /**\n     * Calculate the minimumBid allowed for the rebalance\n     *\n     * @param _currentSetNaturalUnit    Natural unit of currentSet\n     * @param _nextSetNaturalUnit       Natural of nextSet\n     * @param _auctionLibrary           Address of auction library being used in rebalance\n     * @return                          Minimum bid amount\n     */\n    function calculateMinimumBid(\n        uint256 _currentSetNaturalUnit,\n        uint256 _nextSetNaturalUnit,\n        address _auctionLibrary\n    )\n        private\n        view\n        returns (uint256)\n    {\n        // Get priceDivisor from auctionLibrary\n        uint256 priceDivisor = IAuctionPriceCurve(_auctionLibrary).priceDivisor();\n\n        return Math.max(\n            _currentSetNaturalUnit.mul(priceDivisor),\n            _nextSetNaturalUnit.mul(priceDivisor)\n        );\n    }\n\n    /**\n     * Create arrays that represent all components in currentSet and nextSet.\n     * Calcualate unit difference between both sets relative to the largest natural\n     * unit of the two sets.\n     *\n     * @param _currentSet               Information on currentSet\n     * @param _nextSet                  Information on nextSet\n     * @param _minimumBid               Minimum bid amount\n     * @param _auctionLibrary           Address of auction library being used in rebalance\n     * @param _combinedTokenArray       Array of component tokens involved in rebalance\n     * @return                          Unit inflow/outflow arrays for current and next Set\n     */\n    function calculateCombinedUnitArrays(\n        SetTokenLibrary.SetDetails memory _currentSet,\n        SetTokenLibrary.SetDetails memory _nextSet,\n        uint256 _minimumBid,\n        address _auctionLibrary,\n        address[] memory _combinedTokenArray\n    )\n        public\n        returns (uint256[] memory, uint256[] memory)\n    {\n        // Create memory version of combinedNextSetUnits and combinedCurrentUnits to only make one\n        // call to storage once arrays have been created\n        uint256[] memory memoryCombinedCurrentUnits = new uint256[](_combinedTokenArray.length);\n        uint256[] memory memoryCombinedNextSetUnits = new uint256[](_combinedTokenArray.length);\n\n        for (uint256 i = 0; i < _combinedTokenArray.length; i++) {\n            memoryCombinedCurrentUnits[i] = calculateCombinedUnit(\n                _currentSet,\n                _minimumBid,\n                _auctionLibrary,\n                _combinedTokenArray[i]\n            );\n\n            memoryCombinedNextSetUnits[i] = calculateCombinedUnit(\n                _nextSet,\n                _minimumBid,\n                _auctionLibrary,\n                _combinedTokenArray[i]\n            );\n        }\n\n        return (memoryCombinedCurrentUnits, memoryCombinedNextSetUnits);\n    }\n\n    /**\n     * Calculations the unit amount of Token to include in the the combined Set units.\n     *\n     * @param _setToken                 Information on the SetToken\n     * @param _minimumBid               Minimum bid amount\n     * @param _auctionLibrary           Address of auction library being used in rebalance\n     * @param _currentComponent         Current component in iteration\n     * @return                          Unit inflow/outflow\n     */\n    function calculateCombinedUnit(\n        SetTokenLibrary.SetDetails memory _setToken,\n        uint256 _minimumBid,\n        address _auctionLibrary,\n        address _currentComponent\n    )\n        private\n        returns (uint256)\n    {\n        // Check if component in arrays and get index if it is\n        uint256 indexCurrent;\n        bool isComponent;\n        (indexCurrent, isComponent) = _setToken.components.indexOf(_currentComponent);\n\n        // Compute unit amounts of token in Set\n        if (isComponent) {\n            return computeTransferValue(\n                _setToken.units[indexCurrent],\n                _setToken.naturalUnit,\n                _minimumBid,\n                _auctionLibrary\n            );\n        }\n\n        return 0;\n    }\n\n    /**\n     * Calculates the maximum redemption quantity and redeems the Set into the vault.\n     * Also updates remainingCurrentSets state variable\n     *\n     * @param _currentSet           Address of current Set\n     * @param _coreAddress          Core address\n     * @param _vaultAddress         Vault address\n     * @return                      Amount of currentSets remaining\n     */\n    function redeemCurrentSet(\n        address _currentSet,\n        address _coreAddress,\n        address _vaultAddress\n    )\n        public\n        returns (uint256)\n    {\n        // Get remainingCurrentSets and make it divisible by currentSet natural unit\n        uint256 currentSetBalance = IVault(_vaultAddress).getOwnerBalance(\n            _currentSet,\n            address(this)\n        );\n\n        // Calculates the set\'s natural unit\n        uint256 currentSetNaturalUnit = ISetToken(_currentSet).naturalUnit();\n\n        // Rounds the redemption quantity to a multiple of the current Set natural unit and sets variable\n        uint256 remainingCurrentSets = currentSetBalance.div(currentSetNaturalUnit).mul(currentSetNaturalUnit);\n\n        ICore(_coreAddress).redeemInVault(\n            _currentSet,\n            remainingCurrentSets\n        );\n\n        return remainingCurrentSets;\n    }\n\n   /**\n     * Function to calculate the transfer value of a component given a standardized bid amount\n     * (minimumBid/priceDivisor)\n     *\n     * @param   _unit           Units of the component token\n     * @param   _naturalUnit    Natural unit of the Set token\n     * @param   _minimumBid     Minimum bid amount\n     * @return  uint256         Amount of tokens per standard bid amount (minimumBid/priceDivisor)\n     */\n    function computeTransferValue(\n        uint256 _unit,\n        uint256 _naturalUnit,\n        uint256 _minimumBid,\n        address _auctionLibrary\n    )\n        internal\n        returns (uint256)\n    {\n        uint256 priceDivisor = IAuctionPriceCurve(_auctionLibrary).priceDivisor();\n        return _minimumBid.mul(_unit).div(_naturalUnit).div(priceDivisor);\n    }\n}\n',sourcePath:"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/tokens/rebalancing-libraries/StartRebalanceLibrary.sol",compiler:{name:"solc",version:"0.5.7+commit.6da8b019.Linux.g++"},networks:{},schemaVersion:"3.0.23",updatedAt:"2020-05-05T17:13:36.920Z",devdoc:{author:"Set Protocol * Default implementation of Rebalancing Set Token startRebalance function",methods:{"calculateCombinedUnitArrays(SetTokenLibrary.SetDetails,SetTokenLibrary.SetDetails,uint256,address,address[])":{params:{_auctionLibrary:"Address of auction library being used in rebalance",_combinedTokenArray:"Array of component tokens involved in rebalance",_currentSet:"Information on currentSet",_minimumBid:"Minimum bid amount",_nextSet:"Information on nextSet"},"return":"Unit inflow/outflow arrays for current and next Set"},"redeemCurrentSet(address,address,address)":{params:{_coreAddress:"Core address",_currentSet:"Address of current Set",_vaultAddress:"Vault address"},"return":"Amount of currentSets remaining"},"redeemCurrentSetAndGetBiddingParameters(address,address,address,address,address)":{params:{_auctionLibrary:"Address of auction library being used in rebalance",_coreAddress:"Core address",_currentSet:"Address of current Set",_nextSet:"Address of next Set",_vaultAddress:"Vault address"},"return":"Struct containing bidding parameters"},"setUpBiddingParameters(address,address,address,uint256)":{params:{_auctionLibrary:"Address of auction library being used in rebalance",_currentSet:"Address of current Set",_nextSet:"Address of next Set",_remainingCurrentSets:"Quantity of Current Sets redeemed"},"return":"Struct containing bidding parameters"},"validateStartRebalance(uint256,uint256,uint8)":{params:{_proposalPeriod:"Required length of proposal period",_proposalStartTime:"Start time of proposal period",_rebalanceState:"State rebalancing set token is in"}}},title:"StartRebalanceLibrary"},userdoc:{methods:{"calculateCombinedUnitArrays(SetTokenLibrary.SetDetails,SetTokenLibrary.SetDetails,uint256,address,address[])":{notice:"Create arrays that represent all components in currentSet and nextSet. Calcualate unit difference between both sets relative to the largest natural unit of the two sets."},"redeemCurrentSet(address,address,address)":{notice:"Calculates the maximum redemption quantity and redeems the Set into the vault. Also updates remainingCurrentSets state variable"},"redeemCurrentSetAndGetBiddingParameters(address,address,address,address,address)":{notice:"Function used to validate inputs to propose function and initialize biddingParameters struct"},"setUpBiddingParameters(address,address,address,uint256)":{notice:"Create struct that holds array representing all components in currentSet and nextSet. Calcualate unit difference between both sets relative to the largest natural unit of the two sets. Calculate minimumBid."},"validateStartRebalance(uint256,uint256,uint8)":{notice:"Function used to validate time passed to start a rebalance"}}}};