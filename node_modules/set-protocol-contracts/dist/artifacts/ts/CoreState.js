"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.CoreState={contractName:"CoreState",abi:[{constant:true,inputs:[],name:"state",outputs:[{name:"operationState",type:"uint8"},{name:"transferProxy",type:"address"},{name:"vault",type:"address"},{name:"transferProxyInstance",type:"address"},{name:"vaultInstance",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"operationState",outputs:[{name:"",type:"uint8"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_exchangeId",type:"uint8"}],name:"exchangeIds",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"transferProxy",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"vault",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_factory",type:"address"}],name:"validFactories",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_module",type:"address"}],name:"validModules",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_set",type:"address"}],name:"validSets",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_set",type:"address"}],name:"disabledSets",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_priceLibrary",type:"address"}],name:"validPriceLibraries",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"setTokens",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"modules",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"factories",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"exchanges",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"priceLibraries",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"}],metadata:'{"compiler":{"version":"0.5.7+commit.6da8b019"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"name":"_factory","type":"address"}],"name":"validFactories","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"exchanges","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"setTokens","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_exchangeId","type":"uint8"}],"name":"exchangeIds","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_module","type":"address"}],"name":"validModules","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"transferProxy","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"operationState","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_priceLibrary","type":"address"}],"name":"validPriceLibraries","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"state","outputs":[{"name":"operationState","type":"uint8"},{"name":"transferProxy","type":"address"},{"name":"vault","type":"address"},{"name":"transferProxyInstance","type":"address"},{"name":"vaultInstance","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"priceLibraries","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_set","type":"address"}],"name":"disabledSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"modules","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"vault","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"factories","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_set","type":"address"}],"name":"validSets","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"}],"devdoc":{"author":"Set Protocol * The CoreState library maintains all state for the Core contract thus allowing it to operate across multiple mixins.","methods":{"disabledSets(address)":{"params":{"_set":"Set address"},"return":"bool           Boolean indicating if is a disabled Set"},"exchangeIds(uint8)":{"params":{"_exchangeId":"ExchangeId number"},"return":"address           Address belonging to given exchangeId"},"exchanges()":{"return":"address[]      Array of valid exchange wrappers"},"factories()":{"return":"address[]      Array of valid factories"},"modules()":{"return":"address[]      Array of valid modules"},"operationState()":{"return":"uint8           Uint8 representing the operational state of the protocol"},"priceLibraries()":{"return":"address[]      Array of valid price libraries"},"setTokens()":{"return":"address[]      Array of valid Set Tokens"},"transferProxy()":{"return":"address       transferProxy address"},"validFactories(address)":{"params":{"_factory":"Factory address"},"return":"bool           Boolean indicating if enabled factory"},"validModules(address)":{"params":{"_module":"Factory address"},"return":"bool           Boolean indicating if enabled factory"},"validPriceLibraries(address)":{"params":{"_priceLibrary":"Price library address"},"return":"bool             Boolean indicating if valid Price Library"},"validSets(address)":{"params":{"_set":"Set address"},"return":"bool           Boolean indicating if valid Set"},"vault()":{"return":"address        vault address"}},"title":"CoreState"},"userdoc":{"methods":{"disabledSets(address)":{"notice":"Return boolean indicating if address is a disabled Set."},"exchangeIds(uint8)":{"notice":"Return address belonging to given exchangeId."},"exchanges()":{"notice":"Return array of all valid exchange wrappers."},"factories()":{"notice":"Return array of all valid factories."},"modules()":{"notice":"Return array of all valid Modules."},"operationState()":{"notice":"Return uint8 representing the operational state of the protocol"},"priceLibraries()":{"notice":"Return array of all valid price libraries."},"setTokens()":{"notice":"Return array of all valid Set Tokens."},"transferProxy()":{"notice":"Return transferProxy address."},"validFactories(address)":{"notice":"Return boolean indicating if address is valid factory."},"validModules(address)":{"notice":"Return boolean indicating if address is valid module."},"validPriceLibraries(address)":{"notice":"Return boolean indicating if address is a valid Rebalancing Price Library."},"validSets(address)":{"notice":"Return boolean indicating if address is valid Set."},"vault()":{"notice":"Return vault address"}}}},"settings":{"compilationTarget":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/lib/CoreState.sol":"CoreState"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/ITransferProxy.sol":{"keccak256":"0x962d54385cc4760c550cd2f16bfdb53e967def4c5d3acb7b3d0b3d7a49f902de","urls":["bzzr://cb8994c8bae7fa1d55d240f44396f4156b45c81afa6fcfa608fd5e4bf9f1a919"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/IVault.sol":{"keccak256":"0xf8a6d376173be39f5744492866db5dd3f91453a124d23679ff164ff3817f2f4f","urls":["bzzr://896c0a8329175c1620e1a22467778b835defe0e61847e5a8427a306f42391e64"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/lib/CoreState.sol":{"keccak256":"0xc0aa403578d64be9f30fb2299cedcf4cc5e047bfe07cff4e70206948620b7c71","urls":["bzzr://2ba47997b0ad3048d6de0562193df392a53e6c3b2bcaccd041a00bc02327fa9f"]}},"version":1}',bytecode:"0x608060405234801561001057600080fd5b50610639806100206000396000f3fe608060405234801561001057600080fd5b5060043610610112576000357c010000000000000000000000000000000000000000000000000000000090048063a2c9eb6d116100b4578063f7e80e9811610083578063f7e80e98146102d2578063fbfa77cf146102da578063fe5b38e4146102e2578063fef3ee73146102ea57610112565b8063a2c9eb6d14610239578063c19d93fb1461025f578063d0312561146102a4578063d913d4e1146102ac57610112565b806356fe2784116100f057806356fe2784146101b15780635e633498146101ed5780636e667db31461021357806372bedcee1461021b57610112565b80630e4355d41461011757806321a8c17714610151578063559ed339146101a9575b600080fd5b61013d6004803603602081101561012d57600080fd5b5035600160a060020a0316610310565b604080519115158252519081900360200190f35b61015961032e565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561019557818101518382015260200161017d565b505050509050019250505060405180910390f35b610159610393565b6101d1600480360360208110156101c757600080fd5b503560ff166103f6565b60408051600160a060020a039092168252519081900360200190f35b61013d6004803603602081101561020357600080fd5b5035600160a060020a0316610414565b6101d1610432565b610223610446565b6040805160ff9092168252519081900360200190f35b61013d6004803603602081101561024f57600080fd5b5035600160a060020a031661044f565b61026761046d565b6040805160ff9096168652600160a060020a0394851660208701529284168584015290831660608501529091166080830152519081900360a00190f35b610159610499565b61013d600480360360208110156102c257600080fd5b5035600160a060020a03166104fc565b61015961051a565b6101d161057d565b61015961058c565b61013d6004803603602081101561030057600080fd5b5035600160a060020a03166105ef565b600160a060020a031660009081526006602052604090205460ff1690565b60606000600d0180548060200260200160405190810160405280929190818152602001828054801561038957602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161036b575b5050505050905090565b60606000600a0180548060200260200160405190810160405280929190818152602001828054801561038957602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161036b575050505050905090565b60ff16600090815260046020526040902054600160a060020a031690565b600160a060020a031660009081526005602052604090205460ff1690565b6000546101009004600160a060020a031690565b60005460ff1690565b600160a060020a031660009081526007602052604090205460ff1690565b60005460015460025460035460ff841693600160a060020a036101009091048116938116928116911685565b60606000600e0180548060200260200160405190810160405280929190818152602001828054801561038957602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161036b575050505050905090565b600160a060020a031660009081526009602052604090205460ff1690565b60606000600b0180548060200260200160405190810160405280929190818152602001828054801561038957602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161036b575050505050905090565b600154600160a060020a031690565b60606000600c0180548060200260200160405190810160405280929190818152602001828054801561038957602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161036b575050505050905090565b600160a060020a031660009081526008602052604090205460ff169056fea165627a7a723058202b404d9cb15fc4e59eefd630672b3de0b875dc6f4b437da84e47a40cf1391d330029",deployedBytecode:"0x608060405234801561001057600080fd5b5060043610610112576000357c010000000000000000000000000000000000000000000000000000000090048063a2c9eb6d116100b4578063f7e80e9811610083578063f7e80e98146102d2578063fbfa77cf146102da578063fe5b38e4146102e2578063fef3ee73146102ea57610112565b8063a2c9eb6d14610239578063c19d93fb1461025f578063d0312561146102a4578063d913d4e1146102ac57610112565b806356fe2784116100f057806356fe2784146101b15780635e633498146101ed5780636e667db31461021357806372bedcee1461021b57610112565b80630e4355d41461011757806321a8c17714610151578063559ed339146101a9575b600080fd5b61013d6004803603602081101561012d57600080fd5b5035600160a060020a0316610310565b604080519115158252519081900360200190f35b61015961032e565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561019557818101518382015260200161017d565b505050509050019250505060405180910390f35b610159610393565b6101d1600480360360208110156101c757600080fd5b503560ff166103f6565b60408051600160a060020a039092168252519081900360200190f35b61013d6004803603602081101561020357600080fd5b5035600160a060020a0316610414565b6101d1610432565b610223610446565b6040805160ff9092168252519081900360200190f35b61013d6004803603602081101561024f57600080fd5b5035600160a060020a031661044f565b61026761046d565b6040805160ff9096168652600160a060020a0394851660208701529284168584015290831660608501529091166080830152519081900360a00190f35b610159610499565b61013d600480360360208110156102c257600080fd5b5035600160a060020a03166104fc565b61015961051a565b6101d161057d565b61015961058c565b61013d6004803603602081101561030057600080fd5b5035600160a060020a03166105ef565b600160a060020a031660009081526006602052604090205460ff1690565b60606000600d0180548060200260200160405190810160405280929190818152602001828054801561038957602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161036b575b5050505050905090565b60606000600a0180548060200260200160405190810160405280929190818152602001828054801561038957602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161036b575050505050905090565b60ff16600090815260046020526040902054600160a060020a031690565b600160a060020a031660009081526005602052604090205460ff1690565b6000546101009004600160a060020a031690565b60005460ff1690565b600160a060020a031660009081526007602052604090205460ff1690565b60005460015460025460035460ff841693600160a060020a036101009091048116938116928116911685565b60606000600e0180548060200260200160405190810160405280929190818152602001828054801561038957602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161036b575050505050905090565b600160a060020a031660009081526009602052604090205460ff1690565b60606000600b0180548060200260200160405190810160405280929190818152602001828054801561038957602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161036b575050505050905090565b600154600160a060020a031690565b60606000600c0180548060200260200160405190810160405280929190818152602001828054801561038957602002820191906000526020600020908154600160a060020a0316815260019091019060200180831161036b575050505050905090565b600160a060020a031660009081526008602052604090205460ff169056fea165627a7a723058202b404d9cb15fc4e59eefd630672b3de0b875dc6f4b437da84e47a40cf1391d330029",sourceMap:"918:5871:39:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;918:5871:39;;;;;;;",deployedSourceMap:"918:5871:39:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;918:5871:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3813:167;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3813:167:39;-1:-1:-1;;;;;3813:167:39;;:::i;:::-;;;;;;;;;;;;;;;;;;6379:129;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;6379:129:39;;;;;;;;;;;;;;;;;5600;;;:::i;2982:168::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2982:168:39;;;;:::i;:::-;;;;-1:-1:-1;;;;;2982:168:39;;;;;;;;;;;;;;4184:161;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4184:161:39;-1:-1:-1;;;;;4184:161:39;;:::i;3267:128::-;;;:::i;2650:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5283:187;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5283:187:39;-1:-1:-1;;;;;5283:187:39;;:::i;2391:18::-;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;;;;2391:18:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6648:139;;;:::i;4889:155::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4889:155:39;-1:-1:-1;;;;;4889:155:39;;:::i;5853:125::-;;;:::i;3496:112::-;;;:::i;6106:129::-;;;:::i;4536:149::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4536:149:39;-1:-1:-1;;;;;4536:149:39;;:::i;3813:167::-;-1:-1:-1;;;;;3943:30:39;3916:4;3943:30;;;:20;:30;;;;;;;;;3813:167::o;6379:129::-;6447:16;6486:5;:15;;6479:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6479:22:39;;;;;;;;;;;;;;;;;;;;;;;6379:129;:::o;5600:::-;5668:16;5707:5;:15;;5700:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5700:22:39;;;;;;;;;;;;;;;;;;;;;;5600:129;:::o;2982:168::-;3113:30;;3083:7;3113:30;;;:17;:30;;;;;;-1:-1:-1;;;;;3113:30:39;;2982:168::o;4184:161::-;-1:-1:-1;;;;;4311:27:39;4284:4;4311:27;;;:18;:27;;;;;;;;;4184:161::o;3267:128::-;3339:7;3369:19;;;;-1:-1:-1;;;;;3369:19:39;;3267:128::o;2650:::-;2723:5;2751:20;;;2650:128;:::o;5283:187::-;-1:-1:-1;;;;;5423:40:39;5396:4;5423:40;;;:25;:40;;;;;;;;;5283:187::o;2391:18::-;;;;;;;;;;;;;-1:-1:-1;;;;;2391:18:39;;;;;;;;;;;;;;;:::o;6648:139::-;6721:16;6760:5;:20;;6753:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6753:27:39;;;;;;;;;;;;;;;;;;;;;;6648:139;:::o;4889:155::-;-1:-1:-1;;;;;5013:24:39;4986:4;5013:24;;;:18;:24;;;;;;;;;4889:155::o;5853:125::-;5919:16;5958:5;:13;;5951:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5951:20:39;;;;;;;;;;;;;;;;;;;;;;5853:125;:::o;3496:112::-;3590:11;;-1:-1:-1;;;;;3590:11:39;3496:112;:::o;6106:129::-;6174:16;6213:5;:15;;6206:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6206:22:39;;;;;;;;;;;;;;;;;;;;;;6106:129;:::o;4536:149::-;-1:-1:-1;;;;;4657:21:39;4630:4;4657:21;;;:15;:21;;;;;;;;;4536:149::o",source:'/*\n    Copyright 2018 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\npragma solidity 0.5.7;\n\nimport { ITransferProxy } from "../interfaces/ITransferProxy.sol";\nimport { IVault } from "../interfaces/IVault.sol";\n\n\n/**\n * @title CoreState\n * @author Set Protocol\n *\n * The CoreState library maintains all state for the Core contract thus\n * allowing it to operate across multiple mixins.\n */\ncontract CoreState {\n\n    /* ============ Structs ============ */\n\n    struct State {\n        // Protocol state of operation\n        uint8 operationState;\n\n        // Address of the TransferProxy contract\n        address transferProxy;\n\n        // Address of the Vault contract\n        address vault;\n\n        // Instance of transferProxy contract\n        ITransferProxy transferProxyInstance;\n\n        // Instance of Vault Contract\n        IVault vaultInstance;\n\n        // Mapping of exchange enumeration to address\n        mapping(uint8 => address) exchangeIds;\n\n        // Mapping of approved modules\n        mapping(address => bool) validModules;\n\n        // Mapping of tracked SetToken factories\n        mapping(address => bool) validFactories;\n\n        // Mapping of tracked rebalancing price libraries\n        mapping(address => bool) validPriceLibraries;\n\n        // Mapping of tracked SetTokens\n        mapping(address => bool) validSets;\n\n        // Mapping of tracked disabled SetTokens\n        mapping(address => bool) disabledSets;\n\n        // Array of tracked SetTokens\n        address[] setTokens;\n\n        // Array of tracked modules\n        address[] modules;\n\n        // Array of tracked factories\n        address[] factories;\n\n        // Array of tracked exchange wrappers\n        address[] exchanges;\n\n        // Array of tracked auction price libraries\n        address[] priceLibraries;\n    }\n\n    /* ============ State Variables ============ */\n\n    State public state;\n\n    /* ============ Public Getters ============ */\n\n    /**\n     * Return uint8 representing the operational state of the protocol\n     *\n     * @return uint8           Uint8 representing the operational state of the protocol\n     */\n    function operationState()\n        external\n        view\n        returns (uint8)\n    {\n        return state.operationState;\n    }\n\n    /**\n     * Return address belonging to given exchangeId.\n     *\n     * @param  _exchangeId       ExchangeId number\n     * @return address           Address belonging to given exchangeId\n     */\n    function exchangeIds(\n        uint8 _exchangeId\n    )\n        external\n        view\n        returns (address)\n    {\n        return state.exchangeIds[_exchangeId];\n    }\n\n    /**\n     * Return transferProxy address.\n     *\n     * @return address       transferProxy address\n     */\n    function transferProxy()\n        external\n        view\n        returns (address)\n    {\n        return state.transferProxy;\n    }\n\n    /**\n     * Return vault address\n     *\n     * @return address        vault address\n     */\n    function vault()\n        external\n        view\n        returns (address)\n    {\n        return state.vault;\n    }\n\n    /**\n     * Return boolean indicating if address is valid factory.\n     *\n     * @param  _factory       Factory address\n     * @return bool           Boolean indicating if enabled factory\n     */\n    function validFactories(\n        address _factory\n    )\n        external\n        view\n        returns (bool)\n    {\n        return state.validFactories[_factory];\n    }\n\n    /**\n     * Return boolean indicating if address is valid module.\n     *\n     * @param  _module        Factory address\n     * @return bool           Boolean indicating if enabled factory\n     */\n    function validModules(\n        address _module\n    )\n        external\n        view\n        returns (bool)\n    {\n        return state.validModules[_module];\n    }\n\n    /**\n     * Return boolean indicating if address is valid Set.\n     *\n     * @param  _set           Set address\n     * @return bool           Boolean indicating if valid Set\n     */\n    function validSets(\n        address _set\n    )\n        external\n        view\n        returns (bool)\n    {\n        return state.validSets[_set];\n    }\n\n    /**\n     * Return boolean indicating if address is a disabled Set.\n     *\n     * @param  _set           Set address\n     * @return bool           Boolean indicating if is a disabled Set\n     */\n    function disabledSets(\n        address _set\n    )\n        external\n        view\n        returns (bool)\n    {\n        return state.disabledSets[_set];\n    }\n\n    /**\n     * Return boolean indicating if address is a valid Rebalancing Price Library.\n     *\n     * @param  _priceLibrary    Price library address\n     * @return bool             Boolean indicating if valid Price Library\n     */\n    function validPriceLibraries(\n        address _priceLibrary\n    )\n        external\n        view\n        returns (bool)\n    {\n        return state.validPriceLibraries[_priceLibrary];\n    }\n\n    /**\n     * Return array of all valid Set Tokens.\n     *\n     * @return address[]      Array of valid Set Tokens\n     */\n    function setTokens()\n        external\n        view\n        returns (address[] memory)\n    {\n        return state.setTokens;\n    }\n\n    /**\n     * Return array of all valid Modules.\n     *\n     * @return address[]      Array of valid modules\n     */\n    function modules()\n        external\n        view\n        returns (address[] memory)\n    {\n        return state.modules;\n    }\n\n    /**\n     * Return array of all valid factories.\n     *\n     * @return address[]      Array of valid factories\n     */\n    function factories()\n        external\n        view\n        returns (address[] memory)\n    {\n        return state.factories;\n    }\n\n    /**\n     * Return array of all valid exchange wrappers.\n     *\n     * @return address[]      Array of valid exchange wrappers\n     */\n    function exchanges()\n        external\n        view\n        returns (address[] memory)\n    {\n        return state.exchanges;\n    }\n\n    /**\n     * Return array of all valid price libraries.\n     *\n     * @return address[]      Array of valid price libraries\n     */\n    function priceLibraries()\n        external\n        view\n        returns (address[] memory)\n    {\n        return state.priceLibraries;\n    }\n}\n',sourcePath:"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/lib/CoreState.sol",compiler:{name:"solc",version:"0.5.7+commit.6da8b019.Linux.g++"},networks:{},schemaVersion:"3.0.23",updatedAt:"2020-05-05T17:13:36.393Z",devdoc:{author:"Set Protocol * The CoreState library maintains all state for the Core contract thus allowing it to operate across multiple mixins.",methods:{"disabledSets(address)":{params:{_set:"Set address"},"return":"bool           Boolean indicating if is a disabled Set"},"exchangeIds(uint8)":{params:{_exchangeId:"ExchangeId number"},"return":"address           Address belonging to given exchangeId"},"exchanges()":{"return":"address[]      Array of valid exchange wrappers"},"factories()":{"return":"address[]      Array of valid factories"},"modules()":{"return":"address[]      Array of valid modules"},"operationState()":{"return":"uint8           Uint8 representing the operational state of the protocol"},"priceLibraries()":{"return":"address[]      Array of valid price libraries"},"setTokens()":{"return":"address[]      Array of valid Set Tokens"},"transferProxy()":{"return":"address       transferProxy address"},"validFactories(address)":{params:{_factory:"Factory address"},"return":"bool           Boolean indicating if enabled factory"},"validModules(address)":{params:{_module:"Factory address"},"return":"bool           Boolean indicating if enabled factory"},"validPriceLibraries(address)":{params:{_priceLibrary:"Price library address"},"return":"bool             Boolean indicating if valid Price Library"},"validSets(address)":{params:{_set:"Set address"},"return":"bool           Boolean indicating if valid Set"},"vault()":{"return":"address        vault address"}},title:"CoreState"},userdoc:{methods:{"disabledSets(address)":{notice:"Return boolean indicating if address is a disabled Set."},"exchangeIds(uint8)":{notice:"Return address belonging to given exchangeId."},"exchanges()":{notice:"Return array of all valid exchange wrappers."},"factories()":{notice:"Return array of all valid factories."},"modules()":{notice:"Return array of all valid Modules."},"operationState()":{notice:"Return uint8 representing the operational state of the protocol"},"priceLibraries()":{notice:"Return array of all valid price libraries."},"setTokens()":{notice:"Return array of all valid Set Tokens."},"transferProxy()":{notice:"Return transferProxy address."},"validFactories(address)":{notice:"Return boolean indicating if address is valid factory."},"validModules(address)":{notice:"Return boolean indicating if address is valid module."},"validPriceLibraries(address)":{notice:"Return boolean indicating if address is a valid Rebalancing Price Library."},"validSets(address)":{notice:"Return boolean indicating if address is valid Set."},"vault()":{notice:"Return vault address"}}}};