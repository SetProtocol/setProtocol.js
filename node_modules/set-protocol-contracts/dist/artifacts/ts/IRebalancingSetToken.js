"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.IRebalancingSetToken={contractName:"IRebalancingSetToken",abi:[{constant:true,inputs:[],name:"auctionLibrary",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"proposalStartTime",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"lastRebalanceTimestamp",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"rebalanceInterval",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"rebalanceState",outputs:[{name:"",type:"uint8"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"startingCurrentSetAmount",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"owner",type:"address"}],name:"balanceOf",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{name:"_nextSet",type:"address"},{name:"_auctionLibrary",type:"address"},{name:"_auctionTimeToPivot",type:"uint256"},{name:"_auctionStartPrice",type:"uint256"},{name:"_auctionPivotPrice",type:"uint256"}],name:"propose",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"naturalUnit",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"currentSet",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"nextSet",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"unitShares",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{name:"_from",type:"address"},{name:"_quantity",type:"uint256"}],name:"burn",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_quantity",type:"uint256"}],name:"placeBid",outputs:[{name:"",type:"address[]"},{name:"",type:"uint256[]"},{name:"",type:"uint256[]"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"getCombinedTokenArrayLength",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"getCombinedTokenArray",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"getFailedAuctionWithdrawComponents",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"getAuctionPriceParameters",outputs:[{name:"",type:"uint256[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"getBiddingParameters",outputs:[{name:"",type:"uint256[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_quantity",type:"uint256"}],name:"getBidPrice",outputs:[{name:"",type:"uint256[]"},{name:"",type:"uint256[]"}],payable:false,stateMutability:"view",type:"function"}],metadata:'{"compiler":{"version":"0.5.7+commit.6da8b019"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"unitShares","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"rebalanceInterval","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"currentSet","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"naturalUnit","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"startingCurrentSetAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getCombinedTokenArrayLength","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_nextSet","type":"address"},{"name":"_auctionLibrary","type":"address"},{"name":"_auctionTimeToPivot","type":"uint256"},{"name":"_auctionStartPrice","type":"uint256"},{"name":"_auctionPivotPrice","type":"uint256"}],"name":"propose","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getCombinedTokenArray","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"auctionLibrary","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_quantity","type":"uint256"}],"name":"placeBid","outputs":[{"name":"","type":"address[]"},{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_quantity","type":"uint256"}],"name":"getBidPrice","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_quantity","type":"uint256"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getAuctionPriceParameters","outputs":[{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getBiddingParameters","outputs":[{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"proposalStartTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"lastRebalanceTimestamp","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"nextSet","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getFailedAuctionWithdrawComponents","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"rebalanceState","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}],"devdoc":{"author":"Set Protocol * The IRebalancingSetToken interface provides a light-weight, structured way to interact with the RebalancingSetToken contract from another contract.","methods":{"balanceOf(address)":{"params":{"owner":"The address to query the balance of."},"return":"A uint256 representing the amount owned by the passed address."},"currentSet()":{"return":"A address representing the base SetToken"},"nextSet()":{"return":"address    Address representing the base SetToken"},"propose(address,address,uint256,uint256,uint256)":{"params":{"_auctionLibrary":"The library used to calculate the Dutch Auction price","_auctionPivotPrice":"The price at which the price curve switches from linear to exponential","_auctionStartPrice":"The price to start the auction at","_auctionTimeToPivot":"The amount of time for the auction to go ffrom start to pivot price","_nextSet":"The Set to rebalance into"}}},"title":"IRebalancingSetToken"},"userdoc":{"methods":{"balanceOf(address)":{"notice":"Gets the balance of the specified address."},"currentSet()":{"notice":"Returns the address of the current base SetToken with the current allocation"},"nextSet()":{"notice":"Returns the address of the next base SetToken with the post auction allocation"},"propose(address,address,uint256,uint256,uint256)":{"notice":"Function used to set the terms of the next rebalance and start the proposal period"}}}},"settings":{"compilationTarget":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/IRebalancingSetToken.sol":"IRebalancingSetToken"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/IRebalancingSetToken.sol":{"keccak256":"0xe7356a7b0f0cc95d9526395d776f523a48fd65618730d67b4f31f20ffbd380da","urls":["bzzr://605a33a818eff7ce3370f25fccb751f61c066b4db0772605a2215d1357d68072"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/lib/RebalancingLibrary.sol":{"keccak256":"0x7f9dd2f95b2ee71a98b94cb9b0df15874aa134e7480d04a1fcf36aff166a55f4","urls":["bzzr://f43a5563ec5df095151eee30cf7a0941b5a971917c27c7b34d9586b36563ab5b"]}},"version":1}',bytecode:"0x",deployedBytecode:"0x",sourceMap:"",deployedSourceMap:"",source:'/*\n    Copyright 2018 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\npragma solidity 0.5.7;\npragma experimental "ABIEncoderV2";\n\nimport { RebalancingLibrary } from "../lib/RebalancingLibrary.sol";\n\n/**\n * @title IRebalancingSetToken\n * @author Set Protocol\n *\n * The IRebalancingSetToken interface provides a light-weight, structured way to interact with the\n * RebalancingSetToken contract from another contract.\n */\n\ninterface IRebalancingSetToken {\n\n    /*\n     * Get the auction library contract used for the current rebalance\n     *\n     * @return address    Address of auction library used in the upcoming auction\n     */\n    function auctionLibrary()\n        external\n        view\n        returns (address);\n\n    /*\n     * Get totalSupply of Rebalancing Set\n     *\n     * @return  totalSupply\n     */\n    function totalSupply()\n        external\n        view\n        returns (uint256);\n\n    /*\n     * Get proposalTimeStamp of Rebalancing Set\n     *\n     * @return  proposalTimeStamp\n     */\n    function proposalStartTime()\n        external\n        view\n        returns (uint256);\n\n    /*\n     * Get lastRebalanceTimestamp of Rebalancing Set\n     *\n     * @return  lastRebalanceTimestamp\n     */\n    function lastRebalanceTimestamp()\n        external\n        view\n        returns (uint256);\n\n    /*\n     * Get rebalanceInterval of Rebalancing Set\n     *\n     * @return  rebalanceInterval\n     */\n    function rebalanceInterval()\n        external\n        view\n        returns (uint256);\n\n    /*\n     * Get rebalanceState of Rebalancing Set\n     *\n     * @return RebalancingLibrary.State    Current rebalance state of the RebalancingSetToken\n     */\n    function rebalanceState()\n        external\n        view\n        returns (RebalancingLibrary.State);\n\n    /*\n     * Get the starting amount of current SetToken for the current auction\n     *\n     * @return  rebalanceState\n     */\n    function startingCurrentSetAmount()\n        external\n        view\n        returns (uint256);\n\n    /**\n     * Gets the balance of the specified address.\n     *\n     * @param owner      The address to query the balance of.\n     * @return           A uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(\n        address owner\n    )\n        external\n        view\n        returns (uint256);\n\n    /**\n     * Function used to set the terms of the next rebalance and start the proposal period\n     *\n     * @param _nextSet                      The Set to rebalance into\n     * @param _auctionLibrary               The library used to calculate the Dutch Auction price\n     * @param _auctionTimeToPivot           The amount of time for the auction to go ffrom start to pivot price\n     * @param _auctionStartPrice            The price to start the auction at\n     * @param _auctionPivotPrice            The price at which the price curve switches from linear to exponential\n     */\n    function propose(\n        address _nextSet,\n        address _auctionLibrary,\n        uint256 _auctionTimeToPivot,\n        uint256 _auctionStartPrice,\n        uint256 _auctionPivotPrice\n    )\n        external;\n\n    /*\n     * Get natural unit of Set\n     *\n     * @return  uint256       Natural unit of Set\n     */\n    function naturalUnit()\n        external\n        view\n        returns (uint256);\n\n    /**\n     * Returns the address of the current base SetToken with the current allocation\n     *\n     * @return           A address representing the base SetToken\n     */\n    function currentSet()\n        external\n        view\n        returns (address);\n\n    /**\n     * Returns the address of the next base SetToken with the post auction allocation\n     *\n     * @return  address    Address representing the base SetToken\n     */\n    function nextSet()\n        external\n        view\n        returns (address);\n\n    /*\n     * Get the unit shares of the rebalancing Set\n     *\n     * @return  unitShares       Unit Shares of the base Set\n     */\n    function unitShares()\n        external\n        view\n        returns (uint256);\n\n    /*\n     * Burn set token for given address.\n     * Can only be called by authorized contracts.\n     *\n     * @param  _from        The address of the redeeming account\n     * @param  _quantity    The number of sets to burn from redeemer\n     */\n    function burn(\n        address _from,\n        uint256 _quantity\n    )\n        external;\n\n    /*\n     * Place bid during rebalance auction. Can only be called by Core.\n     *\n     * @param _quantity                 The amount of currentSet to be rebalanced\n     * @return combinedTokenArray       Array of token addresses invovled in rebalancing\n     * @return inflowUnitArray          Array of amount of tokens inserted into system in bid\n     * @return outflowUnitArray         Array of amount of tokens taken out of system in bid\n     */\n    function placeBid(\n        uint256 _quantity\n    )\n        external\n        returns (address[] memory, uint256[] memory, uint256[] memory);\n\n    /*\n     * Get combinedTokenArray of Rebalancing Set\n     *\n     * @return  combinedTokenArray\n     */\n    function getCombinedTokenArrayLength()\n        external\n        view\n        returns (uint256);\n\n    /*\n     * Get combinedTokenArray of Rebalancing Set\n     *\n     * @return  combinedTokenArray\n     */\n    function getCombinedTokenArray()\n        external\n        view\n        returns (address[] memory);\n\n    /*\n     * Get failedAuctionWithdrawComponents of Rebalancing Set\n     *\n     * @return  failedAuctionWithdrawComponents\n     */\n    function getFailedAuctionWithdrawComponents()\n        external\n        view\n        returns (address[] memory);\n\n    /*\n     * Get auctionPriceParameters for current auction\n     *\n     * @return uint256[4]    AuctionPriceParameters for current rebalance auction\n     */\n    function getAuctionPriceParameters()\n        external\n        view\n        returns (uint256[] memory);\n\n    /*\n     * Get biddingParameters for current auction\n     *\n     * @return uint256[2]    BiddingParameters for current rebalance auction\n     */\n    function getBiddingParameters()\n        external\n        view\n        returns (uint256[] memory);\n\n    /*\n     * Get token inflows and outflows required for bid. Also the amount of Rebalancing\n     * Sets that would be generated.\n     *\n     * @param _quantity               The amount of currentSet to be rebalanced\n     * @return inflowUnitArray        Array of amount of tokens inserted into system in bid\n     * @return outflowUnitArray       Array of amount of tokens taken out of system in bid\n     */\n    function getBidPrice(\n        uint256 _quantity\n    )\n        external\n        view\n        returns (uint256[] memory, uint256[] memory);\n\n}\n',sourcePath:"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/IRebalancingSetToken.sol",compiler:{name:"solc",version:"0.5.7+commit.6da8b019.Linux.g++"},networks:{},schemaVersion:"3.0.23",updatedAt:"2020-05-05T17:13:36.360Z",devdoc:{author:"Set Protocol * The IRebalancingSetToken interface provides a light-weight, structured way to interact with the RebalancingSetToken contract from another contract.",methods:{"balanceOf(address)":{params:{owner:"The address to query the balance of."},"return":"A uint256 representing the amount owned by the passed address."},"currentSet()":{"return":"A address representing the base SetToken"},"nextSet()":{"return":"address    Address representing the base SetToken"},"propose(address,address,uint256,uint256,uint256)":{params:{_auctionLibrary:"The library used to calculate the Dutch Auction price",_auctionPivotPrice:"The price at which the price curve switches from linear to exponential",_auctionStartPrice:"The price to start the auction at",_auctionTimeToPivot:"The amount of time for the auction to go ffrom start to pivot price",_nextSet:"The Set to rebalance into"}}},title:"IRebalancingSetToken"},userdoc:{methods:{"balanceOf(address)":{notice:"Gets the balance of the specified address."},"currentSet()":{notice:"Returns the address of the current base SetToken with the current allocation"},"nextSet()":{notice:"Returns the address of the next base SetToken with the post auction allocation"},"propose(address,address,uint256,uint256,uint256)":{notice:"Function used to set the terms of the next rebalance and start the proposal period"}}}};