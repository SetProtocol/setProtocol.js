"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.IExchange={contractName:"IExchange",abi:[{constant:false,inputs:[{components:[{name:"makerAddress",type:"address"},{name:"takerAddress",type:"address"},{name:"feeRecipientAddress",type:"address"},{name:"senderAddress",type:"address"},{name:"makerAssetAmount",type:"uint256"},{name:"takerAssetAmount",type:"uint256"},{name:"makerFee",type:"uint256"},{name:"takerFee",type:"uint256"},{name:"expirationTimeSeconds",type:"uint256"},{name:"salt",type:"uint256"},{name:"makerAssetData",type:"bytes"},{name:"takerAssetData",type:"bytes"}],name:"orders",type:"tuple[]"},{name:"takerAssetFillAmounts",type:"uint256[]"},{name:"signatures",type:"bytes[]"}],name:"batchFillOrders",outputs:[{components:[{name:"makerAssetFilledAmount",type:"uint256"},{name:"takerAssetFilledAmount",type:"uint256"},{name:"makerFeePaid",type:"uint256"},{name:"takerFeePaid",type:"uint256"}],name:"totalFillResults",type:"tuple"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"hash",type:"bytes32"},{name:"signerAddress",type:"address"},{name:"signature",type:"bytes"}],name:"preSign",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{components:[{name:"makerAddress",type:"address"},{name:"takerAddress",type:"address"},{name:"feeRecipientAddress",type:"address"},{name:"senderAddress",type:"address"},{name:"makerAssetAmount",type:"uint256"},{name:"takerAssetAmount",type:"uint256"},{name:"makerFee",type:"uint256"},{name:"takerFee",type:"uint256"},{name:"expirationTimeSeconds",type:"uint256"},{name:"salt",type:"uint256"},{name:"makerAssetData",type:"bytes"},{name:"takerAssetData",type:"bytes"}],name:"leftOrder",type:"tuple"},{components:[{name:"makerAddress",type:"address"},{name:"takerAddress",type:"address"},{name:"feeRecipientAddress",type:"address"},{name:"senderAddress",type:"address"},{name:"makerAssetAmount",type:"uint256"},{name:"takerAssetAmount",type:"uint256"},{name:"makerFee",type:"uint256"},{name:"takerFee",type:"uint256"},{name:"expirationTimeSeconds",type:"uint256"},{name:"salt",type:"uint256"},{name:"makerAssetData",type:"bytes"},{name:"takerAssetData",type:"bytes"}],name:"rightOrder",type:"tuple"},{name:"leftSignature",type:"bytes"},{name:"rightSignature",type:"bytes"}],name:"matchOrders",outputs:[{components:[{components:[{name:"makerAssetFilledAmount",type:"uint256"},{name:"takerAssetFilledAmount",type:"uint256"},{name:"makerFeePaid",type:"uint256"},{name:"takerFeePaid",type:"uint256"}],name:"left",type:"tuple"},{components:[{name:"makerAssetFilledAmount",type:"uint256"},{name:"takerAssetFilledAmount",type:"uint256"},{name:"makerFeePaid",type:"uint256"},{name:"takerFeePaid",type:"uint256"}],name:"right",type:"tuple"},{name:"leftMakerAssetSpreadAmount",type:"uint256"}],name:"matchedFillResults",type:"tuple"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{components:[{name:"makerAddress",type:"address"},{name:"takerAddress",type:"address"},{name:"feeRecipientAddress",type:"address"},{name:"senderAddress",type:"address"},{name:"makerAssetAmount",type:"uint256"},{name:"takerAssetAmount",type:"uint256"},{name:"makerFee",type:"uint256"},{name:"takerFee",type:"uint256"},{name:"expirationTimeSeconds",type:"uint256"},{name:"salt",type:"uint256"},{name:"makerAssetData",type:"bytes"},{name:"takerAssetData",type:"bytes"}],name:"order",type:"tuple"},{name:"takerAssetFillAmount",type:"uint256"},{name:"signature",type:"bytes"}],name:"fillOrderNoThrow",outputs:[{components:[{name:"makerAssetFilledAmount",type:"uint256"},{name:"takerAssetFilledAmount",type:"uint256"},{name:"makerFeePaid",type:"uint256"},{name:"takerFeePaid",type:"uint256"}],name:"fillResults",type:"tuple"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{components:[{name:"makerAddress",type:"address"},{name:"takerAddress",type:"address"},{name:"feeRecipientAddress",type:"address"},{name:"senderAddress",type:"address"},{name:"makerAssetAmount",type:"uint256"},{name:"takerAssetAmount",type:"uint256"},{name:"makerFee",type:"uint256"},{name:"takerFee",type:"uint256"},{name:"expirationTimeSeconds",type:"uint256"},{name:"salt",type:"uint256"},{name:"makerAssetData",type:"bytes"},{name:"takerAssetData",type:"bytes"}],name:"orders",type:"tuple[]"}],name:"batchCancelOrders",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{components:[{name:"makerAddress",type:"address"},{name:"takerAddress",type:"address"},{name:"feeRecipientAddress",type:"address"},{name:"senderAddress",type:"address"},{name:"makerAssetAmount",type:"uint256"},{name:"takerAssetAmount",type:"uint256"},{name:"makerFee",type:"uint256"},{name:"takerFee",type:"uint256"},{name:"expirationTimeSeconds",type:"uint256"},{name:"salt",type:"uint256"},{name:"makerAssetData",type:"bytes"},{name:"takerAssetData",type:"bytes"}],name:"orders",type:"tuple[]"},{name:"takerAssetFillAmounts",type:"uint256[]"},{name:"signatures",type:"bytes[]"}],name:"batchFillOrKillOrders",outputs:[{components:[{name:"makerAssetFilledAmount",type:"uint256"},{name:"takerAssetFilledAmount",type:"uint256"},{name:"makerFeePaid",type:"uint256"},{name:"takerFeePaid",type:"uint256"}],name:"totalFillResults",type:"tuple"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"targetOrderEpoch",type:"uint256"}],name:"cancelOrdersUpTo",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{components:[{name:"makerAddress",type:"address"},{name:"takerAddress",type:"address"},{name:"feeRecipientAddress",type:"address"},{name:"senderAddress",type:"address"},{name:"makerAssetAmount",type:"uint256"},{name:"takerAssetAmount",type:"uint256"},{name:"makerFee",type:"uint256"},{name:"takerFee",type:"uint256"},{name:"expirationTimeSeconds",type:"uint256"},{name:"salt",type:"uint256"},{name:"makerAssetData",type:"bytes"},{name:"takerAssetData",type:"bytes"}],name:"orders",type:"tuple[]"},{name:"takerAssetFillAmounts",type:"uint256[]"},{name:"signatures",type:"bytes[]"}],name:"batchFillOrdersNoThrow",outputs:[{components:[{name:"makerAssetFilledAmount",type:"uint256"},{name:"takerAssetFilledAmount",type:"uint256"},{name:"makerFeePaid",type:"uint256"},{name:"takerFeePaid",type:"uint256"}],name:"totalFillResults",type:"tuple"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"assetProxyId",type:"bytes4"}],name:"getAssetProxy",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{components:[{name:"makerAddress",type:"address"},{name:"takerAddress",type:"address"},{name:"feeRecipientAddress",type:"address"},{name:"senderAddress",type:"address"},{name:"makerAssetAmount",type:"uint256"},{name:"takerAssetAmount",type:"uint256"},{name:"makerFee",type:"uint256"},{name:"takerFee",type:"uint256"},{name:"expirationTimeSeconds",type:"uint256"},{name:"salt",type:"uint256"},{name:"makerAssetData",type:"bytes"},{name:"takerAssetData",type:"bytes"}],name:"order",type:"tuple"},{name:"takerAssetFillAmount",type:"uint256"},{name:"signature",type:"bytes"}],name:"fillOrKillOrder",outputs:[{components:[{name:"makerAssetFilledAmount",type:"uint256"},{name:"takerAssetFilledAmount",type:"uint256"},{name:"makerFeePaid",type:"uint256"},{name:"takerFeePaid",type:"uint256"}],name:"fillResults",type:"tuple"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"validatorAddress",type:"address"},{name:"approval",type:"bool"}],name:"setSignatureValidatorApproval",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{components:[{name:"makerAddress",type:"address"},{name:"takerAddress",type:"address"},{name:"feeRecipientAddress",type:"address"},{name:"senderAddress",type:"address"},{name:"makerAssetAmount",type:"uint256"},{name:"takerAssetAmount",type:"uint256"},{name:"makerFee",type:"uint256"},{name:"takerFee",type:"uint256"},{name:"expirationTimeSeconds",type:"uint256"},{name:"salt",type:"uint256"},{name:"makerAssetData",type:"bytes"},{name:"takerAssetData",type:"bytes"}],name:"orders",type:"tuple[]"},{name:"takerAssetFillAmount",type:"uint256"},{name:"signatures",type:"bytes[]"}],name:"marketSellOrders",outputs:[{components:[{name:"makerAssetFilledAmount",type:"uint256"},{name:"takerAssetFilledAmount",type:"uint256"},{name:"makerFeePaid",type:"uint256"},{name:"takerFeePaid",type:"uint256"}],name:"totalFillResults",type:"tuple"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"assetProxyId",type:"bytes4"},{name:"newAssetProxy",type:"address"},{name:"oldAssetProxy",type:"address"}],name:"registerAssetProxy",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{name:"hash",type:"bytes32"},{name:"signerAddress",type:"address"},{name:"signature",type:"bytes"}],name:"isValidSignature",outputs:[{name:"isValid",type:"bool"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{components:[{name:"makerAddress",type:"address"},{name:"takerAddress",type:"address"},{name:"feeRecipientAddress",type:"address"},{name:"senderAddress",type:"address"},{name:"makerAssetAmount",type:"uint256"},{name:"takerAssetAmount",type:"uint256"},{name:"makerFee",type:"uint256"},{name:"takerFee",type:"uint256"},{name:"expirationTimeSeconds",type:"uint256"},{name:"salt",type:"uint256"},{name:"makerAssetData",type:"bytes"},{name:"takerAssetData",type:"bytes"}],name:"orders",type:"tuple[]"},{name:"makerAssetFillAmount",type:"uint256"},{name:"signatures",type:"bytes[]"}],name:"marketBuyOrdersNoThrow",outputs:[{components:[{name:"makerAssetFilledAmount",type:"uint256"},{name:"takerAssetFilledAmount",type:"uint256"},{name:"makerFeePaid",type:"uint256"},{name:"takerFeePaid",type:"uint256"}],name:"totalFillResults",type:"tuple"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{components:[{name:"makerAddress",type:"address"},{name:"takerAddress",type:"address"},{name:"feeRecipientAddress",type:"address"},{name:"senderAddress",type:"address"},{name:"makerAssetAmount",type:"uint256"},{name:"takerAssetAmount",type:"uint256"},{name:"makerFee",type:"uint256"},{name:"takerFee",type:"uint256"},{name:"expirationTimeSeconds",type:"uint256"},{name:"salt",type:"uint256"},{name:"makerAssetData",type:"bytes"},{name:"takerAssetData",type:"bytes"}],name:"order",type:"tuple"},{name:"takerAssetFillAmount",type:"uint256"},{name:"signature",type:"bytes"}],name:"fillOrder",outputs:[{components:[{name:"makerAssetFilledAmount",type:"uint256"},{name:"takerAssetFilledAmount",type:"uint256"},{name:"makerFeePaid",type:"uint256"},{name:"takerFeePaid",type:"uint256"}],name:"fillResults",type:"tuple"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"salt",type:"uint256"},{name:"signerAddress",type:"address"},{name:"data",type:"bytes"},{name:"signature",type:"bytes"}],name:"executeTransaction",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[{components:[{name:"makerAddress",type:"address"},{name:"takerAddress",type:"address"},{name:"feeRecipientAddress",type:"address"},{name:"senderAddress",type:"address"},{name:"makerAssetAmount",type:"uint256"},{name:"takerAssetAmount",type:"uint256"},{name:"makerFee",type:"uint256"},{name:"takerFee",type:"uint256"},{name:"expirationTimeSeconds",type:"uint256"},{name:"salt",type:"uint256"},{name:"makerAssetData",type:"bytes"},{name:"takerAssetData",type:"bytes"}],name:"order",type:"tuple"}],name:"getOrderInfo",outputs:[{components:[{name:"orderStatus",type:"uint8"},{name:"orderHash",type:"bytes32"},{name:"orderTakerAssetFilledAmount",type:"uint256"}],name:"orderInfo",type:"tuple"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{components:[{name:"makerAddress",type:"address"},{name:"takerAddress",type:"address"},{name:"feeRecipientAddress",type:"address"},{name:"senderAddress",type:"address"},{name:"makerAssetAmount",type:"uint256"},{name:"takerAssetAmount",type:"uint256"},{name:"makerFee",type:"uint256"},{name:"takerFee",type:"uint256"},{name:"expirationTimeSeconds",type:"uint256"},{name:"salt",type:"uint256"},{name:"makerAssetData",type:"bytes"},{name:"takerAssetData",type:"bytes"}],name:"order",type:"tuple"}],name:"cancelOrder",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{components:[{name:"makerAddress",type:"address"},{name:"takerAddress",type:"address"},{name:"feeRecipientAddress",type:"address"},{name:"senderAddress",type:"address"},{name:"makerAssetAmount",type:"uint256"},{name:"takerAssetAmount",type:"uint256"},{name:"makerFee",type:"uint256"},{name:"takerFee",type:"uint256"},{name:"expirationTimeSeconds",type:"uint256"},{name:"salt",type:"uint256"},{name:"makerAssetData",type:"bytes"},{name:"takerAssetData",type:"bytes"}],name:"orders",type:"tuple[]"},{name:"takerAssetFillAmount",type:"uint256"},{name:"signatures",type:"bytes[]"}],name:"marketSellOrdersNoThrow",outputs:[{components:[{name:"makerAssetFilledAmount",type:"uint256"},{name:"takerAssetFilledAmount",type:"uint256"},{name:"makerFeePaid",type:"uint256"},{name:"takerFeePaid",type:"uint256"}],name:"totalFillResults",type:"tuple"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{components:[{name:"makerAddress",type:"address"},{name:"takerAddress",type:"address"},{name:"feeRecipientAddress",type:"address"},{name:"senderAddress",type:"address"},{name:"makerAssetAmount",type:"uint256"},{name:"takerAssetAmount",type:"uint256"},{name:"makerFee",type:"uint256"},{name:"takerFee",type:"uint256"},{name:"expirationTimeSeconds",type:"uint256"},{name:"salt",type:"uint256"},{name:"makerAssetData",type:"bytes"},{name:"takerAssetData",type:"bytes"}],name:"orders",type:"tuple[]"},{name:"makerAssetFillAmount",type:"uint256"},{name:"signatures",type:"bytes[]"}],name:"marketBuyOrders",outputs:[{components:[{name:"makerAssetFilledAmount",type:"uint256"},{name:"takerAssetFilledAmount",type:"uint256"},{name:"makerFeePaid",type:"uint256"},{name:"takerFeePaid",type:"uint256"}],name:"totalFillResults",type:"tuple"}],payable:false,stateMutability:"nonpayable",type:"function"}],metadata:'{"compiler":{"version":"0.5.7+commit.6da8b019"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"orders","type":"tuple[]"},{"name":"takerAssetFillAmounts","type":"uint256[]"},{"name":"signatures","type":"bytes[]"}],"name":"batchFillOrders","outputs":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"totalFillResults","type":"tuple"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"},{"name":"signerAddress","type":"address"},{"name":"signature","type":"bytes"}],"name":"preSign","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"leftOrder","type":"tuple"},{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"rightOrder","type":"tuple"},{"name":"leftSignature","type":"bytes"},{"name":"rightSignature","type":"bytes"}],"name":"matchOrders","outputs":[{"components":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"left","type":"tuple"},{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"right","type":"tuple"},{"name":"leftMakerAssetSpreadAmount","type":"uint256"}],"name":"matchedFillResults","type":"tuple"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"order","type":"tuple"},{"name":"takerAssetFillAmount","type":"uint256"},{"name":"signature","type":"bytes"}],"name":"fillOrderNoThrow","outputs":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"fillResults","type":"tuple"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"orders","type":"tuple[]"}],"name":"batchCancelOrders","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"orders","type":"tuple[]"},{"name":"takerAssetFillAmounts","type":"uint256[]"},{"name":"signatures","type":"bytes[]"}],"name":"batchFillOrKillOrders","outputs":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"totalFillResults","type":"tuple"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"targetOrderEpoch","type":"uint256"}],"name":"cancelOrdersUpTo","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"orders","type":"tuple[]"},{"name":"takerAssetFillAmounts","type":"uint256[]"},{"name":"signatures","type":"bytes[]"}],"name":"batchFillOrdersNoThrow","outputs":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"totalFillResults","type":"tuple"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"assetProxyId","type":"bytes4"}],"name":"getAssetProxy","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"order","type":"tuple"},{"name":"takerAssetFillAmount","type":"uint256"},{"name":"signature","type":"bytes"}],"name":"fillOrKillOrder","outputs":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"fillResults","type":"tuple"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"validatorAddress","type":"address"},{"name":"approval","type":"bool"}],"name":"setSignatureValidatorApproval","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"orders","type":"tuple[]"},{"name":"takerAssetFillAmount","type":"uint256"},{"name":"signatures","type":"bytes[]"}],"name":"marketSellOrders","outputs":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"totalFillResults","type":"tuple"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"assetProxyId","type":"bytes4"},{"name":"newAssetProxy","type":"address"},{"name":"oldAssetProxy","type":"address"}],"name":"registerAssetProxy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"hash","type":"bytes32"},{"name":"signerAddress","type":"address"},{"name":"signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"name":"isValid","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"orders","type":"tuple[]"},{"name":"makerAssetFillAmount","type":"uint256"},{"name":"signatures","type":"bytes[]"}],"name":"marketBuyOrdersNoThrow","outputs":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"totalFillResults","type":"tuple"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"order","type":"tuple"},{"name":"takerAssetFillAmount","type":"uint256"},{"name":"signature","type":"bytes"}],"name":"fillOrder","outputs":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"fillResults","type":"tuple"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"salt","type":"uint256"},{"name":"signerAddress","type":"address"},{"name":"data","type":"bytes"},{"name":"signature","type":"bytes"}],"name":"executeTransaction","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"order","type":"tuple"}],"name":"getOrderInfo","outputs":[{"components":[{"name":"orderStatus","type":"uint8"},{"name":"orderHash","type":"bytes32"},{"name":"orderTakerAssetFilledAmount","type":"uint256"}],"name":"orderInfo","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"order","type":"tuple"}],"name":"cancelOrder","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"orders","type":"tuple[]"},{"name":"takerAssetFillAmount","type":"uint256"},{"name":"signatures","type":"bytes[]"}],"name":"marketSellOrdersNoThrow","outputs":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"totalFillResults","type":"tuple"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"components":[{"name":"makerAddress","type":"address"},{"name":"takerAddress","type":"address"},{"name":"feeRecipientAddress","type":"address"},{"name":"senderAddress","type":"address"},{"name":"makerAssetAmount","type":"uint256"},{"name":"takerAssetAmount","type":"uint256"},{"name":"makerFee","type":"uint256"},{"name":"takerFee","type":"uint256"},{"name":"expirationTimeSeconds","type":"uint256"},{"name":"salt","type":"uint256"},{"name":"makerAssetData","type":"bytes"},{"name":"takerAssetData","type":"bytes"}],"name":"orders","type":"tuple[]"},{"name":"makerAssetFillAmount","type":"uint256"},{"name":"signatures","type":"bytes[]"}],"name":"marketBuyOrders","outputs":[{"components":[{"name":"makerAssetFilledAmount","type":"uint256"},{"name":"takerAssetFilledAmount","type":"uint256"},{"name":"makerFeePaid","type":"uint256"},{"name":"takerFeePaid","type":"uint256"}],"name":"totalFillResults","type":"tuple"}],"payable":false,"stateMutability":"nonpayable","type":"function"}],"devdoc":{"methods":{"batchCancelOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])":{"details":"Synchronously cancels multiple orders in a single transaction.","params":{"orders":"Array of order specifications."}},"batchFillOrKillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])":{"details":"Synchronously executes multiple calls of fillOrKill.","params":{"orders":"Array of order specifications.","signatures":"Proofs that orders have been created by makers.","takerAssetFillAmounts":"Array of desired amounts of takerAsset to sell in orders."},"return":"Amounts filled and fees paid by makers and taker."},"batchFillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])":{"details":"Synchronously executes multiple calls of fillOrder.","params":{"orders":"Array of order specifications.","signatures":"Proofs that orders have been created by makers.","takerAssetFillAmounts":"Array of desired amounts of takerAsset to sell in orders."},"return":"Amounts filled and fees paid by makers and taker."},"batchFillOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])":{"details":"Fills an order with specified parameters and ECDSA signature.      Returns false if the transaction would otherwise revert.","params":{"orders":"Array of order specifications.","signatures":"Proofs that orders have been created by makers.","takerAssetFillAmounts":"Array of desired amounts of takerAsset to sell in orders."},"return":"Amounts filled and fees paid by makers and taker."},"cancelOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"details":"After calling, the order can not be filled anymore.","params":{"order":"Order struct containing order specifications."}},"cancelOrdersUpTo(uint256)":{"details":"Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).","params":{"targetOrderEpoch":"Orders created with a salt less or equal to this value will be cancelled."}},"executeTransaction(uint256,address,bytes,bytes)":{"details":"Executes an exchange method call in the context of signer.","params":{"data":"AbiV2 encoded calldata.","salt":"Arbitrary number to ensure uniqueness of transaction hash.","signature":"Proof of signer transaction by signer.","signerAddress":"Address of transaction signer."}},"fillOrKillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)":{"details":"Fills the input order. Reverts if exact takerAssetFillAmount not filled.","params":{"order":"LibOrder.Order struct containing order specifications.","signature":"Proof that order has been created by maker.","takerAssetFillAmount":"Desired amount of takerAsset to sell."}},"fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)":{"details":"Fills the input order.","params":{"order":"Order struct containing order specifications.","signature":"Proof that order has been created by maker.","takerAssetFillAmount":"Desired amount of takerAsset to sell."},"return":"Amounts filled and fees paid by maker and taker."},"fillOrderNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)":{"details":"Fills an order with specified parameters and ECDSA signature.      Returns false if the transaction would otherwise revert.","params":{"order":"LibOrder.Order struct containing order specifications.","signature":"Proof that order has been created by maker.","takerAssetFillAmount":"Desired amount of takerAsset to sell."},"return":"Amounts filled and fees paid by maker and taker."},"getAssetProxy(bytes4)":{"details":"Gets an asset proxy.","params":{"assetProxyId":"Id of the asset proxy."},"return":"The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered."},"getOrderInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"details":"Gets information about an order: status, hash, and amount filled.","params":{"order":"Order to gather information on."},"return":"OrderInfo Information about the order and its state.                   See LibOrder.OrderInfo for a complete description."},"isValidSignature(bytes32,address,bytes)":{"details":"Verifies that a signature is valid.","params":{"hash":"Message hash that is signed.","signature":"Proof of signing.","signerAddress":"Address of signer."},"return":"Validity of order signature."},"marketBuyOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])":{"details":"Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.","params":{"makerAssetFillAmount":"Desired amount of makerAsset to buy.","orders":"Array of order specifications.","signatures":"Proofs that orders have been signed by makers."},"return":"Amounts filled and fees paid by makers and taker."},"marketBuyOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])":{"details":"Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.      Returns false if the transaction would otherwise revert.","params":{"makerAssetFillAmount":"Desired amount of makerAsset to buy.","orders":"Array of order specifications.","signatures":"Proofs that orders have been signed by makers."},"return":"Amounts filled and fees paid by makers and taker."},"marketSellOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])":{"details":"Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.","params":{"orders":"Array of order specifications.","signatures":"Proofs that orders have been created by makers.","takerAssetFillAmount":"Desired amount of takerAsset to sell."},"return":"Amounts filled and fees paid by makers and taker."},"marketSellOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])":{"details":"Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.      Returns false if the transaction would otherwise revert.","params":{"orders":"Array of order specifications.","signatures":"Proofs that orders have been signed by makers.","takerAssetFillAmount":"Desired amount of takerAsset to sell."},"return":"Amounts filled and fees paid by makers and taker."},"matchOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes,bytes)":{"details":"Match two complementary orders that have a profitable spread.      Each order is filled at their respective price point. However, the calculations are      carried out as though the orders are both being filled at the right order\'s price point.      The profit made by the left order goes to the taker (who matched the two orders).","params":{"leftOrder":"First order to match.","leftSignature":"Proof that order was created by the left maker.","rightOrder":"Second order to match.","rightSignature":"Proof that order was created by the right maker."},"return":"matchedFillResults Amounts filled and fees paid by maker and taker of matched orders. TODO: Make this function external once supported by Solidity (See Solidity Issues #3199, #1603)"},"preSign(bytes32,address,bytes)":{"details":"Approves a hash on-chain using any valid signature type.      After presigning a hash, the preSign signature type will become valid for that hash and signer.","params":{"signature":"Proof that the hash has been signed by signer.","signerAddress":"Address that should have signed the given hash."}},"registerAssetProxy(bytes4,address,address)":{"details":"Registers an asset proxy to an asset proxy id.      An id can only be assigned to a single proxy at a given time.","params":{"assetProxyId":"Id to register`newAssetProxy` under.","newAssetProxy":"Address of new asset proxy to register, or 0x0 to unset assetProxyId.","oldAssetProxy":"Existing asset proxy to overwrite, or 0x0 if assetProxyId is currently unused."}},"setSignatureValidatorApproval(address,bool)":{"details":"Approves/unnapproves a Validator contract to verify signatures on signer\'s behalf.","params":{"approval":"Approval or disapproval of  Validator contract.","validatorAddress":"Address of Validator contract."}}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/external/0x/Exchange/interfaces/IExchange.sol":"IExchange"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/external/0x/Exchange/interfaces/IAssetProxyDispatcher.sol":{"keccak256":"0x283cfbe9da3a1416c9c4c699bff4e0039d7d7c80b538adf7674f18e1416aaef7","urls":["bzzr://b27c7df9ab900f8f4ffb5c652761f170b8830c31b5085b0e9ff19d50c1decf26"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/external/0x/Exchange/interfaces/IExchange.sol":{"keccak256":"0x69d0498432bba406f2cc8d7c887acf98fd48a86bef8572cb0281bc751b312292","urls":["bzzr://7de72bd9f1df46a6db414796b12d5f9d7d28772de9aa2898c6f5335219bd359e"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/external/0x/Exchange/interfaces/IExchangeCore.sol":{"keccak256":"0xefc75f2aabf9e19234dbbcd3790224b7a37502289bd4c1b1aa829248b75f417b","urls":["bzzr://c12b5605c5da7a605067e12972edc750a9cea9d9ec5da52528b66103f9486101"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/external/0x/Exchange/interfaces/IMatchOrders.sol":{"keccak256":"0xefb79f2fd96733d3b04cb8e02ce68ba9994614c79eef4a5adcf7a3ceeb77f078","urls":["bzzr://2a39c2a7c3de49a69c5f34a6a3bbe9d22a450bafd2e524f55dd3566f7d9fdc7c"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/external/0x/Exchange/interfaces/ISignatureValidator.sol":{"keccak256":"0x3bf5228d3ef009bc84e68cb302ae330efac12d4f1fbe08c385dee519dc9ee3ed","urls":["bzzr://f52f8acf747e68a61c834c2023f6cb76c6d9feb9b84a4693de22be00fddc21f1"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/external/0x/Exchange/interfaces/ITransactions.sol":{"keccak256":"0x3023098ad34e97e1ab3afba65ed6e9687f4edf0af00fb62d6cabbec98f55e524","urls":["bzzr://2c07e913d2e6eb25f8ba14243d68c14d47cf8dbe95ca54932c54e2388c79dcce"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/external/0x/Exchange/interfaces/IWrapperFunctions.sol":{"keccak256":"0x7f802191c4dd4b6d58de94f0334363267f72836f04deffbe315852031a1aa41f","urls":["bzzr://8589855736f9a687f271ad400af2e86af17da251523159dabde3cc5b2c28be9e"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/external/0x/Exchange/libs/LibEIP712.sol":{"keccak256":"0x16dc66e08199422c0bd0f2be5e0379b1b9403379d5f8ef823e9d911bce09fb81","urls":["bzzr://d4a8943b40e1395887e425628079d27cca609c6da2d72b9c3d07d3a56993f405"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/external/0x/Exchange/libs/LibFillResults.sol":{"keccak256":"0x2064e95b6a24345edcff3a17df6bd6aba63f68cce9a2d3e548cc78baca791cc1","urls":["bzzr://635d39afec35c25154c552ccdcd95c124df20e31d4a6f3f8a70892515c80f0c8"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/external/0x/Exchange/libs/LibOrder.sol":{"keccak256":"0x6b6a23c65daa2c2559575452593183394afd0b757e01e4ae25e32787b03c4158","urls":["bzzr://33c081a5303948e958cb95a5efd25415e0266ae2023c912977c6ee888798f4a5"]}},"version":1}',
bytecode:"0x",deployedBytecode:"0x",sourceMap:"",deployedSourceMap:"",source:'/*\n\n  Copyright 2018 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the "License");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an "AS IS" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity 0.5.7;\npragma experimental ABIEncoderV2;\n\nimport "./IExchangeCore.sol";\nimport "./IMatchOrders.sol";\nimport "./ISignatureValidator.sol";\nimport "./ITransactions.sol";\nimport "./IAssetProxyDispatcher.sol";\nimport "./IWrapperFunctions.sol";\n\ncontract IExchange is\n    IExchangeCore,\n    IMatchOrders,\n    ISignatureValidator,\n    ITransactions,\n    IAssetProxyDispatcher,\n    IWrapperFunctions\n{}\n',sourcePath:"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/external/0x/Exchange/interfaces/IExchange.sol",compiler:{name:"solc",version:"0.5.7+commit.6da8b019.Linux.g++"},networks:{},schemaVersion:"3.0.23",updatedAt:"2020-05-05T17:13:36.973Z",devdoc:{methods:{"batchCancelOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])":{details:"Synchronously cancels multiple orders in a single transaction.",params:{orders:"Array of order specifications."}},"batchFillOrKillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])":{details:"Synchronously executes multiple calls of fillOrKill.",params:{orders:"Array of order specifications.",signatures:"Proofs that orders have been created by makers.",takerAssetFillAmounts:"Array of desired amounts of takerAsset to sell in orders."},"return":"Amounts filled and fees paid by makers and taker."},"batchFillOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])":{details:"Synchronously executes multiple calls of fillOrder.",params:{orders:"Array of order specifications.",signatures:"Proofs that orders have been created by makers.",takerAssetFillAmounts:"Array of desired amounts of takerAsset to sell in orders."},"return":"Amounts filled and fees paid by makers and taker."},"batchFillOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256[],bytes[])":{details:"Fills an order with specified parameters and ECDSA signature.      Returns false if the transaction would otherwise revert.",params:{orders:"Array of order specifications.",signatures:"Proofs that orders have been created by makers.",takerAssetFillAmounts:"Array of desired amounts of takerAsset to sell in orders."},"return":"Amounts filled and fees paid by makers and taker."},"cancelOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{details:"After calling, the order can not be filled anymore.",params:{order:"Order struct containing order specifications."}},"cancelOrdersUpTo(uint256)":{details:"Cancels all orders created by makerAddress with a salt less than or equal to the targetOrderEpoch      and senderAddress equal to msg.sender (or null address if msg.sender == makerAddress).",params:{targetOrderEpoch:"Orders created with a salt less or equal to this value will be cancelled."}},"executeTransaction(uint256,address,bytes,bytes)":{details:"Executes an exchange method call in the context of signer.",params:{data:"AbiV2 encoded calldata.",salt:"Arbitrary number to ensure uniqueness of transaction hash.",signature:"Proof of signer transaction by signer.",signerAddress:"Address of transaction signer."}},"fillOrKillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)":{details:"Fills the input order. Reverts if exact takerAssetFillAmount not filled.",params:{order:"LibOrder.Order struct containing order specifications.",signature:"Proof that order has been created by maker.",takerAssetFillAmount:"Desired amount of takerAsset to sell."}},"fillOrder((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)":{details:"Fills the input order.",params:{order:"Order struct containing order specifications.",signature:"Proof that order has been created by maker.",takerAssetFillAmount:"Desired amount of takerAsset to sell."},"return":"Amounts filled and fees paid by maker and taker."},"fillOrderNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint256,bytes)":{details:"Fills an order with specified parameters and ECDSA signature.      Returns false if the transaction would otherwise revert.",params:{order:"LibOrder.Order struct containing order specifications.",signature:"Proof that order has been created by maker.",takerAssetFillAmount:"Desired amount of takerAsset to sell."},"return":"Amounts filled and fees paid by maker and taker."},"getAssetProxy(bytes4)":{details:"Gets an asset proxy.",params:{assetProxyId:"Id of the asset proxy."},"return":"The asset proxy registered to assetProxyId. Returns 0x0 if no proxy is registered."},"getOrderInfo((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{details:"Gets information about an order: status, hash, and amount filled.",params:{order:"Order to gather information on."},"return":"OrderInfo Information about the order and its state.                   See LibOrder.OrderInfo for a complete description."},"isValidSignature(bytes32,address,bytes)":{details:"Verifies that a signature is valid.",params:{hash:"Message hash that is signed.",signature:"Proof of signing.",signerAddress:"Address of signer."},"return":"Validity of order signature."},"marketBuyOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])":{details:"Synchronously executes multiple calls of fillOrder until total amount of makerAsset is bought by taker.",params:{makerAssetFillAmount:"Desired amount of makerAsset to buy.",orders:"Array of order specifications.",signatures:"Proofs that orders have been signed by makers."},"return":"Amounts filled and fees paid by makers and taker."},"marketBuyOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])":{details:"Synchronously executes multiple fill orders in a single transaction until total amount is bought by taker.      Returns false if the transaction would otherwise revert.",params:{makerAssetFillAmount:"Desired amount of makerAsset to buy.",orders:"Array of order specifications.",signatures:"Proofs that orders have been signed by makers."},"return":"Amounts filled and fees paid by makers and taker."},"marketSellOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])":{details:"Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.",params:{orders:"Array of order specifications.",signatures:"Proofs that orders have been created by makers.",takerAssetFillAmount:"Desired amount of takerAsset to sell."},"return":"Amounts filled and fees paid by makers and taker."},"marketSellOrdersNoThrow((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],uint256,bytes[])":{details:"Synchronously executes multiple calls of fillOrder until total amount of takerAsset is sold by taker.      Returns false if the transaction would otherwise revert.",params:{orders:"Array of order specifications.",signatures:"Proofs that orders have been signed by makers.",takerAssetFillAmount:"Desired amount of takerAsset to sell."},"return":"Amounts filled and fees paid by makers and taker."},"matchOrders((address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),(address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes,bytes)":{details:"Match two complementary orders that have a profitable spread.      Each order is filled at their respective price point. However, the calculations are      carried out as though the orders are both being filled at the right order's price point.      The profit made by the left order goes to the taker (who matched the two orders).",params:{leftOrder:"First order to match.",leftSignature:"Proof that order was created by the left maker.",rightOrder:"Second order to match.",rightSignature:"Proof that order was created by the right maker."},"return":"matchedFillResults Amounts filled and fees paid by maker and taker of matched orders. TODO: Make this function external once supported by Solidity (See Solidity Issues #3199, #1603)"},"preSign(bytes32,address,bytes)":{details:"Approves a hash on-chain using any valid signature type.      After presigning a hash, the preSign signature type will become valid for that hash and signer.",params:{signature:"Proof that the hash has been signed by signer.",signerAddress:"Address that should have signed the given hash."}},"registerAssetProxy(bytes4,address,address)":{details:"Registers an asset proxy to an asset proxy id.      An id can only be assigned to a single proxy at a given time.",params:{assetProxyId:"Id to register`newAssetProxy` under.",newAssetProxy:"Address of new asset proxy to register, or 0x0 to unset assetProxyId.",oldAssetProxy:"Existing asset proxy to overwrite, or 0x0 if assetProxyId is currently unused."}},"setSignatureValidatorApproval(address,bool)":{details:"Approves/unnapproves a Validator contract to verify signatures on signer's behalf.",params:{approval:"Approval or disapproval of  Validator contract.",validatorAddress:"Address of Validator contract."}}}},userdoc:{methods:{}}};