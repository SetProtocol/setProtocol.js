"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.LiquidatorUtils={contractName:"LiquidatorUtils",abi:[],metadata:'{"compiler":{"version":"0.5.7+commit.6da8b019"},"language":"Solidity","output":{"abi":[],"devdoc":{"author":"Set Protocol * Contract of generic utils functions that can be used by liquidators and supporting contracts.","methods":{},"title":"LiquidatorUtils"},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/liquidators/utils/LiquidatorUtils.sol":"LiquidatorUtils"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/ICore.sol":{"keccak256":"0x5dc3db4398630ea52d2a40c9ddfa89d94e65c2770a12bab4d2a5c8eb573fb0a0","urls":["bzzr://25e90b53f61b388e0950b808e2296f82d427b66cfd6021212713436b2a592e31"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/IFeeCalculator.sol":{"keccak256":"0xfdce9b333367bfed8f379738b0eabfe4be0045db735e9f24493de09729593d4d","urls":["bzzr://d2fa7438b492f4f08009810e3e9a2e2c22a429c307562e3f5274d4bfe2d21734"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/ILiquidator.sol":{"keccak256":"0x9d1e66d56cd51d14787cce5ff8fb378eb6a0bb704e7102d7c4eda5de7f585af3","urls":["bzzr://c44220025ac21fda1dda68e236572c5c4f82bf53ccf504a020487b8c746c7b26"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/IOracleWhiteList.sol":{"keccak256":"0xc4623b7082c6e017d1f820a05289a71d4262c01444ff1571e92f64a4e82662af","urls":["bzzr://c11cc5b2b50c5e708a09b10adf350e9ea3d3427cc2f199516db4ae9be498aaac"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/IRebalancingSetToken.sol":{"keccak256":"0xe7356a7b0f0cc95d9526395d776f523a48fd65618730d67b4f31f20ffbd380da","urls":["bzzr://605a33a818eff7ce3370f25fccb751f61c066b4db0772605a2215d1357d68072"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/IRebalancingSetTokenV2.sol":{"keccak256":"0x46c9dc7c09957eaa4f896b33d8d25ff5268e710172330f033379eed62a052ace","urls":["bzzr://c5b5cdc4e58c0905a03ef70954ac23eefe4776c243049f37e7b93cd8277bb7cb"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/ISetToken.sol":{"keccak256":"0xfa6c0c07f8394d89b6b8f72e15778f8452a9341acb20cebb8421f3522aaca1bd","urls":["bzzr://ccf23bb78fd507bf8cbf5cf7ac2a660a1463b87a3689196e42b8f6862d1a6b11"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/lib/Rebalance.sol":{"keccak256":"0x74ffa689d93ced6c6e0377a35ec1274241b6191b5aaac5576ada379ac3840286","urls":["bzzr://25bdda3f1f5adfa2c83c760c44993d250cd2df037360f0018d22d268df79e887"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/lib/RebalancingLibrary.sol":{"keccak256":"0x7f9dd2f95b2ee71a98b94cb9b0df15874aa134e7480d04a1fcf36aff166a55f4","urls":["bzzr://f43a5563ec5df095151eee30cf7a0941b5a971917c27c7b34d9586b36563ab5b"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/lib/SetMath.sol":{"keccak256":"0x4c6762ad3d11c03889df48cc3b26bd199f958deffa651ec30655cd1654a47303","urls":["bzzr://b8e968dd2840d9586babe7852589abff3972135fff299285eaafd31687ae4385"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/liquidators/impl/SetUSDValuation.sol":{"keccak256":"0xb0b518c3a5f80e3f08df8157fb4dda48e1d48d2fa1c7149ee2e52bd21b1e8916","urls":["bzzr://b36893ff192fe43a9ed50161f5b616ed63b9fdeeb0b50b8512f19a84306380e0"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/liquidators/utils/LiquidatorUtils.sol":{"keccak256":"0x6d0490b5df5842015e56abbc22e2be72c9e3254962c05088dd42063ae3c5fe41","urls":["bzzr://589ef6c305bd961a75ef7a5afa23e83e87e18402f738f1e43320e38dfdbd54de"]},"openzeppelin-solidity/contracts/math/Math.sol":{"keccak256":"0x775160984ceb0931bf67e718fb23afd6fc2a5d38a6e2378ebb438a039ed2269e","urls":["bzzr://209e27ad1c13e3e9b157915e0269ee4c3b6f0a494660dcc4acf1faf102e1a7ad"]},"openzeppelin-solidity/contracts/math/SafeMath.sol":{"keccak256":"0xc2a200a877c4a9b2475c246c54ffecc69ffde3e11af83319c63c2dc5458bac80","urls":["bzzr://c8876e2c39b60f155d748d71d715c8f3903fae5a405ac599adcb6ad2f9a583f9"]},"openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol":{"keccak256":"0xa60f7f7ce98ca2d75c8e02da982d3fe91176269fdab2589bbbb7cc65f2d7c9d3","urls":["bzzr://5edd2c9be304a1e8ed055e243daba5345f242008164f9a0565c33197b860323b"]},"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x59e7df16169a498cb8837963b2f5461d88e63bd1eb6c7d58b814d76b84ccbe61","urls":["bzzr://e572c9c4e02e37349702451bf3b5dcbbc86a19da5a51695b5b3e1bfe1e7825dc"]},"set-protocol-contract-utils/contracts/lib/AddressArrayUtils.sol":{"keccak256":"0xb716eab4e8c5a336a2f19078928530829af097912bd1b925644f914b63601f08","urls":["bzzr://d8a21d39779beb316adb5180d08dcba1941eeccd9412ff08feb21a631c18c269"]},"set-protocol-contract-utils/contracts/lib/CommonMath.sol":{"keccak256":"0x3d1d08c6efc2a973fe2c02ddcb02fd99a8c8eb75f74dcbd93e8e15864eee2b6b","urls":["bzzr://580815dd1cf648a4521d923e59087de21143d9c48115ab71579a1f5a8f3d36af"]},"set-protocol-oracles/contracts/meta-oracles/interfaces/IOracle.sol":{"keccak256":"0xeb5a447a0b1ef47547ce12a91b72412880edb9690aa9bcd8746fc3a379f2fbe9","urls":["bzzr://261675b916b84f58bea71ec28c4f711291053174ddf47e860c26daaee506744a"]}},"version":1}',bytecode:"0x605a6023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723058208d5536b85f4f71a43044bc76930f77364284dedbc1c44b7ba21f1c24e330504b6c6578706572696d656e74616cf50037",deployedBytecode:"0x73000000000000000000000000000000000000000030146080604052600080fdfea265627a7a723058208d5536b85f4f71a43044bc76930f77364284dedbc1c44b7ba21f1c24e330504b6c6578706572696d656e74616cf50037",sourceMap:"1478:4338:58:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24",deployedSourceMap:"1478:4338:58:-;;;;;;;;",source:'/*\n    Copyright 2020 Set Labs Inc.\n\n    Licensed under the Apache License,\n        Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\npragma solidity 0.5.7;\npragma experimental "ABIEncoderV2";\n\nimport { ERC20Detailed } from "openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol";\nimport { SafeMath } from "openzeppelin-solidity/contracts/math/SafeMath.sol";\nimport { AddressArrayUtils } from "set-protocol-contract-utils/contracts/lib/AddressArrayUtils.sol";\nimport { CommonMath } from "set-protocol-contract-utils/contracts/lib/CommonMath.sol";\nimport { IOracle } from "set-protocol-oracles/contracts/meta-oracles/interfaces/IOracle.sol";\n\nimport { ISetToken } from "../../interfaces/ISetToken.sol";\nimport { IOracleWhiteList } from "../../interfaces/IOracleWhiteList.sol";\nimport { SetUSDValuation } from "../impl/SetUSDValuation.sol";\n\n\n/**\n * @title LiquidatorUtils\n * @author Set Protocol\n *\n * Contract of generic utils functions that can be used by liquidators and supporting contracts.\n */\nlibrary LiquidatorUtils {\n    using SafeMath for uint256;\n    using CommonMath for uint256;\n\n    /* ============ Internal Functions ============ */\n\n    /**\n     * Calculate the rebalance volume as the difference in allocation percentages times market\n     * cap.\n     *\n     * rebalanceVolume = currentSetValue * currentSetQty * abs(currentSetAllocation-nextSetAllocation)\n     *\n     * @param _currentSet               The Set to rebalance from\n     * @param _nextSet                  The Set to rebalance to\n     * @param _oracleWhiteList          OracleWhiteList used for valuation\n     * @param _currentSetQuantity       Quantity of currentSet to rebalance\n     * @return                          Rebalance volume\n     */\n    function calculateRebalanceVolume(\n        ISetToken _currentSet,\n        ISetToken _nextSet,\n        IOracleWhiteList _oracleWhiteList,\n        uint256 _currentSetQuantity\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        // Calculate currency value of current set\n        uint256 currentSetValue = SetUSDValuation.calculateSetTokenDollarValue(\n            _currentSet,\n            _oracleWhiteList\n        );\n\n        // Calculate allocationAsset\'s current set allocation in 18 decimal scaled percentage\n        address allocationAsset = _currentSet.getComponents()[0];\n        uint256 currentSetAllocation = calculateAssetAllocation(\n            _currentSet,\n            _oracleWhiteList,\n            allocationAsset\n        );\n\n        // Calculate allocationAsset\'s next set allocation in 18 decimal scaled percentage\n        uint256 nextSetAllocation = calculateAssetAllocation(\n            _nextSet,\n            _oracleWhiteList,\n            allocationAsset\n        );\n\n        // Get allocation change\n        uint256 allocationChange = currentSetAllocation > nextSetAllocation ?\n            currentSetAllocation.sub(nextSetAllocation) :\n            nextSetAllocation.sub(currentSetAllocation);\n\n        // Return rebalance volume by multiplying allocationChange by Set market cap, deScaling to avoid\n        // overflow potential, still have 18 decimals of precision\n        return currentSetValue.mul(_currentSetQuantity).deScale().mul(allocationChange).deScale();\n    }\n\n    /**\n     * Calculate the allocation percentage of passed asset in Set\n     *\n     * @param  _setToken            Set being evaluated\n     * @param  _oracleWhiteList     OracleWhiteList used for valuation\n     * @param  _asset               Asset that\'s allocation being calculated\n     * @return                      18 decimal scaled allocation percentage\n     */\n    function calculateAssetAllocation(\n        ISetToken _setToken,\n        IOracleWhiteList _oracleWhiteList,\n        address _asset\n    )\n        internal\n        view\n        returns (uint256)\n    {\n        address[] memory components = _setToken.getComponents();\n\n        // Get index of asset and return if asset in Set\n        (\n            uint256 assetIndex,\n            bool isInSet\n        ) = AddressArrayUtils.indexOf(components, _asset);\n\n        // Calculate allocation of asset or return 0 if not in Set\n        if (isInSet) {\n            uint256 setNaturalUnit = _setToken.naturalUnit();\n            uint256[] memory setUnits = _setToken.getUnits();\n\n            uint256 assetValue;\n            uint256 setValue = 0;\n            for (uint256 i = 0; i < components.length; i++) {\n                address currentComponent = components[i];\n\n                address oracle = _oracleWhiteList.getOracleAddressByToken(currentComponent);\n                uint256 price = IOracle(oracle).read();\n                uint256 decimals = ERC20Detailed(currentComponent).decimals();\n\n                // Calculate currency value of single component in Set\n                uint256 componentValue = SetUSDValuation.calculateTokenAllocationAmountUSD(\n                    price,\n                    setNaturalUnit,\n                    setUnits[i],\n                    decimals\n                );\n\n                // Add currency value of single component to running currency value tally\n                setValue = setValue.add(componentValue);\n                if (i == assetIndex) {assetValue = componentValue;}\n            }\n\n            return assetValue.scale().div(setValue);\n        } else {\n            return 0;\n        }\n    }\n}',sourcePath:"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/liquidators/utils/LiquidatorUtils.sol",compiler:{name:"solc",version:"0.5.7+commit.6da8b019.Linux.g++"},networks:{},schemaVersion:"3.0.23",updatedAt:"2020-05-05T17:13:36.554Z",devdoc:{author:"Set Protocol * Contract of generic utils functions that can be used by liquidators and supporting contracts.",methods:{},title:"LiquidatorUtils"},userdoc:{methods:{}}};