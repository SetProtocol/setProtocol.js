"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.IRebalancingSetFactory={contractName:"IRebalancingSetFactory",abi:[{constant:false,inputs:[{name:"_components",type:"address[]"},{name:"_units",type:"uint256[]"},{name:"_naturalUnit",type:"uint256"},{name:"_name",type:"bytes32"},{name:"_symbol",type:"bytes32"},{name:"_callData",type:"bytes"}],name:"createSet",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[],name:"core",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[],name:"minimumRebalanceInterval",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[],name:"minimumProposalPeriod",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[],name:"minimumTimeToPivot",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[],name:"maximumTimeToPivot",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[],name:"minimumNaturalUnit",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[],name:"maximumNaturalUnit",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[],name:"rebalanceAuctionModule",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"nonpayable",type:"function"}],metadata:'{"compiler":{"version":"0.5.7+commit.6da8b019"},"language":"Solidity","output":{"abi":[{"constant":false,"inputs":[],"name":"minimumTimeToPivot","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_components","type":"address[]"},{"name":"_units","type":"uint256[]"},{"name":"_naturalUnit","type":"uint256"},{"name":"_name","type":"bytes32"},{"name":"_symbol","type":"bytes32"},{"name":"_callData","type":"bytes"}],"name":"createSet","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"maximumTimeToPivot","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"minimumRebalanceInterval","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"maximumNaturalUnit","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"minimumNaturalUnit","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"rebalanceAuctionModule","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"core","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"minimumProposalPeriod","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Set Protocol * The IRebalancingSetFactory interface provides operability for authorized contracts to interact with RebalancingSetTokenFactory","methods":{"core()":{"return":"address        core address"},"createSet(address[],uint256[],uint256,bytes32,bytes32,bytes)":{"params":{"_callData":"Byte string containing additional call parameters","_components":"The address of component tokens","_name":"The bytes32 encoded name of the new Set","_naturalUnit":"The minimum unit to be issued or redeemed","_symbol":"The bytes32 encoded symbol of the new Set","_units":"The units of each component token"},"return":"setTokenAddress       The address of the new Set"},"maximumNaturalUnit()":{"return":"uint256    Maximum Minimum natural unit"},"maximumTimeToPivot()":{"return":"uint256    Maximum amount of time before auction pivot reached"},"minimumNaturalUnit()":{"return":"uint256    Minimum natural unit"},"minimumProposalPeriod()":{"return":"uint256    Minimum amount of time users can review proposals in seconds"},"minimumRebalanceInterval()":{"return":"uint256    Minimum amount of time between rebalances in seconds"},"minimumTimeToPivot()":{"return":"uint256    Minimum amount of time before auction pivot reached"},"rebalanceAuctionModule()":{"return":"address      Address of rebalanceAuctionModule"}},"title":"IRebalancingSetFactory"},"userdoc":{"methods":{"core()":{"notice":"Return core address"},"createSet(address[],uint256[],uint256,bytes32,bytes32,bytes)":{"notice":"Deploys a new Set Token and adds it to the valid list of SetTokens"},"maximumNaturalUnit()":{"notice":"Getter for maximumNaturalUnit of RebalancingSetTokenFactory"},"maximumTimeToPivot()":{"notice":"Getter for maximumTimeToPivot of RebalancingSetTokenFactory, used to enforce auctionTimeToPivot when proposing a rebalance"},"minimumNaturalUnit()":{"notice":"Getter for minimumNaturalUnit of RebalancingSetTokenFactory"},"minimumProposalPeriod()":{"notice":"Getter for minimumProposalPeriod of RebalancingSetTokenFactory, used to enforce proposalPeriod when creating a RebalancingSetToken"},"minimumRebalanceInterval()":{"notice":"Getter for minimumRebalanceInterval of RebalancingSetTokenFactory, used to enforce rebalanceInterval when creating a RebalancingSetToken"},"minimumTimeToPivot()":{"notice":"Getter for minimumTimeToPivot of RebalancingSetTokenFactory, used to enforce auctionTimeToPivot when proposing a rebalance"},"rebalanceAuctionModule()":{"notice":"Getter for rebalanceAuctionModule address on RebalancingSetTokenFactory"}}}},"settings":{"compilationTarget":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/IRebalancingSetFactory.sol":"IRebalancingSetFactory"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/IRebalancingSetFactory.sol":{"keccak256":"0x781ccbdaa2b8908599e6cd5cdf077f2add7077b72acd064fb4ae560c00ddf62d","urls":["bzzr://93950fa7b8ce25f427edfe6a136c850ef41f1002eadd94ec957b8e6abe85812b"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/ISetFactory.sol":{"keccak256":"0xf795ab9e9ac11340a600f235073b4ec4bdea92d3c01601ced1e5afd3c2718301","urls":["bzzr://eb4f00f66933560aa133ee90030b23d7a30937e6591a83d56b3935a927e8ca9f"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/IWhiteList.sol":{"keccak256":"0x35158bdba86e9e08faf0bdf5e1756fb20ee0404e0b0b3c2d529e0e5b03b5adfd","urls":["bzzr://130cfe1fe490b464a6d42fd8613dd42a9f3375f24b6ab2dd91448f12895992ab"]}},"version":1}',bytecode:"0x",deployedBytecode:"0x",sourceMap:"",deployedSourceMap:"",source:'/*\n    Copyright 2018 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\npragma solidity 0.5.7;\n\nimport { ISetFactory } from "./ISetFactory.sol";\nimport { IWhiteList } from "./IWhiteList.sol";\n\n\n/**\n * @title IRebalancingSetFactory\n * @author Set Protocol\n *\n * The IRebalancingSetFactory interface provides operability for authorized contracts\n * to interact with RebalancingSetTokenFactory\n */\ncontract IRebalancingSetFactory is\n    ISetFactory\n{\n    /**\n     * Getter for minimumRebalanceInterval of RebalancingSetTokenFactory, used\n     * to enforce rebalanceInterval when creating a RebalancingSetToken\n     *\n     * @return uint256    Minimum amount of time between rebalances in seconds\n     */\n    function minimumRebalanceInterval()\n        external\n        returns (uint256);\n\n    /**\n     * Getter for minimumProposalPeriod of RebalancingSetTokenFactory, used\n     * to enforce proposalPeriod when creating a RebalancingSetToken\n     *\n     * @return uint256    Minimum amount of time users can review proposals in seconds\n     */\n    function minimumProposalPeriod()\n        external\n        returns (uint256);\n\n    /**\n     * Getter for minimumTimeToPivot of RebalancingSetTokenFactory, used\n     * to enforce auctionTimeToPivot when proposing a rebalance\n     *\n     * @return uint256    Minimum amount of time before auction pivot reached\n     */\n    function minimumTimeToPivot()\n        external\n        returns (uint256);\n\n    /**\n     * Getter for maximumTimeToPivot of RebalancingSetTokenFactory, used\n     * to enforce auctionTimeToPivot when proposing a rebalance\n     *\n     * @return uint256    Maximum amount of time before auction pivot reached\n     */\n    function maximumTimeToPivot()\n        external\n        returns (uint256);\n\n    /**\n     * Getter for minimumNaturalUnit of RebalancingSetTokenFactory\n     *\n     * @return uint256    Minimum natural unit\n     */\n    function minimumNaturalUnit()\n        external\n        returns (uint256);\n\n    /**\n     * Getter for maximumNaturalUnit of RebalancingSetTokenFactory\n     *\n     * @return uint256    Maximum Minimum natural unit\n     */\n    function maximumNaturalUnit()\n        external\n        returns (uint256);\n\n    /**\n     * Getter for rebalanceAuctionModule address on RebalancingSetTokenFactory\n     *\n     * @return address      Address of rebalanceAuctionModule\n     */\n    function rebalanceAuctionModule()\n        external\n        returns (address);\n}\n',sourcePath:"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/IRebalancingSetFactory.sol",compiler:{name:"solc",version:"0.5.7+commit.6da8b019.Linux.g++"},networks:{},schemaVersion:"3.0.23",updatedAt:"2020-05-05T17:13:36.359Z",devdoc:{author:"Set Protocol * The IRebalancingSetFactory interface provides operability for authorized contracts to interact with RebalancingSetTokenFactory",methods:{"core()":{"return":"address        core address"},"createSet(address[],uint256[],uint256,bytes32,bytes32,bytes)":{params:{_callData:"Byte string containing additional call parameters",_components:"The address of component tokens",_name:"The bytes32 encoded name of the new Set",_naturalUnit:"The minimum unit to be issued or redeemed",_symbol:"The bytes32 encoded symbol of the new Set",_units:"The units of each component token"},"return":"setTokenAddress       The address of the new Set"},"maximumNaturalUnit()":{"return":"uint256    Maximum Minimum natural unit"},"maximumTimeToPivot()":{"return":"uint256    Maximum amount of time before auction pivot reached"},"minimumNaturalUnit()":{"return":"uint256    Minimum natural unit"},"minimumProposalPeriod()":{"return":"uint256    Minimum amount of time users can review proposals in seconds"},"minimumRebalanceInterval()":{"return":"uint256    Minimum amount of time between rebalances in seconds"},"minimumTimeToPivot()":{"return":"uint256    Minimum amount of time before auction pivot reached"},"rebalanceAuctionModule()":{"return":"address      Address of rebalanceAuctionModule"}},title:"IRebalancingSetFactory"},userdoc:{methods:{"core()":{notice:"Return core address"},"createSet(address[],uint256[],uint256,bytes32,bytes32,bytes)":{notice:"Deploys a new Set Token and adds it to the valid list of SetTokens"},"maximumNaturalUnit()":{notice:"Getter for maximumNaturalUnit of RebalancingSetTokenFactory"},"maximumTimeToPivot()":{notice:"Getter for maximumTimeToPivot of RebalancingSetTokenFactory, used to enforce auctionTimeToPivot when proposing a rebalance"},"minimumNaturalUnit()":{notice:"Getter for minimumNaturalUnit of RebalancingSetTokenFactory"},"minimumProposalPeriod()":{notice:"Getter for minimumProposalPeriod of RebalancingSetTokenFactory, used to enforce proposalPeriod when creating a RebalancingSetToken"},"minimumRebalanceInterval()":{notice:"Getter for minimumRebalanceInterval of RebalancingSetTokenFactory, used to enforce rebalanceInterval when creating a RebalancingSetToken"},"minimumTimeToPivot()":{notice:"Getter for minimumTimeToPivot of RebalancingSetTokenFactory, used to enforce auctionTimeToPivot when proposing a rebalance"},"rebalanceAuctionModule()":{notice:"Getter for rebalanceAuctionModule address on RebalancingSetTokenFactory"}}}};