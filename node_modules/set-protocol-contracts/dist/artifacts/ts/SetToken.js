"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.SetToken={contractName:"SetToken",abi:[{constant:true,inputs:[],name:"name",outputs:[{name:"",type:"string"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{name:"spender",type:"address"},{name:"value",type:"uint256"}],name:"approve",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{name:"from",type:"address"},{name:"to",type:"address"},{name:"value",type:"uint256"}],name:"transferFrom",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"decimals",outputs:[{name:"",type:"uint8"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{name:"spender",type:"address"},{name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"naturalUnit",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"owner",type:"address"}],name:"balanceOf",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"symbol",outputs:[{name:"",type:"string"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{name:"spender",type:"address"},{name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"to",type:"address"},{name:"value",type:"uint256"}],name:"transfer",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"factory",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"",type:"uint256"}],name:"components",outputs:[{name:"",type:"address"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"owner",type:"address"},{name:"spender",type:"address"}],name:"allowance",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"",type:"uint256"}],name:"units",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{inputs:[{name:"_factory",type:"address"},{name:"_components",type:"address[]"},{name:"_units",type:"uint256[]"},{name:"_naturalUnit",type:"uint256"},{name:"_name",type:"string"},{name:"_symbol",type:"string"}],payable:false,stateMutability:"nonpayable",type:"constructor"},{anonymous:false,inputs:[{indexed:true,name:"from",type:"address"},{indexed:true,name:"to",type:"address"},{indexed:false,name:"value",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:false,inputs:[{indexed:true,name:"owner",type:"address"},{indexed:true,name:"spender",type:"address"},{indexed:false,name:"value",type:"uint256"}],name:"Approval",type:"event"},{constant:false,inputs:[{name:"_issuer",type:"address"},{name:"_quantity",type:"uint256"}],name:"mint",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_from",type:"address"},{name:"_quantity",type:"uint256"}],name:"burn",outputs:[],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"getComponents",outputs:[{name:"",type:"address[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"getUnits",outputs:[{name:"",type:"uint256[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_tokenAddress",type:"address"}],name:"tokenIsComponent",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"view",type:"function"}],metadata:'{"compiler":{"version":"0.5.7+commit.6da8b019"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"getUnits","outputs":[{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_tokenAddress","type":"address"}],"name":"tokenIsComponent","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"from","type":"address"},{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_issuer","type":"address"},{"name":"_quantity","type":"uint256"}],"name":"mint","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"naturalUnit","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getComponents","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_quantity","type":"uint256"}],"name":"burn","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"factory","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"components","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"units","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_factory","type":"address"},{"name":"_components","type":"address[]"},{"name":"_units","type":"uint256[]"},{"name":"_naturalUnit","type":"uint256"},{"name":"_name","type":"string"},{"name":"_symbol","type":"string"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}],"devdoc":{"author":"Set Protocol * Implementation of the basic Set token.","methods":{"allowance(address,address)":{"details":"Function to check the amount of tokens that an owner allowed to a spender.","params":{"owner":"address The address which owns the funds.","spender":"address The address which will spend the funds."},"return":"A uint256 specifying the amount of tokens still available for the spender."},"approve(address,uint256)":{"details":"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender\'s allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729","params":{"spender":"The address which will spend the funds.","value":"The amount of tokens to be spent."}},"balanceOf(address)":{"details":"Gets the balance of the specified address.","params":{"owner":"The address to query the balance of."},"return":"A uint256 representing the amount owned by the passed address."},"constructor":{"params":{"_components":"A list of component address which you want to include","_factory":"The factory used to create the Set Token","_name":"The Set\'s name","_naturalUnit":"The minimum multiple of Sets that can be issued or redeemed","_symbol":"The Set\'s symbol","_units":"A list of quantities of each component (corresponds to the Set of _components)"}},"decimals()":{"return":"the number of decimals of the token."},"decreaseAllowance(address,uint256)":{"details":"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when _allowed[msg.sender][spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.","params":{"spender":"The address which will spend the funds.","subtractedValue":"The amount of tokens to decrease the allowance by."}},"increaseAllowance(address,uint256)":{"details":"Increase the amount of tokens that an owner allowed to a spender. approve should be called when _allowed[msg.sender][spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.","params":{"addedValue":"The amount of tokens to increase the allowance by.","spender":"The address which will spend the funds."}},"name()":{"return":"the name of the token."},"symbol()":{"return":"the symbol of the token."},"totalSupply()":{"details":"Total number of tokens in existence"},"transfer(address,uint256)":{"details":"Transfer token to a specified address","params":{"to":"The address to transfer to.","value":"The amount to be transferred."}},"transferFrom(address,address,uint256)":{"details":"Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.","params":{"from":"address The address which you want to send tokens from","to":"address The address which you want to transfer to","value":"uint256 the amount of tokens to be transferred"}}},"title":"SetToken"},"userdoc":{"methods":{"constructor":"Constructor function for Set token     * As looping operations are expensive, checking for duplicates will be on the onus of the application developer"}}},"settings":{"compilationTarget":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/tokens/SetToken.sol":"SetToken"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/ISetFactory.sol":{"keccak256":"0xf795ab9e9ac11340a600f235073b4ec4bdea92d3c01601ced1e5afd3c2718301","urls":["bzzr://eb4f00f66933560aa133ee90030b23d7a30937e6591a83d56b3935a927e8ca9f"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/tokens/SetToken.sol":{"keccak256":"0xf43a38d7e207c07164e2140e1b5db67c42868efd2093688e5115f80a3ddd2abb","urls":["bzzr://56166d86c383cb07f1c5d69254e5875d835deaf7f91cb59cb7e899ae6a785bf6"]},"openzeppelin-solidity/contracts/math/SafeMath.sol":{"keccak256":"0xc2a200a877c4a9b2475c246c54ffecc69ffde3e11af83319c63c2dc5458bac80","urls":["bzzr://c8876e2c39b60f155d748d71d715c8f3903fae5a405ac599adcb6ad2f9a583f9"]},"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol":{"keccak256":"0x3dceb7e4aa237a56111c13f77d7efadeceda7271d62bfac94ac79afab7c1f411","urls":["bzzr://2f34152a5bec385352002c31bc89f5e9935f628f1923ccea45c2281e0084a4db"]},"openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol":{"keccak256":"0xa60f7f7ce98ca2d75c8e02da982d3fe91176269fdab2589bbbb7cc65f2d7c9d3","urls":["bzzr://5edd2c9be304a1e8ed055e243daba5345f242008164f9a0565c33197b860323b"]},"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol":{"keccak256":"0x59e7df16169a498cb8837963b2f5461d88e63bd1eb6c7d58b814d76b84ccbe61","urls":["bzzr://e572c9c4e02e37349702451bf3b5dcbbc86a19da5a51695b5b3e1bfe1e7825dc"]},"set-protocol-contract-utils/contracts/lib/CommonMath.sol":{"keccak256":"0x3d1d08c6efc2a973fe2c02ddcb02fd99a8c8eb75f74dcbd93e8e15864eee2b6b","urls":["bzzr://580815dd1cf648a4521d923e59087de21143d9c48115ab71579a1f5a8f3d36af"]},"set-protocol-contract-utils/contracts/lib/CommonValidationsLibrary.sol":{"keccak256":"0x757ec17c9c86093af15b08fbdf99ee15203c0e64a3185d2e4745e9a6be1b2d20","urls":["bzzr://f14bb668c341da6994edece64b35601e000591434eee90c9454cb9a1f9f7d60e"]}},"version":1}',bytecode:"0x60806040523480156200001157600080fd5b506040516200181d3803806200181d833981018060405260c08110156200003757600080fd5b8151602083018051919392830192916401000000008111156200005957600080fd5b820160208101848111156200006d57600080fd5b81518560208202830111640100000000821117156200008b57600080fd5b50509291906020018051640100000000811115620000a857600080fd5b82016020810184811115620000bc57600080fd5b8151856020820283011164010000000082111715620000da57600080fd5b505060208201516040909201805191949293916401000000008111156200010057600080fd5b820160208101848111156200011457600080fd5b81516401000000008111828201871017156200012f57600080fd5b505092919060200180516401000000008111156200014c57600080fd5b820160208101848111156200016057600080fd5b81516401000000008111828201871017156200017b57600080fd5b505084519093508492508391506012906200019e9060039060208601906200091d565b508151620001b49060049060208501906200091d565b506005805460ff191660ff92909216919091179055505083518362000225576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180620017916033913960400191505060405180910390fd5b6040517f64cf166f00000000000000000000000000000000000000000000000000000000815260206004820181815288516024840152885173__CommonValidationsLibrary______________936364cf166f938b9392839260440191808601910280838360005b83811015620002a75781810151838201526020016200028d565b505050509050019250505060006040518083038186803b158015620002cb57600080fd5b505af4158015620002e0573d6000803e3d6000fd5b5050505073__CommonValidationsLibrary______________632c183f4387876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156200037157818101518382015260200162000357565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015620003b257818101518382015260200162000398565b5050505090500194505050505060006040518083038186803b158015620003d857600080fd5b505af4158015620003ed573d6000803e3d6000fd5b5060129250600091508190505b83811015620007a15760008882815181106200041257fe5b602002602001015190506000811162000477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018062001765602c913960400191505060405180910390fd5b60008a83815181106200048657fe5b602002602001015190506000600160a060020a031681600160a060020a03161415620004fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180620017c4602f913960400191505060405180910390fd5b6040805160048152602481018252602081018051600160e060020a03167f313ce5670000000000000000000000000000000000000000000000000000000017815291518151600093600160a060020a0386169392918291908083835b602083106200057b5780518252601f1990920191602091820191016200055a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114620005df576040519150601f19603f3d011682016040523d82523d6000602084013e620005e4565b606091505b505090508015620006945781600160a060020a031663313ce5676040518163ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040160206040518083038186803b1580156200064557600080fd5b505afa1580156200065a573d6000803e3d6000fd5b505050506040513d60208110156200067157600080fd5b5051945060ff808716908616106200068a57856200068c565b845b955062000699565b600095505b620006ad8264010000000062000866810204565b1562000705576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180620017f3602a913960400191505060405180910390fd5b50600160a060020a03166000818152600960205260408120805460ff19166001908117909155600780548083019091557fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688018054600160a060020a03191690931790925560088054808401825591527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3019190915501620003fa565b50620007da600a620007c6601260ff861664010000000062000b166200088482021704565b64010000000062000c936200089f82021704565b86101562000834576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806200173b602a913960400191505060405180910390fd5b5050600a8054600160a060020a031916600160a060020a039890981697909717909655505060065550620009c2915050565b600160a060020a031660009081526009602052604090205460ff1690565b6000828211156200089457600080fd5b508082035b92915050565b6000808311620008ae57600080fd5b600160005b83811015620008e35781620008d7818764010000000062000cd2620008eb82021704565b925050600101620008b3565b509392505050565b600082620008fc5750600062000899565b828202828482816200090a57fe5b04146200091657600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200096057805160ff191683800117855562000990565b8280016001018555821562000990579182015b828111156200099057825182559160200191906001019062000973565b506200099e929150620009a2565b5090565b620009bf91905b808211156200099e5760008155600101620009a9565b90565b610d6980620009d26000396000f3fe608060405234801561001057600080fd5b50600436106101305760003560e060020a9004806370a08231116100b1578063a9059cbb11610075578063a9059cbb146103ce578063c45a0155146103fa578063c5d574fe1461041e578063dd62ed3e1461043b578063e5fba6cc1461046957610130565b806370a082311461034057806395d89b411461036657806399d50d5d1461036e5780639dc29fac14610376578063a457c2d7146103a257610130565b806323b872dd116100f857806323b872dd1461028a578063313ce567146102c057806339509351146102de57806340c10f191461030a57806342a7cfd51461033857610130565b8063027aa9f51461013557806306fdde031461018d578063095ea7b31461020a57806318160ddd1461024a57806318c53aca14610264575b600080fd5b61013d610486565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610179578181015183820152602001610161565b505050509050019250505060405180910390f35b6101956104de565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101cf5781810151838201526020016101b7565b50505050905090810190601f1680156101fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102366004803603604081101561022057600080fd5b50600160a060020a03813516906020013561056b565b604080519115158252519081900360200190f35b610252610582565b60408051918252519081900360200190f35b6102366004803603602081101561027a57600080fd5b5035600160a060020a0316610588565b610236600480360360608110156102a057600080fd5b50600160a060020a038135811691602081013590911690604001356105a6565b6102c86105fd565b6040805160ff9092168252519081900360200190f35b610236600480360360408110156102f457600080fd5b50600160a060020a038135169060200135610606565b6103366004803603604081101561032057600080fd5b50600160a060020a038135169060200135610642565b005b61025261072f565b6102526004803603602081101561035657600080fd5b5035600160a060020a0316610735565b610195610750565b61013d6107b1565b6103366004803603604081101561038c57600080fd5b50600160a060020a038135169060200135610812565b610236600480360360408110156103b857600080fd5b50600160a060020a0381351690602001356108fb565b610236600480360360408110156103e457600080fd5b50600160a060020a038135169060200135610937565b610402610944565b60408051600160a060020a039092168252519081900360200190f35b6104026004803603602081101561043457600080fd5b5035610953565b6102526004803603604081101561045157600080fd5b50600160a060020a038135811691602001351661097a565b6102526004803603602081101561047f57600080fd5b50356109a5565b606060088054806020026020016040519081016040528092919081815260200182805480156104d457602002820191906000526020600020905b8154815260200190600101908083116104c0575b5050505050905090565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104d45780601f1061053f576101008083540402835291602001916104d4565b820191906000526020600020905b81548152906001019060200180831161054d57509395945050505050565b60006105783384846109c3565b5060015b92915050565b60025490565b600160a060020a031660009081526009602052604090205460ff1690565b60006105b3848484610a4b565b600160a060020a0384166000908152600160209081526040808320338085529252909120546105f39186916105ee908663ffffffff610b1616565b6109c3565b5060019392505050565b60055460ff1690565b336000818152600160209081526040808320600160a060020a038716845290915281205490916105789185906105ee908663ffffffff610b2b16565b600a60009054906101000a9004600160a060020a0316600160a060020a031663f2f4eb266040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561069557600080fd5b505af11580156106a9573d6000803e3d6000fd5b505050506040513d60208110156106bf57600080fd5b5051600160a060020a03163314610721576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610d1c6022913960400191505060405180910390fd5b61072b8282610b44565b5050565b60065481565b600160a060020a031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104d45780601f1061053f576101008083540402835291602001916104d4565b606060078054806020026020016040519081016040528092919081815260200182805480156104d457602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116107eb575050505050905090565b600a60009054906101000a9004600160a060020a0316600160a060020a031663f2f4eb266040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561086557600080fd5b505af1158015610879573d6000803e3d6000fd5b505050506040513d602081101561088f57600080fd5b5051600160a060020a031633146108f1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610cfa6022913960400191505060405180910390fd5b61072b8282610bec565b336000818152600160209081526040808320600160a060020a038716845290915281205490916105789185906105ee908663ffffffff610b1616565b6000610578338484610a4b565b600a54600160a060020a031681565b6007818154811061096057fe5b600091825260209091200154600160a060020a0316905081565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600881815481106109b257fe5b600091825260209091200154905081565b600160a060020a0382166109d657600080fd5b600160a060020a0383166109e957600080fd5b600160a060020a03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a038216610a5e57600080fd5b600160a060020a038316600090815260208190526040902054610a87908263ffffffff610b1616565b600160a060020a038085166000908152602081905260408082209390935590841681522054610abc908263ffffffff610b2b16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082821115610b2557600080fd5b50900390565b600082820183811015610b3d57600080fd5b9392505050565b600160a060020a038216610b5757600080fd5b600254610b6a908263ffffffff610b2b16565b600255600160a060020a038216600090815260208190526040902054610b96908263ffffffff610b2b16565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a038216610bff57600080fd5b600254610c12908263ffffffff610b1616565b600255600160a060020a038216600090815260208190526040902054610c3e908263ffffffff610b1616565b600160a060020a038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b6000808311610ca157600080fd5b600160005b83811015610cca5781610cbf818763ffffffff610cd216565b925050600101610ca6565b509392505050565b600082610ce15750600061057c565b82820282848281610cee57fe5b0414610b3d57600080fdfe536574546f6b656e2e6275726e3a2053656e646572206d75737420626520636f7265536574546f6b656e2e6d696e743a2053656e646572206d75737420626520636f7265a165627a7a72305820f46c566e85f7549295f3bd37e0b4aa3ae16ebe38b373884d1002b6b7b7a1a5660029536574546f6b656e2e636f6e7374727563746f723a20496e76616c6964206e61747572616c20756e6974536574546f6b656e2e636f6e7374727563746f723a20556e697473206d75737420626520706f736974697665536574546f6b656e2e636f6e7374727563746f723a204e61747572616c20756e6974206d75737420626520706f736974697665536574546f6b656e2e636f6e7374727563746f723a20496e76616c696420636f6d706f6e656e742061646472657373536574546f6b656e2e636f6e7374727563746f723a204475706c69636174656420636f6d706f6e656e74",deployedBytecode:"0x608060405234801561001057600080fd5b50600436106101305760003560e060020a9004806370a08231116100b1578063a9059cbb11610075578063a9059cbb146103ce578063c45a0155146103fa578063c5d574fe1461041e578063dd62ed3e1461043b578063e5fba6cc1461046957610130565b806370a082311461034057806395d89b411461036657806399d50d5d1461036e5780639dc29fac14610376578063a457c2d7146103a257610130565b806323b872dd116100f857806323b872dd1461028a578063313ce567146102c057806339509351146102de57806340c10f191461030a57806342a7cfd51461033857610130565b8063027aa9f51461013557806306fdde031461018d578063095ea7b31461020a57806318160ddd1461024a57806318c53aca14610264575b600080fd5b61013d610486565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610179578181015183820152602001610161565b505050509050019250505060405180910390f35b6101956104de565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101cf5781810151838201526020016101b7565b50505050905090810190601f1680156101fc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102366004803603604081101561022057600080fd5b50600160a060020a03813516906020013561056b565b604080519115158252519081900360200190f35b610252610582565b60408051918252519081900360200190f35b6102366004803603602081101561027a57600080fd5b5035600160a060020a0316610588565b610236600480360360608110156102a057600080fd5b50600160a060020a038135811691602081013590911690604001356105a6565b6102c86105fd565b6040805160ff9092168252519081900360200190f35b610236600480360360408110156102f457600080fd5b50600160a060020a038135169060200135610606565b6103366004803603604081101561032057600080fd5b50600160a060020a038135169060200135610642565b005b61025261072f565b6102526004803603602081101561035657600080fd5b5035600160a060020a0316610735565b610195610750565b61013d6107b1565b6103366004803603604081101561038c57600080fd5b50600160a060020a038135169060200135610812565b610236600480360360408110156103b857600080fd5b50600160a060020a0381351690602001356108fb565b610236600480360360408110156103e457600080fd5b50600160a060020a038135169060200135610937565b610402610944565b60408051600160a060020a039092168252519081900360200190f35b6104026004803603602081101561043457600080fd5b5035610953565b6102526004803603604081101561045157600080fd5b50600160a060020a038135811691602001351661097a565b6102526004803603602081101561047f57600080fd5b50356109a5565b606060088054806020026020016040519081016040528092919081815260200182805480156104d457602002820191906000526020600020905b8154815260200190600101908083116104c0575b5050505050905090565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104d45780601f1061053f576101008083540402835291602001916104d4565b820191906000526020600020905b81548152906001019060200180831161054d57509395945050505050565b60006105783384846109c3565b5060015b92915050565b60025490565b600160a060020a031660009081526009602052604090205460ff1690565b60006105b3848484610a4b565b600160a060020a0384166000908152600160209081526040808320338085529252909120546105f39186916105ee908663ffffffff610b1616565b6109c3565b5060019392505050565b60055460ff1690565b336000818152600160209081526040808320600160a060020a038716845290915281205490916105789185906105ee908663ffffffff610b2b16565b600a60009054906101000a9004600160a060020a0316600160a060020a031663f2f4eb266040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561069557600080fd5b505af11580156106a9573d6000803e3d6000fd5b505050506040513d60208110156106bf57600080fd5b5051600160a060020a03163314610721576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610d1c6022913960400191505060405180910390fd5b61072b8282610b44565b5050565b60065481565b600160a060020a031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104d45780601f1061053f576101008083540402835291602001916104d4565b606060078054806020026020016040519081016040528092919081815260200182805480156104d457602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116107eb575050505050905090565b600a60009054906101000a9004600160a060020a0316600160a060020a031663f2f4eb266040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561086557600080fd5b505af1158015610879573d6000803e3d6000fd5b505050506040513d602081101561088f57600080fd5b5051600160a060020a031633146108f1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180610cfa6022913960400191505060405180910390fd5b61072b8282610bec565b336000818152600160209081526040808320600160a060020a038716845290915281205490916105789185906105ee908663ffffffff610b1616565b6000610578338484610a4b565b600a54600160a060020a031681565b6007818154811061096057fe5b600091825260209091200154600160a060020a0316905081565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b600881815481106109b257fe5b600091825260209091200154905081565b600160a060020a0382166109d657600080fd5b600160a060020a0383166109e957600080fd5b600160a060020a03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a038216610a5e57600080fd5b600160a060020a038316600090815260208190526040902054610a87908263ffffffff610b1616565b600160a060020a038085166000908152602081905260408082209390935590841681522054610abc908263ffffffff610b2b16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600082821115610b2557600080fd5b50900390565b600082820183811015610b3d57600080fd5b9392505050565b600160a060020a038216610b5757600080fd5b600254610b6a908263ffffffff610b2b16565b600255600160a060020a038216600090815260208190526040902054610b96908263ffffffff610b2b16565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a038216610bff57600080fd5b600254610c12908263ffffffff610b1616565b600255600160a060020a038216600090815260208190526040902054610c3e908263ffffffff610b1616565b600160a060020a038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b6000808311610ca157600080fd5b600160005b83811015610cca5781610cbf818763ffffffff610cd216565b925050600101610ca6565b509392505050565b600082610ce15750600061057c565b82820282848281610cee57fe5b0414610b3d57600080fdfe536574546f6b656e2e6275726e3a2053656e646572206d75737420626520636f7265536574546f6b656e2e6d696e743a2053656e646572206d75737420626520636f7265a165627a7a72305820f46c566e85f7549295f3bd37e0b4aa3ae16ebe38b373884d1002b6b7b7a1a5660029",
sourceMap:"1236:6285:79:-;;;2361:3071;8:9:-1;5:2;;;30:1;27;20:12;5:2;2361:3071:79;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;2361:3071:79;;;;;;;;;;;;;;19:11:-1;11:20;;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;2361:3071:79;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;-1:-1;;2361:3071:79;;;;;;;;;;;;;;;19:11:-1;11:20;;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;2361:3071:79;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;-1:-1;;493:12:169;;2361:3071:79;;-1:-1:-1;2616:5:79;;-1:-1:-1;2361:3071:79;;-1:-1:-1;2656:2:79;;493:12:169;;:5;;:12;;;;;:::i;:::-;-1:-1:-1;515:16:169;;;;:7;;:16;;;;;:::i;:::-;-1:-1:-1;541:9:169;:20;;-1:-1:-1;;541:20:169;;;;;;;;;;;;-1:-1:-1;;2784:13:79;;2885:16;2864:114;;;;-1:-1:-1;;;;;2864:114:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3049:54;;;;;;;;;;;;;;;;;;;;:24;;:41;;3091:11;;3049:54;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3049:54:79;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3049:54:79;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;3049:54:79;;;;3179:24;:44;3224:11;3237:6;3179:65;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3179:65:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;3179:65:79;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3179:65:79;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;3400:2:79;;-1:-1:-1;3380:17:79;;-1:-1:-1;3380:17:79;;-1:-1:-1;3443:1662:79;3467:9;3463:1;:13;3443:1662;;;3546:20;3569:6;3576:1;3569:9;;;;;;;;;;;;;;3546:32;;3632:1;3617:12;:16;3592:119;;;;-1:-1:-1;;;;;3592:119:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3779:24;3806:11;3818:1;3806:14;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3859:30:79;;3834:136;;;;-1:-1:-1;;;;;3834:136:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4177:37;;;22:32:-1;6:49;;4177:37:79;;;;;49:4:-1;25:18;;61:17;;-1:-1;182:15;4177:37:79;179:29:-1;160:49;;4155:60:79;;;;-1:-1:-1;;;4155:21:79;;;4177:37;4155:60;;;25:18:-1;4155:60:79;;25:18:-1;36:153;66:2;61:3;58:11;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;274:1;267:3;263:2;259:12;254:3;250:22;246:30;315:4;311:9;305:3;299:10;295:26;356:4;350:3;344:10;340:21;389:7;380;377:20;372:3;365:33;3:399;;;4155:60:79;;;;;;;;;;;;;;;;;;;;;;;;14:1:-1;21;16:31;;;;75:4;69:11;64:16;;144:4;140:9;133:4;115:16;111:27;107:43;104:1;100:51;94:4;87:65;169:16;166:1;159:27;225:16;222:1;215:4;212:1;208:12;193:49;7:242;;16:31;36:4;31:9;;7:242;;4136:79:79;;;4233:7;4229:390;;;4292:16;-1:-1:-1;;;;;4278:40:79;;:42;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4278:42:79;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4278:42:79;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4278:42:79;;-1:-1:-1;4352:29:79;;;;;;;;:61;;4402:11;4352:61;;;4384:15;4352:61;4338:75;;4229:390;;;4603:1;4589:15;;4229:390;4721:34;4738:16;4721;;;;:34;:::i;:::-;4720:35;4695:136;;;;-1:-1:-1;;;;;4695:136:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4898:29:79;;;;;:11;:29;;;;;:36;;-1:-1:-1;;4898:36:79;-1:-1:-1;4898:36:79;;;;;;5023:10;27::-1;;23:18;;;45:23;;;5023:33:79;;;;-1:-1:-1;;5023:33:79;;;;;;;5070:5;27:10:-1;;23:18;;;45:23;;5070:24:79;;;;;;;;3478:3;3443:1662;;;-1:-1:-1;5238:54:79;5259:2;5263:28;5271:2;5263:28;;;:15;;;;;;:28;:::i;:::-;5238:20;;;;;;:54;:::i;:::-;5222:12;:70;;5201:159;;;;-1:-1:-1;;;;;5201:159:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5371:7:79;:18;;-1:-1:-1;;5371:18:79;-1:-1:-1;5371:18:79;;;;;;;;;;;-1:-1:-1;;5399:11:79;:26;-1:-1:-1;1236:6285:79;;-1:-1:-1;;1236:6285:79;7351:168;-1:-1:-1;7486:26:79;7459:4;7486:26;;;:11;:26;;;;;;;;;7351:168::o;1211:145:166:-;1269:7;1301:1;1296;:6;;1288:15;;;;;;-1:-1:-1;1325:5:166;;;1211:145;;;;;:::o;1995:416:176:-;2107:7;2142:1;2138;:5;2130:14;;;;;;2172:1;2155:14;2183:198;2207:3;2203:1;:7;2183:198;;;2255:6;2349:21;2255:6;2368:1;2349:18;;;;;;:21;:::i;:::-;2340:30;-1:-1:-1;;2212:3:176;;2183:198;;;-1:-1:-1;2398:6:176;1995:416;-1:-1:-1;;;1995:416:176:o;231:421:166:-;289:7;529:6;525:45;;-1:-1:-1;558:1:166;551:8;;525:45;592:5;;;596:1;592;:5;:1;615:5;;;;;:10;607:19;;;;;;644:1;231:421;-1:-1:-1;;;231:421:166:o;1236:6285:79:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1236:6285:79;;;-1:-1:-1;1236:6285:79;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",deployedSourceMap:"1236:6285:79:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1236:6285:79;;;;;;-1:-1:-1;1236:6285:79;;;;;-1:-1:-1;1236:6285:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7009:118;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;7009:118:79;;;;;;;;;;;;;;;;;628:81:169;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;628:81:169;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2721:145:168;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2721:145:168;;-1:-1:-1;;;;;2721:145:168;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;916:89;;;:::i;:::-;;;;;;;;;;;;;;;;7351:168:79;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7351:168:79;-1:-1:-1;;;;;7351:168:79;;:::i;3329:224:168:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3329:224:168;;;;;;;;;;;;;;;;;:::i;930:81:169:-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4067:200:168;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4067:200:168;;-1:-1:-1;;;;;4067:200:168;;;;;;:::i;5739:314:79:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5739:314:79;;-1:-1:-1;;;;;5739:314:79;;;;;;:::i;:::-;;1378:26;;;:::i;1217:104:168:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1217:104:168;-1:-1:-1;;;;;1217:104:168;;:::i;771:85:169:-;;;:::i;6762:128:79:-;;;:::i;6307:310::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6307:310:79;;-1:-1:-1;;;;;6307:310:79;;;;;;:::i;4786:210:168:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4786:210:168;;-1:-1:-1;;;;;4786:210:168;;;;;;:::i;1948:137::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1948:137:168;;-1:-1:-1;;;;;1948:137:168;;;;;;:::i;1636:22:79:-;;;:::i;:::-;;;;-1:-1:-1;;;;;1636:22:79;;;;;;;;;;;;;;1410:27;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1410:27:79;;:::i;1652:129:168:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1652:129:168;;;;;;;;;;:::i;1443:22:79:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1443:22:79;;:::i;7009:118::-;7076:16;7115:5;7108:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7009:118;:::o;628:81:169:-;697:5;690:12;;;;;;;;;;;;;-1:-1:-1;;690:12:169;;;;;;;;;;;;;;;;;;;;;;;;;;665:13;;690:12;;697:5;;690:12;;;697:5;690:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;690:12:169;;628:81;-1:-1:-1;;;;;628:81:169:o;2721:145:168:-;2786:4;2802:36;2811:10;2823:7;2832:5;2802:8;:36::i;:::-;-1:-1:-1;2855:4:168;2721:145;;;;;:::o;916:89::-;986:12;;916:89;:::o;7351:168:79:-;-1:-1:-1;;;;;7486:26:79;7459:4;7486:26;;;:11;:26;;;;;;;;;7351:168::o;3329:224:168:-;3408:4;3424:26;3434:4;3440:2;3444:5;3424:9;:26::i;:::-;-1:-1:-1;;;;;3487:14:168;;;;;;-1:-1:-1;3487:14:168;;;;;;;;3475:10;3487:26;;;;;;;;;3460:65;;3487:14;;:37;;3518:5;3487:30;:37::i;:::-;3460:8;:65::i;:::-;-1:-1:-1;3542:4:168;3329:224;;;;;:::o;930:81:169:-;995:9;;;;930:81;:::o;4067:200:168:-;4172:10;4147:4;4193:20;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4193:29:168;;;;;;;;;;4147:4;;4163:76;;4193:29;;:45;;4227:10;4193:33;:45::i;5739:314:79:-;5935:7;;5923:27;;;;;;;;-1:-1:-1;;;;;5935:7:79;;;;5923:25;;:27;;;;;;;;;;;;;;;5935:7;;5923:27;;;5:2:-1;;;;30:1;27;20:12;5:2;5923:27:79;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;5923:27:79;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5923:27:79;-1:-1:-1;;;;;5909:41:79;:10;:41;5888:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6021:25;6027:7;6036:9;6021:5;:25::i;:::-;5739:314;;:::o;1378:26::-;;;;:::o;1217:104:168:-;-1:-1:-1;;;;;1298:16:168;1272:7;1298:16;;;;;;;;;;;;1217:104::o;771:85:169:-;842:7;835:14;;;;;;;;;;;;;-1:-1:-1;;835:14:169;;;;;;;;;;;;;;;;;;;;;;;;;;810:13;;835:14;;842:7;;835:14;;;842:7;835:14;;;;;;;;;;;;;;;;;;;;;;;;6762:128:79;6834:16;6873:10;6866:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6866:17:79;;;-1:-1:-1;6866:17:79;;;;;;;;;;;;;;;;;;6762:128;:::o;6307:310::-;6501:7;;6489:27;;;;;;;;-1:-1:-1;;;;;6501:7:79;;;;6489:25;;:27;;;;;;;;;;;;;;;6501:7;;6489:27;;;5:2:-1;;;;30:1;27;20:12;5:2;6489:27:79;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6489:27:79;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6489:27:79;-1:-1:-1;;;;;6475:41:79;:10;:41;6454:122;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6587:23;6593:5;6600:9;6587:5;:23::i;4786:210:168:-;4896:10;4871:4;4917:20;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4917:29:168;;;;;;;;;;4871:4;;4887:81;;4917:29;;:50;;4951:15;4917:33;:50::i;1948:137::-;2009:4;2025:32;2035:10;2047:2;2051:5;2025:9;:32::i;1636:22:79:-;;;-1:-1:-1;;;;;1636:22:79;;:::o;1410:27::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1410:27:79;;-1:-1:-1;1410:27:79;:::o;1652:129:168:-;-1:-1:-1;;;;;1750:15:168;;;1724:7;1750:15;;;-1:-1:-1;1750:15:168;;;;;;;;:24;;;;;;;;;;;;;1652:129::o;1443:22:79:-;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1443:22:79;:::o;6831:248:168:-;-1:-1:-1;;;;;6923:21:168;;6915:30;;;;;;-1:-1:-1;;;;;6963:19:168;;6955:28;;;;;;-1:-1:-1;;;;;6994:15:168;;;;;;;-1:-1:-1;6994:15:168;;;;;;;;:24;;;;;;;;;;;;;:32;;;7041:31;;;;;;;;;;;;;;;;;6831:248;;;:::o;5215:256::-;-1:-1:-1;;;;;5302:16:168;;5294:25;;;;;;-1:-1:-1;;;;;5348:15:168;;:9;:15;;;;;;;;;;;:26;;5368:5;5348:19;:26::i;:::-;-1:-1:-1;;;;;5330:15:168;;;:9;:15;;;;;;;;;;;:44;;;;5400:13;;;;;;;:24;;5418:5;5400:17;:24::i;:::-;-1:-1:-1;;;;;5384:13:168;;;:9;:13;;;;;;;;;;;;:40;;;;5439:25;;;;;;;5384:13;;5439:25;;;;;;;;;;;;;5215:256;;;:::o;1211:145:166:-;1269:7;1301:1;1296;:6;;1288:15;;;;;;-1:-1:-1;1325:5:166;;;1211:145::o;1439:::-;1497:7;1528:5;;;1551:6;;;;1543:15;;;;;;1576:1;1439:145;-1:-1:-1;;;1439:145:166:o;5814:263:168:-;-1:-1:-1;;;;;5888:21:168;;5880:30;;;;;;5936:12;;:23;;5953:5;5936:23;:16;:23;:::i;:::-;5921:12;:38;-1:-1:-1;;;;;5990:18:168;;:9;:18;;;;;;;;;;;:29;;6013:5;5990:22;:29::i;:::-;-1:-1:-1;;;;;5969:18:168;;:9;:18;;;;;;;;;;;:50;;;;6034:36;;;;;;;5969:18;;:9;;6034:36;;;;;;;;;;5814:263;;:::o;6303:::-;-1:-1:-1;;;;;6377:21:168;;6369:30;;;;;;6425:12;;:23;;6442:5;6425:23;:16;:23;:::i;:::-;6410:12;:38;-1:-1:-1;;;;;6479:18:168;;:9;:18;;;;;;;;;;;:29;;6502:5;6479:22;:29::i;:::-;-1:-1:-1;;;;;6458:18:168;;:9;:18;;;;;;;;;;;:50;;;;6523:36;;;;;;;6458:9;;6523:36;;;;;;;;;;;6303:263;;:::o;1995:416:176:-;2107:7;2142:1;2138;:5;2130:14;;;;;;2172:1;2155:14;2183:198;2207:3;2203:1;:7;2183:198;;;2255:6;2349:21;2255:6;2368:1;2349:21;:18;:21;:::i;:::-;2340:30;-1:-1:-1;;2212:3:176;;2183:198;;;-1:-1:-1;2398:6:176;1995:416;-1:-1:-1;;;1995:416:176:o;231:421:166:-;289:7;529:6;525:45;;-1:-1:-1;558:1:166;551:8;;525:45;592:5;;;596:1;592;:5;:1;615:5;;;;;:10;607:19;;;;",source:'/*\n    Copyright 2018 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\npragma solidity 0.5.7;\n\n\nimport { ERC20Detailed } from "openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol";\nimport { SafeMath } from "openzeppelin-solidity/contracts/math/SafeMath.sol";\nimport { ERC20 } from "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol";\nimport { CommonValidationsLibrary } from "set-protocol-contract-utils/contracts/lib/CommonValidationsLibrary.sol";\nimport { CommonMath } from "set-protocol-contract-utils/contracts/lib/CommonMath.sol";\n\nimport { ISetFactory } from "../interfaces/ISetFactory.sol";\n\n\n/**\n * @title SetToken\n * @author Set Protocol\n *\n * Implementation of the basic Set token.\n */\ncontract SetToken is\n    ERC20,\n    ERC20Detailed\n{\n    using SafeMath for uint256;\n\n    /* ============ State Variables ============ */\n\n    uint256 public naturalUnit;\n    address[] public components;\n    uint256[] public units;\n\n    // Mapping of componentHash to isComponent\n    mapping(address => bool) internal isComponent;\n\n    // Address of the Factory contract that created the SetToken\n    address public factory;\n\n    /* ============ Constructor ============ */\n\n    /**\n     * Constructor function for Set token\n     *\n     * As looping operations are expensive, checking for duplicates will be on the onus of the application developer\n     *\n     * @param _factory          The factory used to create the Set Token\n     * @param _components       A list of component address which you want to include\n     * @param _units            A list of quantities of each component (corresponds to the Set of _components)\n     * @param _naturalUnit      The minimum multiple of Sets that can be issued or redeemed\n     * @param _name             The Set\'s name\n     * @param _symbol           The Set\'s symbol\n     */\n    constructor(\n        address _factory,\n        address[] memory _components,\n        uint256[] memory _units,\n        uint256 _naturalUnit,\n        string memory _name,\n        string memory _symbol\n    )\n        public\n        ERC20Detailed(\n            _name,\n            _symbol,\n            18\n        )\n    {\n        // Storing count and unit counts to local variable to save on invocation\n        uint256 unitCount = _units.length;\n\n        // Require naturalUnit passed is greater than 0\n        require(\n            _naturalUnit > 0,\n            "SetToken.constructor: Natural unit must be positive"\n        );\n\n        // Confirm an empty _components array is not passed\n        CommonValidationsLibrary.validateNonEmpty(_components);\n\n        // Confirm there is one quantity for every token address\n        CommonValidationsLibrary.validateEqualLength(_components, _units);\n\n        // NOTE: It will be the onus of developers to check whether the addressExists\n        // are in fact ERC20 addresses\n        uint8 minDecimals = 18;\n        uint8 currentDecimals;\n        for (uint256 i = 0; i < unitCount; i++) {\n            // Check that all units are non-zero\n            uint256 currentUnits = _units[i];\n            require(\n                currentUnits > 0,\n                "SetToken.constructor: Units must be positive"\n            );\n\n            // Check that all addresses are non-zero\n            address currentComponent = _components[i];\n            require(\n                currentComponent != address(0),\n                "SetToken.constructor: Invalid component address"\n            );\n\n            // Figure out which of the components has the minimum decimal value\n            /* solium-disable-next-line security/no-low-level-calls */\n            (bool success, ) = currentComponent.call(abi.encodeWithSignature("decimals()"));\n            if (success) {\n                currentDecimals = ERC20Detailed(currentComponent).decimals();\n                minDecimals = currentDecimals < minDecimals ? currentDecimals : minDecimals;\n            } else {\n                // If one of the components does not implement decimals, we assume the worst\n                // and set minDecimals to 0\n                minDecimals = 0;\n            }\n\n            // Check the component has not already been added\n            require(\n                !tokenIsComponent(currentComponent),\n                "SetToken.constructor: Duplicated component"\n            );\n\n            // Add component to isComponent mapping\n            isComponent[currentComponent] = true;\n\n            // Add component data to components and units state variables\n            components.push(currentComponent);\n            units.push(currentUnits);\n        }\n\n        // This is the minimum natural unit possible for a Set with these components.\n        require(\n            _naturalUnit >= CommonMath.safePower(10, uint256(18).sub(minDecimals)),\n            "SetToken.constructor: Invalid natural unit"\n        );\n\n        factory = _factory;\n        naturalUnit = _naturalUnit;\n    }\n\n    /* ============ Public Functions ============ */\n\n    /*\n     * Mint set token for given address.\n     * Can only be called by authorized contracts.\n     *\n     * @param  _issuer      The address of the issuing account\n     * @param  _quantity    The number of sets to attribute to issuer\n     */\n    function mint(\n        address _issuer,\n        uint256 _quantity\n    )\n        external\n    {\n        // Check that function caller is Core\n        require(\n            msg.sender == ISetFactory(factory).core(),\n            "SetToken.mint: Sender must be core"\n        );\n\n        _mint(_issuer, _quantity);\n    }\n\n    /*\n     * Burn set token for given address.\n     * Can only be called by authorized contracts.\n     *\n     * @param  _from        The address of the redeeming account\n     * @param  _quantity    The number of sets to burn from redeemer\n     */\n    function burn(\n        address _from,\n        uint256 _quantity\n    )\n        external\n    {\n        // Check that function caller is Core\n        require(\n            msg.sender == ISetFactory(factory).core(),\n            "SetToken.burn: Sender must be core"\n        );\n\n        _burn(_from, _quantity);\n    }\n\n    /*\n     * Get addresses of all components in the Set\n     *\n     * @return  componentAddresses       Array of component tokens\n     */\n    function getComponents()\n        external\n        view\n        returns (address[] memory)\n    {\n        return components;\n    }\n\n    /*\n     * Get units of all tokens in Set\n     *\n     * @return  units       Array of component units\n     */\n    function getUnits()\n        external\n        view\n        returns (uint256[] memory)\n    {\n        return units;\n    }\n\n    /*\n     * Validates address is member of Set\'s components\n     *\n     * @param  _tokenAddress     Address of token being checked\n     * @return  bool             Whether token is member of Set\'s components\n     */\n    function tokenIsComponent(\n        address _tokenAddress\n    )\n        public\n        view\n        returns (bool)\n    {\n        return isComponent[_tokenAddress];\n    }\n}\n',sourcePath:"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/tokens/SetToken.sol",compiler:{name:"solc",version:"0.5.7+commit.6da8b019.Linux.g++"},networks:{},schemaVersion:"3.0.23",updatedAt:"2020-05-05T17:13:36.863Z",devdoc:{author:"Set Protocol * Implementation of the basic Set token.",methods:{"allowance(address,address)":{details:"Function to check the amount of tokens that an owner allowed to a spender.",params:{owner:"address The address which owns the funds.",spender:"address The address which will spend the funds."},"return":"A uint256 specifying the amount of tokens still available for the spender."},"approve(address,uint256)":{details:"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",params:{spender:"The address which will spend the funds.",value:"The amount of tokens to be spent."}},"balanceOf(address)":{details:"Gets the balance of the specified address.",params:{owner:"The address to query the balance of."},"return":"A uint256 representing the amount owned by the passed address."},constructor:{params:{_components:"A list of component address which you want to include",_factory:"The factory used to create the Set Token",_name:"The Set's name",_naturalUnit:"The minimum multiple of Sets that can be issued or redeemed",_symbol:"The Set's symbol",_units:"A list of quantities of each component (corresponds to the Set of _components)"}},"decimals()":{"return":"the number of decimals of the token."},"decreaseAllowance(address,uint256)":{details:"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when _allowed[msg.sender][spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",params:{spender:"The address which will spend the funds.",subtractedValue:"The amount of tokens to decrease the allowance by."}},"increaseAllowance(address,uint256)":{details:"Increase the amount of tokens that an owner allowed to a spender. approve should be called when _allowed[msg.sender][spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",params:{addedValue:"The amount of tokens to increase the allowance by.",spender:"The address which will spend the funds."}},"name()":{"return":"the name of the token."},"symbol()":{"return":"the symbol of the token."},"totalSupply()":{details:"Total number of tokens in existence"},"transfer(address,uint256)":{details:"Transfer token to a specified address",params:{to:"The address to transfer to.",value:"The amount to be transferred."}},"transferFrom(address,address,uint256)":{details:"Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.",params:{from:"address The address which you want to send tokens from",to:"address The address which you want to transfer to",value:"uint256 the amount of tokens to be transferred"}}},title:"SetToken"},userdoc:{methods:{constructor:"Constructor function for Set token     * As looping operations are expensive, checking for duplicates will be on the onus of the application developer"}}};