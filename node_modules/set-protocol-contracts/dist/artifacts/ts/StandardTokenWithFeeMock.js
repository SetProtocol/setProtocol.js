"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.StandardTokenWithFeeMock={contractName:"StandardTokenWithFeeMock",abi:[{constant:true,inputs:[],name:"name",outputs:[{name:"",type:"string"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"decimals",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"_totalSupply",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"",type:"address"}],name:"_balances",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"symbol",outputs:[{name:"",type:"string"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"",type:"address"},{name:"",type:"address"}],name:"_allowed",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[],name:"fee",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{inputs:[{name:"initialAccount",type:"address"},{name:"initialBalance",type:"uint256"},{name:"_name",type:"string"},{name:"_symbol",type:"string"},{name:"_fee",type:"uint256"}],payable:false,stateMutability:"nonpayable",type:"constructor"},{anonymous:false,inputs:[{indexed:true,name:"from",type:"address"},{indexed:true,name:"to",type:"address"},{indexed:false,name:"value",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:false,inputs:[{indexed:true,name:"owner",type:"address"},{indexed:true,name:"spender",type:"address"},{indexed:false,name:"value",type:"uint256"}],name:"Approval",type:"event"},{constant:false,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transferFrom",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transfer",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"_fee",type:"uint256"}],name:"setFee",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:true,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"owner",type:"address"}],name:"balanceOf",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"owner",type:"address"},{name:"spender",type:"address"}],name:"allowance",outputs:[{name:"",type:"uint256"}],payable:false,stateMutability:"view",type:"function"},{constant:false,inputs:[{name:"spender",type:"address"},{name:"value",type:"uint256"}],name:"approve",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"spender",type:"address"},{name:"addedValue",type:"uint256"}],name:"increaseAllowance",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"},{constant:false,inputs:[{name:"spender",type:"address"},{name:"subtractedValue",type:"uint256"}],name:"decreaseAllowance",outputs:[{name:"",type:"bool"}],payable:false,stateMutability:"nonpayable",type:"function"}],metadata:'{"compiler":{"version":"0.5.7+commit.6da8b019"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"_totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_fee","type":"uint256"}],"name":"setFee","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"_balances","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spender","type":"address"},{"name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"},{"name":"","type":"address"}],"name":"_allowed","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"owner","type":"address"},{"name":"spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"fee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"initialAccount","type":"address"},{"name":"initialBalance","type":"uint256"},{"name":"_name","type":"string"},{"name":"_symbol","type":"string"},{"name":"_fee","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}],"devdoc":{"methods":{"transfer(address,uint256)":{"details":"transfer token for a specified address with a fee component applied to the send","params":{"_to":"The address to transfer to.","_value":"The amount to be transferred."}},"transferFrom(address,address,uint256)":{"details":"Transfer tokens from one address to another with a fee component","params":{"_from":"address The address which you want to send tokens from","_to":"address The address which you want to transfer to","_value":"uint256 the amount of tokens to be transferred"}}}},"userdoc":{"methods":{}}},"settings":{"compilationTarget":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/mocks/tokens/StandardTokenWithFeeMock.sol":"StandardTokenWithFeeMock"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/mocks/tokens/StandardTokenWithFeeMock.sol":{"keccak256":"0x9949b2ef8e66f0d2a2a880bd160be793ab052396362bd47ea8cdfa7e1ce0e2fe","urls":["bzzr://95be77e9a3062e43227fad0645237d6872a1409cdeae6db37560c32fa43191d8"]},"openzeppelin-solidity/contracts/math/SafeMath.sol":{"keccak256":"0xc2a200a877c4a9b2475c246c54ffecc69ffde3e11af83319c63c2dc5458bac80","urls":["bzzr://c8876e2c39b60f155d748d71d715c8f3903fae5a405ac599adcb6ad2f9a583f9"]}},"version":1}',bytecode:"0x608060405234801561001057600080fd5b5060405162000c7138038062000c71833981018060405260a081101561003557600080fd5b815160208301516040840180519294919382019264010000000081111561005b57600080fd5b8201602081018481111561006e57600080fd5b815164010000000081118282018710171561008857600080fd5b505092919060200180516401000000008111156100a457600080fd5b820160208101848111156100b757600080fd5b81516401000000008111828201871017156100d157600080fd5b5050602091820151600160a060020a038816600090815260038452604081208890556005889055865192955090935061010f92909190860190610131565b508151610123906001906020850190610131565b50600255506101cc92505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061017257805160ff191683800117855561019f565b8280016001018555821561019f579182015b8281111561019f578251825591602001919060010190610184565b506101ab9291506101af565b5090565b6101c991905b808211156101ab57600081556001016101b5565b90565b610a9580620001dc6000396000f3fe608060405234801561001057600080fd5b506004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900480636ebcf607116100b4578063a9059cbb11610083578063a9059cbb14610308578063ba0fb86114610334578063dd62ed3e14610362578063ddca3f43146103905761011d565b80636ebcf6071461028857806370a08231146102ae57806395d89b41146102d4578063a457c2d7146102dc5761011d565b8063313ce567116100f0578063313ce5671461022f57806339509351146102375780633eaaf86b1461026357806369fe0e2d1461026b5761011d565b806306fdde0314610122578063095ea7b31461019f57806318160ddd146101df57806323b872dd146101f9575b600080fd5b61012a610398565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016457818101518382015260200161014c565b50505050905090810190601f1680156101915780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101cb600480360360408110156101b557600080fd5b50600160a060020a038135169060200135610426565b604080519115158252519081900360200190f35b6101e76104a2565b60408051918252519081900360200190f35b6101cb6004803603606081101561020f57600080fd5b50600160a060020a038135811691602081013590911690604001356104a8565b6101e7610760565b6101cb6004803603604081101561024d57600080fd5b50600160a060020a038135169060200135610765565b6101e7610813565b6101cb6004803603602081101561028157600080fd5b5035610819565b6101e76004803603602081101561029e57600080fd5b5035600160a060020a0316610821565b6101e7600480360360208110156102c457600080fd5b5035600160a060020a0316610833565b61012a61084e565b6101cb600480360360408110156102f257600080fd5b50600160a060020a0381351690602001356108a8565b6101cb6004803603604081101561031e57600080fd5b50600160a060020a0381351690602001356108f1565b6101e76004803603604081101561034a57600080fd5b50600160a060020a03813581169160200135166109ed565b6101e76004803603604081101561037857600080fd5b50600160a060020a0381358116916020013516610a0a565b6101e7610a35565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561041e5780601f106103f35761010080835404028352916020019161041e565b820191906000526020600020905b81548152906001019060200180831161040157829003601f168201915b505050505081565b6000600160a060020a03831661043b57600080fd5b336000818152600460209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60055490565b6000600160a060020a03831661051f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f746f206e6f6e6e756c6c00000000000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0384166000908152600360205260409020548211156105a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6c657373207468616e2066726f6d000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038416600090815260046020908152604080832033845290915290205482111561063857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f76616c7565206c657373207468616e20616c6c6f776564000000000000000000604482015290519081900360640190fd5b600061064f60025484610a3b90919063ffffffff16565b600160a060020a03861660009081526003602052604090205490915061067b908463ffffffff610a3b16565b600160a060020a0380871660009081526003602052604080822093909355908616815220546106b0908263ffffffff610a5016565b600160a060020a0380861660009081526003602090815260408083209490945591881681526004825282812033825290915220546106f4908463ffffffff610a3b16565b600160a060020a03808716600081815260046020908152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b601281565b6000600160a060020a03831661077a57600080fd5b336000908152600460209081526040808320600160a060020a03871684529091529020546107ae908363ffffffff610a5016565b336000818152600460209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b60055481565b600255600190565b60036020526000908152604090205481565b600160a060020a031660009081526003602052604090205490565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561041e5780601f106103f35761010080835404028352916020019161041e565b6000600160a060020a0383166108bd57600080fd5b336000908152600460209081526040808320600160a060020a03871684529091529020546107ae908363ffffffff610a3b16565b6000600160a060020a03831661090657600080fd5b3360009081526003602052604090205482111561092257600080fd5b600061093960025484610a5090919063ffffffff16565b3360009081526003602052604090205490915061095c908263ffffffff610a3b16565b3360009081526003602052604080822092909255600160a060020a0386168152205461098e908463ffffffff610a5016565b600160a060020a0385166000818152600360209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b600460209081526000928352604080842090915290825290205481565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b60025481565b600082821115610a4a57600080fd5b50900390565b600082820183811015610a6257600080fd5b939250505056fea165627a7a7230582056e3b0a3f68e2d28ea20cf25b4027f1c8ce209664c6802369cfd61985b388fde0029",deployedBytecode:"0x608060405234801561001057600080fd5b506004361061011d576000357c0100000000000000000000000000000000000000000000000000000000900480636ebcf607116100b4578063a9059cbb11610083578063a9059cbb14610308578063ba0fb86114610334578063dd62ed3e14610362578063ddca3f43146103905761011d565b80636ebcf6071461028857806370a08231146102ae57806395d89b41146102d4578063a457c2d7146102dc5761011d565b8063313ce567116100f0578063313ce5671461022f57806339509351146102375780633eaaf86b1461026357806369fe0e2d1461026b5761011d565b806306fdde0314610122578063095ea7b31461019f57806318160ddd146101df57806323b872dd146101f9575b600080fd5b61012a610398565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016457818101518382015260200161014c565b50505050905090810190601f1680156101915780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101cb600480360360408110156101b557600080fd5b50600160a060020a038135169060200135610426565b604080519115158252519081900360200190f35b6101e76104a2565b60408051918252519081900360200190f35b6101cb6004803603606081101561020f57600080fd5b50600160a060020a038135811691602081013590911690604001356104a8565b6101e7610760565b6101cb6004803603604081101561024d57600080fd5b50600160a060020a038135169060200135610765565b6101e7610813565b6101cb6004803603602081101561028157600080fd5b5035610819565b6101e76004803603602081101561029e57600080fd5b5035600160a060020a0316610821565b6101e7600480360360208110156102c457600080fd5b5035600160a060020a0316610833565b61012a61084e565b6101cb600480360360408110156102f257600080fd5b50600160a060020a0381351690602001356108a8565b6101cb6004803603604081101561031e57600080fd5b50600160a060020a0381351690602001356108f1565b6101e76004803603604081101561034a57600080fd5b50600160a060020a03813581169160200135166109ed565b6101e76004803603604081101561037857600080fd5b50600160a060020a0381358116916020013516610a0a565b6101e7610a35565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561041e5780601f106103f35761010080835404028352916020019161041e565b820191906000526020600020905b81548152906001019060200180831161040157829003601f168201915b505050505081565b6000600160a060020a03831661043b57600080fd5b336000818152600460209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60055490565b6000600160a060020a03831661051f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f746f206e6f6e6e756c6c00000000000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0384166000908152600360205260409020548211156105a657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f6c657373207468616e2066726f6d000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a038416600090815260046020908152604080832033845290915290205482111561063857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f76616c7565206c657373207468616e20616c6c6f776564000000000000000000604482015290519081900360640190fd5b600061064f60025484610a3b90919063ffffffff16565b600160a060020a03861660009081526003602052604090205490915061067b908463ffffffff610a3b16565b600160a060020a0380871660009081526003602052604080822093909355908616815220546106b0908263ffffffff610a5016565b600160a060020a0380861660009081526003602090815260408083209490945591881681526004825282812033825290915220546106f4908463ffffffff610a3b16565b600160a060020a03808716600081815260046020908152604080832033845282529182902094909455805187815290519288169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a3506001949350505050565b601281565b6000600160a060020a03831661077a57600080fd5b336000908152600460209081526040808320600160a060020a03871684529091529020546107ae908363ffffffff610a5016565b336000818152600460209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b60055481565b600255600190565b60036020526000908152604090205481565b600160a060020a031660009081526003602052604090205490565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561041e5780601f106103f35761010080835404028352916020019161041e565b6000600160a060020a0383166108bd57600080fd5b336000908152600460209081526040808320600160a060020a03871684529091529020546107ae908363ffffffff610a3b16565b6000600160a060020a03831661090657600080fd5b3360009081526003602052604090205482111561092257600080fd5b600061093960025484610a5090919063ffffffff16565b3360009081526003602052604090205490915061095c908263ffffffff610a3b16565b3360009081526003602052604080822092909255600160a060020a0386168152205461098e908463ffffffff610a5016565b600160a060020a0385166000818152600360209081526040918290209390935580518681529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35060019392505050565b600460209081526000928352604080842090915290825290205481565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b60025481565b600082821115610a4a57600080fd5b50900390565b600082820183811015610a6257600080fd5b939250505056fea165627a7a7230582056e3b0a3f68e2d28ea20cf25b4027f1c8ce209664c6802369cfd61985b388fde0029",sourceMap:"714:3683:162:-;;;1235:296;8:9:-1;5:2;;;30:1;27;20:12;5:2;1235:296:162;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1235:296:162;;;;;;;;;;;;;;;;;;19:11:-1;11:20;;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;1235:296:162;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;-1:-1;;1235:296:162;;;;;-1:-1:-1;;;;;1393:25:162;;;;;;:9;:25;;1235:296;1393:25;;:42;;;1441:12;:29;;;1476:12;;1235:296;;-1:-1:-1;1235:296:162;;-1:-1:-1;1476:12:162;;1393:25;;1476:12;;;;;:::i;:::-;-1:-1:-1;1494:16:162;;;;:6;;:16;;;;;:::i;:::-;-1:-1:-1;1516:3:162;:10;-1:-1:-1;714:3683:162;;-1:-1:-1;;;714:3683:162;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;714:3683:162;;;-1:-1:-1;714:3683:162;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",deployedSourceMap:"714:3683:162:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;714:3683:162;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1014:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1014:18:162;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3491:222;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3491:222:162;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;3142:85;;;:::i;:::-;;;;;;;;;;;;;;;;1827:572;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1827:572:162;;;;;;;;;;;;;;;;;:::i;973:37::-;;;:::i;3717:332::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3717:332:162;;;;;;;;:::i;1203:27::-;;;:::i;3046:92::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3046:92:162;;:::i;1083:45::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1083:45:162;-1:-1:-1;;;;;1083:45:162;;:::i;3231:100::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3231:100:162;-1:-1:-1;;;;;3231:100:162;;:::i;1036:20::-;;;:::i;4053:342::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4053:342:162;;;;;;;;:::i;2594:448::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2594:448:162;;;;;;;;:::i;1133:65::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1133:65:162;;;;;;;;;;:::i;3335:152::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3335:152:162;;;;;;;;;;:::i;1060:18::-;;;:::i;1014:::-;;;;;;;;;;;;;;;-1:-1:-1;;1014:18:162;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3491:222::-;3558:4;-1:-1:-1;;;;;3578:21:162;;3570:30;;;;;;3616:10;3607:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;3607:29:162;;;;;;;;;;;;:37;;;3655:36;;;;;;;3607:29;;3616:10;3655:36;;;;;;;;;;;-1:-1:-1;3704:4:162;3491:222;;;;:::o;3142:85::-;3210:12;;3142:85;:::o;1827:572::-;1911:4;-1:-1:-1;;;;;1931:17:162;;1923:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1987:16:162;;;;;;:9;:16;;;;;;1977:26;;;1969:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2046:15:162;;;;;;:8;:15;;;;;;;;2062:10;2046:27;;;;;;;;2036:37;;;2028:73;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2108:24;2135:15;2146:3;;2135:6;:10;;:15;;;;:::i;:::-;-1:-1:-1;;;;;2176:16:162;;;;;;:9;:16;;;;;;2108:42;;-1:-1:-1;2176:28:162;;2197:6;2176:28;:20;:28;:::i;:::-;-1:-1:-1;;;;;2157:16:162;;;;;;;:9;:16;;;;;;:47;;;;2227:14;;;;;;;:36;;2246:16;2227:36;:18;:36;:::i;:::-;-1:-1:-1;;;;;2210:14:162;;;;;;;:9;:14;;;;;;;;:53;;;;2299:15;;;;;:8;:15;;;;;2315:10;2299:27;;;;;;;:39;;2331:6;2299:39;:31;:39;:::i;:::-;-1:-1:-1;;;;;2269:15:162;;;;;;;:8;:15;;;;;;;;2285:10;2269:27;;;;;;;;:69;;;;2349:28;;;;;;;;;;;2269:15;;2349:28;;;;;;;;;;;-1:-1:-1;2390:4:162;;1827:572;-1:-1:-1;;;;1827:572:162:o;973:37::-;1008:2;973:37;:::o;3717:332::-;3819:4;-1:-1:-1;;;;;3841:21:162;;3833:30;;;;;;3919:10;3910:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;3910:29:162;;;;;;;;;;:45;;3944:10;3910:45;:33;:45;:::i;:::-;3879:10;3870:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;3870:29:162;;;;;;;;;;;;:86;;;3967:60;;;;;;3870:29;;3967:60;;;;;;;;;;;-1:-1:-1;4040:4:162;3717:332;;;;:::o;1203:27::-;;;;:::o;3046:92::-;3106:3;:10;3129:4;;3046:92::o;1083:45::-;;;;;;;;;;;;;:::o;3231:100::-;-1:-1:-1;;;;;3310:16:162;3288:7;3310:16;;;:9;:16;;;;;;;3231:100::o;1036:20::-;;;;;;;;;;;;;;;-1:-1:-1;;1036:20:162;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4053:342;4160:4;-1:-1:-1;;;;;4182:21:162;;4174:30;;;;;;4260:10;4251:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4251:29:162;;;;;;;;;;:50;;4285:15;4251:50;:33;:50;:::i;2594:448::-;2659:4;-1:-1:-1;;;;;2679:17:162;;2671:26;;;;;;2731:10;2721:21;;;;:9;:21;;;;;;2711:31;;;2703:40;;;;;;2750:23;2776:15;2787:3;;2776:6;:10;;:15;;;;:::i;:::-;2895:10;2885:21;;;;:9;:21;;;;;;2750:41;;-1:-1:-1;2885:42:162;;2750:41;2885:42;:25;:42;:::i;:::-;2871:10;2861:21;;;;:9;:21;;;;;;:66;;;;-1:-1:-1;;;;;2950:14:162;;;;;;:26;;2969:6;2950:26;:18;:26;:::i;:::-;-1:-1:-1;;;;;2933:14:162;;;;;;:9;:14;;;;;;;;;:43;;;;2987:33;;;;;;;2933:14;;2996:10;;2987:33;;;;;;;;;;-1:-1:-1;3033:4:162;;2594:448;-1:-1:-1;;;2594:448:162:o;1133:65::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;3335:152::-;-1:-1:-1;;;;;3458:15:162;;;3434:7;3458:15;;;:8;:15;;;;;;;;:24;;;;;;;;;;;;;3335:152::o;1060:18::-;;;;:::o;1211:145:166:-;1269:7;1301:1;1296;:6;;1288:15;;;;;;-1:-1:-1;1325:5:166;;;1211:145::o;1439:::-;1497:7;1528:5;;;1551:6;;;;1543:15;;;;;;1576:1;1439:145;-1:-1:-1;;;1439:145:166:o",source:'/*\n    Copyright 2018 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\npragma solidity 0.5.7;\n\n\nimport "openzeppelin-solidity/contracts/math/SafeMath.sol";\n\n\n// mock class using BasicToken\ncontract StandardTokenWithFeeMock {\n  using SafeMath for uint256;\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n\n  uint256 constant public decimals = 18;\n  string public name;\n  string public symbol;\n  uint256 public fee;\n\n  mapping (address => uint256) public _balances;\n\n  mapping (address => mapping (address => uint256)) public _allowed;\n\n  uint256 public _totalSupply;\n\n  constructor(\n    address initialAccount,\n    uint256 initialBalance,\n    string memory _name,\n    string memory _symbol,\n    uint256 _fee)\n    public\n  {\n    _balances[initialAccount] = initialBalance;\n    _totalSupply = initialBalance;\n    name = _name;\n    symbol = _symbol;\n    fee = _fee;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another with a fee component\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\n    require(_to != address(0), "to nonnull");\n    require(_value <= _balances[_from], "less than from");\n    require(_value <= _allowed[_from][msg.sender], "value less than allowed");\n\n    uint256 netValueMinusFee = _value.sub(fee);\n\n    _balances[_from] = _balances[_from].sub(_value);\n    _balances[_to] = _balances[_to].add(netValueMinusFee);\n    _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev transfer token for a specified address with a fee component applied to the send\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) external returns (bool) {\n    require(_to != address(0));\n    require(_value <= _balances[msg.sender]);\n\n    uint256 netValuePlusFee = _value.add(fee);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    _balances[msg.sender] = _balances[msg.sender].sub(netValuePlusFee);\n    _balances[_to] = _balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function setFee(uint256 _fee) external returns (bool) {\n    fee = _fee;\n    return true;\n  }\n\n  function totalSupply() external view returns (uint256) {\n    return _totalSupply;\n  }\n\n  function balanceOf(address owner) external view returns (uint256) {\n    return _balances[owner];\n  }\n\n  function allowance(\n    address owner,\n    address spender\n   )\n    external\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  function approve(address spender, uint256 value) external returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    external\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    external\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n}\n',sourcePath:"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/mocks/tokens/StandardTokenWithFeeMock.sol",compiler:{name:"solc",version:"0.5.7+commit.6da8b019.Linux.g++"},networks:{},schemaVersion:"3.0.23",updatedAt:"2020-05-05T17:13:37.140Z",devdoc:{methods:{"transfer(address,uint256)":{details:"transfer token for a specified address with a fee component applied to the send",params:{_to:"The address to transfer to.",_value:"The amount to be transferred."}},"transferFrom(address,address,uint256)":{details:"Transfer tokens from one address to another with a fee component",params:{_from:"address The address which you want to send tokens from",_to:"address The address which you want to transfer to",_value:"uint256 the amount of tokens to be transferred"}}}},userdoc:{methods:{}}};