"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.CoreIssuanceLibrary={contractName:"CoreIssuanceLibrary",abi:[{constant:true,inputs:[{name:"_components",type:"address[]"},{name:"_componentQuantities",type:"uint256[]"},{name:"_owner",type:"address"},{name:"_vault",type:"address"}],name:"calculateDepositAndDecrementQuantities",outputs:[{name:"",type:"uint256[]"},{name:"",type:"uint256[]"}],payable:false,stateMutability:"view",type:"function"},{constant:true,inputs:[{name:"_componentQuantities",type:"uint256[]"},{name:"_toExclude",type:"uint256"}],name:"calculateWithdrawAndIncrementQuantities",outputs:[{name:"",type:"uint256[]"},{name:"",type:"uint256[]"}],payable:false,stateMutability:"pure",type:"function"},{constant:true,inputs:[{name:"_componentUnits",type:"uint256[]"},{name:"_naturalUnit",type:"uint256"},{name:"_quantity",type:"uint256"}],name:"calculateRequiredComponentQuantities",outputs:[{name:"",type:"uint256[]"}],payable:false,stateMutability:"pure",type:"function"}],metadata:'{"compiler":{"version":"0.5.7+commit.6da8b019"},"language":"Solidity","output":{"abi":[{"constant":true,"inputs":[{"name":"_componentQuantities","type":"uint256[]"},{"name":"_toExclude","type":"uint256"}],"name":"calculateWithdrawAndIncrementQuantities","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"_componentUnits","type":"uint256[]"},{"name":"_naturalUnit","type":"uint256"},{"name":"_quantity","type":"uint256"}],"name":"calculateRequiredComponentQuantities","outputs":[{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"pure","type":"function"},{"constant":true,"inputs":[{"name":"_components","type":"address[]"},{"name":"_componentQuantities","type":"uint256[]"},{"name":"_owner","type":"address"},{"name":"_vault","type":"address"}],"name":"calculateDepositAndDecrementQuantities","outputs":[{"name":"","type":"uint256[]"},{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}],"devdoc":{"author":"Set Protocol * This library contains functions for calculating deposit, withdrawal,and transfer quantities","methods":{"calculateDepositAndDecrementQuantities(address[],uint256[],address,address)":{"params":{"_componentQuantities":"Component quantities to increment and withdraw","_components":"Addresses of components","_owner":"Address to deposit and decrement quantities from","_vault":"Address to vault"},"return":"uint256[] decrementQuantities        Quantities to decrement from vaultuint256[] depositQuantities          Quantities to deposit into the vault"},"calculateRequiredComponentQuantities(uint256[],uint256,uint256)":{"params":{"_componentUnits":"The units of the component token","_naturalUnit":"The natural unit of the Set token","_quantity":"The number of tokens being redeem"},"return":"uint256[]        Required quantities in base units of components"},"calculateWithdrawAndIncrementQuantities(uint256[],uint256)":{"params":{"_componentQuantities":"Component quantities to increment and withdraw","_toExclude":"Mask of indexes of tokens to exclude from withdrawing"},"return":"uint256[] incrementQuantities        Quantities to increment in vaultuint256[] withdrawQuantities         Quantities to withdraw from vault"}},"title":"CoreIssuanceLibrary"},"userdoc":{"methods":{"calculateDepositAndDecrementQuantities(address[],uint256[],address,address)":{"notice":"Calculate the quantities required to deposit and decrement during issuance. Takes into account the tokens an owner already has in the vault."},"calculateRequiredComponentQuantities(uint256[],uint256,uint256)":{"notice":"Calculate the required component quantities required for issuance or rdemption for a given  quantity of Set Tokens"},"calculateWithdrawAndIncrementQuantities(uint256[],uint256)":{"notice":"Calculate the quantities required to withdraw and increment during redeem and withdraw. Takes into account a bitmask exclusion parameter."}}}},"settings":{"compilationTarget":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/lib/CoreIssuanceLibrary.sol":"CoreIssuanceLibrary"},"evmVersion":"byzantium","libraries":{},"optimizer":{"enabled":true,"runs":200},"remappings":[]},"sources":{"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/interfaces/IVault.sol":{"keccak256":"0xf8a6d376173be39f5744492866db5dd3f91453a124d23679ff164ff3817f2f4f","urls":["bzzr://896c0a8329175c1620e1a22467778b835defe0e61847e5a8427a306f42391e64"]},"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/lib/CoreIssuanceLibrary.sol":{"keccak256":"0xf357b43e7581992b973a274b1e8c0967952f1dc21f8f09692ea08d700a2e0252","urls":["bzzr://003c2691373a3cbb54592cede7a238b7f15e512cc3b00f63a54841b266da4c9f"]},"openzeppelin-solidity/contracts/math/SafeMath.sol":{"keccak256":"0xc2a200a877c4a9b2475c246c54ffecc69ffde3e11af83319c63c2dc5458bac80","urls":["bzzr://c8876e2c39b60f155d748d71d715c8f3903fae5a405ac599adcb6ad2f9a583f9"]},"set-protocol-contract-utils/contracts/lib/CommonMath.sol":{"keccak256":"0x3d1d08c6efc2a973fe2c02ddcb02fd99a8c8eb75f74dcbd93e8e15864eee2b6b","urls":["bzzr://580815dd1cf648a4521d923e59087de21143d9c48115ab71579a1f5a8f3d36af"]}},"version":1}',bytecode:"0x61090a610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610610067577c010000000000000000000000000000000000000000000000000000000060003504635720a5d9811461006c5780636cc34bcc146100965780639b9f5c93146100b6575b600080fd5b61007f61007a366004610677565b6100c9565b60405161008d929190610867565b60405180910390f35b6100a96100a43660046106cc565b6101c2565b60405161008d9190610856565b61007f6100c43660046105df565b6102ac565b6040805183815260208085028201019091526060908190849082908280156100fb578160200160208202803883390190505b50905060608260405190808252806020026020018201604052801561012a578160200160208202803883390190505b50905060005b838110156101b45760006101456002836104af565b90508781161561017f5789898381811061015b57fe5b9050602002013584838151811061016e57fe5b6020026020010181815250506101ab565b89898381811061018b57fe5b9050602002013583838151811061019e57fe5b6020026020010181815250505b50600101610130565b509097909650945050505050565b60606101d4828463ffffffff6104f016565b15610214576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020b9061088c565b60405180910390fd5b604080518581526020808702820101909152606090858015610240578160200160208202803883390190505b50905060005b858110156102a25761028387878381811061025d57fe5b90506020020135610277878761050d90919063ffffffff16565b9063ffffffff61052f16565b82828151811061028f57fe5b6020908102919091010152600101610246565b5095945050505050565b6040805186815260208088028201019091526060908190879082908280156102de578160200160208202803883390190505b50905060608260405190808252806020026020018201604052801561030d578160200160208202803883390190505b50905060005b8381101561049e5760008773ffffffffffffffffffffffffffffffffffffffff16631f98ade38e8e8581811061034557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161039c92919061083b565b60206040518083038186803b1580156103b457600080fd5b505afa1580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103ec9190810190610735565b90508a8a838181106103fa57fe5b905060200201358110610437578a8a8381811061041357fe5b9050602002013584838151811061042657fe5b602002602001018181525050610495565b8015610457578084838151811061044a57fe5b6020026020010181815250505b61047c818c8c8581811061046757fe5b9050602002013561055d90919063ffffffff16565b83838151811061048857fe5b6020026020010181815250505b50600101610313565b50909a909950975050505050505050565b60008083116104bd57600080fd5b600160005b838110156104e657816104db818763ffffffff61052f16565b9250506001016104c2565b5090505b92915050565b6000816104fc57600080fd5b81838161050557fe5b069392505050565b600080821161051b57600080fd5b600082848161052657fe5b04949350505050565b60008261053e575060006104ea565b8282028284828161054b57fe5b041461055657600080fd5b9392505050565b60008282111561056c57600080fd5b50900390565b600061055682356108af565b60008083601f84011261059057600080fd5b50813567ffffffffffffffff8111156105a857600080fd5b6020830191508360208202830111156105c057600080fd5b9250929050565b600061055682356108cd565b600061055682516108cd565b600080600080600080608087890312156105f857600080fd5b863567ffffffffffffffff81111561060f57600080fd5b61061b89828a0161057e565b9650965050602087013567ffffffffffffffff81111561063a57600080fd5b61064689828a0161057e565b9450945050604061065989828a01610572565b925050606061066a89828a01610572565b9150509295509295509295565b60008060006040848603121561068c57600080fd5b833567ffffffffffffffff8111156106a357600080fd5b6106af8682870161057e565b935093505060206106c2868287016105c7565b9150509250925092565b600080600080606085870312156106e257600080fd5b843567ffffffffffffffff8111156106f957600080fd5b6107058782880161057e565b94509450506020610718878288016105c7565b9250506040610729878288016105c7565b91505092959194509250565b60006020828403121561074757600080fd5b600061075384846105d3565b949350505050565b60006107678383610832565b505060200190565b610778816108af565b82525050565b6000610789826108a2565b61079381856108a6565b935061079e8361089c565b60005b828110156107c9576107b486835161075b565b95506107bf8261089c565b91506001016107a1565b5093949350505050565b60006107e0603c836108a6565b7f436f726549737375616e63654c6962726172793a205175616e74697479206d7581527f73742062652061206d756c7469706c65206f66206e617420756e697400000000602082015260400192915050565b610778816108cd565b60408101610849828561076f565b610556602083018461076f565b60208082528101610556818461077e565b60408082528101610878818561077e565b90508181036020830152610753818461077e565b602080825281016104ea816107d3565b60200190565b5190565b90815260200190565b600073ffffffffffffffffffffffffffffffffffffffff82166104ea565b9056fea265627a7a72305820ddd3bb74aaeed6615fedb3c6b96fba9c31e0ed3de1fa1501ed8845d80f3347926c6578706572696d656e74616cf50037",deployedBytecode:"0x7300000000000000000000000000000000000000003014608060405260043610610067577c010000000000000000000000000000000000000000000000000000000060003504635720a5d9811461006c5780636cc34bcc146100965780639b9f5c93146100b6575b600080fd5b61007f61007a366004610677565b6100c9565b60405161008d929190610867565b60405180910390f35b6100a96100a43660046106cc565b6101c2565b60405161008d9190610856565b61007f6100c43660046105df565b6102ac565b6040805183815260208085028201019091526060908190849082908280156100fb578160200160208202803883390190505b50905060608260405190808252806020026020018201604052801561012a578160200160208202803883390190505b50905060005b838110156101b45760006101456002836104af565b90508781161561017f5789898381811061015b57fe5b9050602002013584838151811061016e57fe5b6020026020010181815250506101ab565b89898381811061018b57fe5b9050602002013583838151811061019e57fe5b6020026020010181815250505b50600101610130565b509097909650945050505050565b60606101d4828463ffffffff6104f016565b15610214576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020b9061088c565b60405180910390fd5b604080518581526020808702820101909152606090858015610240578160200160208202803883390190505b50905060005b858110156102a25761028387878381811061025d57fe5b90506020020135610277878761050d90919063ffffffff16565b9063ffffffff61052f16565b82828151811061028f57fe5b6020908102919091010152600101610246565b5095945050505050565b6040805186815260208088028201019091526060908190879082908280156102de578160200160208202803883390190505b50905060608260405190808252806020026020018201604052801561030d578160200160208202803883390190505b50905060005b8381101561049e5760008773ffffffffffffffffffffffffffffffffffffffff16631f98ade38e8e8581811061034557fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff168b6040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161039c92919061083b565b60206040518083038186803b1580156103b457600080fd5b505afa1580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506103ec9190810190610735565b90508a8a838181106103fa57fe5b905060200201358110610437578a8a8381811061041357fe5b9050602002013584838151811061042657fe5b602002602001018181525050610495565b8015610457578084838151811061044a57fe5b6020026020010181815250505b61047c818c8c8581811061046757fe5b9050602002013561055d90919063ffffffff16565b83838151811061048857fe5b6020026020010181815250505b50600101610313565b50909a909950975050505050505050565b60008083116104bd57600080fd5b600160005b838110156104e657816104db818763ffffffff61052f16565b9250506001016104c2565b5090505b92915050565b6000816104fc57600080fd5b81838161050557fe5b069392505050565b600080821161051b57600080fd5b600082848161052657fe5b04949350505050565b60008261053e575060006104ea565b8282028284828161054b57fe5b041461055657600080fd5b9392505050565b60008282111561056c57600080fd5b50900390565b600061055682356108af565b60008083601f84011261059057600080fd5b50813567ffffffffffffffff8111156105a857600080fd5b6020830191508360208202830111156105c057600080fd5b9250929050565b600061055682356108cd565b600061055682516108cd565b600080600080600080608087890312156105f857600080fd5b863567ffffffffffffffff81111561060f57600080fd5b61061b89828a0161057e565b9650965050602087013567ffffffffffffffff81111561063a57600080fd5b61064689828a0161057e565b9450945050604061065989828a01610572565b925050606061066a89828a01610572565b9150509295509295509295565b60008060006040848603121561068c57600080fd5b833567ffffffffffffffff8111156106a357600080fd5b6106af8682870161057e565b935093505060206106c2868287016105c7565b9150509250925092565b600080600080606085870312156106e257600080fd5b843567ffffffffffffffff8111156106f957600080fd5b6107058782880161057e565b94509450506020610718878288016105c7565b9250506040610729878288016105c7565b91505092959194509250565b60006020828403121561074757600080fd5b600061075384846105d3565b949350505050565b60006107678383610832565b505060200190565b610778816108af565b82525050565b6000610789826108a2565b61079381856108a6565b935061079e8361089c565b60005b828110156107c9576107b486835161075b565b95506107bf8261089c565b91506001016107a1565b5093949350505050565b60006107e0603c836108a6565b7f436f726549737375616e63654c6962726172793a205175616e74697479206d7581527f73742062652061206d756c7469706c65206f66206e617420756e697400000000602082015260400192915050565b610778816108cd565b60408101610849828561076f565b610556602083018461076f565b60208082528101610556818461077e565b60408082528101610878818561077e565b90508181036020830152610753818461077e565b602080825281016104ea816107d3565b60200190565b5190565b90815260200190565b600073ffffffffffffffffffffffffffffffffffffffff82166104ea565b9056fea265627a7a72305820ddd3bb74aaeed6615fedb3c6b96fba9c31e0ed3de1fa1501ed8845d80f3347926c6578706572696d656e74616cf50037",sourceMap:"1036:5176:38:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24",deployedSourceMap:"1036:5176:38:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3835:1219;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;5489:720;;;;;;;;;:::i;:::-;;;;;;;;1803:1475;;;;;;;;;:::i;3835:1219::-;4256:29;;;;;;;;;;;;;;;;4027:16;;;;4174:20;;4027:16;;4174:20;4256:29;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4256:29:38;;4211:74;;4295:33;4345:14;4331:29;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;4331:29:38;-1:-1:-1;4295:65:38;-1:-1:-1;4467:9:38;4462:489;4486:14;4482:1;:18;4462:489;;;4577:25;4605:26;4626:1;4629;4605:20;:26::i;:::-;4577:54;-1:-1:-1;4732:30:38;;;4731:37;4727:214;;4819:20;;4840:1;4819:23;;;;;;;;;;;;;4788:25;4814:1;4788:28;;;;;;;;;;;;;:54;;;;;4727:214;;;4903:20;;4924:1;4903:23;;;;;;;;;;;;;4881:16;4898:1;4881:19;;;;;;;;;;;;;:45;;;;;4727:214;-1:-1:-1;4502:3:38;;4462:489;;;-1:-1:-1;4982:25:38;;;;-1:-1:-1;3835:1219:38;-1:-1:-1;;;;;3835:1219:38:o;5489:720::-;5689:16;5742:27;:9;5756:12;5742:27;:13;:27;:::i;:::-;:32;5721:139;;;;;;;;;;;;;;;;;;;;;;5902:37;;;;;;;;;;;;;;;;5871:28;;5916:15;5902:37;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;5902:37:38;-1:-1:-1;5871:68:38;-1:-1:-1;6033:9:38;6028:146;6048:26;;;6028:146;;;6112:51;6144:15;;6160:1;6144:18;;;;;;;;;;;;;6112:27;6126:12;6112:9;:13;;:27;;;;:::i;:::-;:31;:51;:31;:51;:::i;:::-;6095:11;6107:1;6095:14;;;;;;;;;;;;;;;;;:68;6076:3;;6028:146;;;-1:-1:-1;6191:11:38;5489:720;-1:-1:-1;;;;;5489:720:38:o;1803:1475::-;2273:29;;;;;;;;;;;;;;;;2054:16;;;;2200:11;;2054:16;;2200:11;2273:29;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;2273:29:38;;2228:74;;2312:34;2363:14;2349:29;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;2349:29:38;-1:-1:-1;2312:66:38;-1:-1:-1;2394:9:38;2389:785;2413:14;2409:1;:18;2389:785;;;2497:20;2527:6;2520:30;;;2568:11;;2580:1;2568:14;;;;;;;;;;;;;;;2600:6;2520:100;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2520:100:38;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2520:100:38;;;;;;;101:4:-1;97:9;90:4;84;80:15;76:31;69:5;65:43;126:6;120:4;113:20;0:138;2520:100:38;;;;;;;;;2497:123;;2734:20;;2755:1;2734:23;;;;;;;;;;;;;2718:12;:39;2714:450;;2808:20;;2829:1;2808:23;;;;;;;;;;;;;2777:25;2803:1;2777:28;;;;;;;;;;;;;:54;;;;;2714:450;;;2965:16;;2961:106;;3036:12;3005:25;3031:1;3005:28;;;;;;;;;;;;;:43;;;;;2961:106;3108:41;3136:12;3108:20;;3129:1;3108:23;;;;;;;;;;;;;:27;;:41;;;;:::i;:::-;3085:17;3103:1;3085:20;;;;;;;;;;;;;:64;;;;;2714:450;-1:-1:-1;2429:3:38;;2389:785;;;-1:-1:-1;3205:25:38;;;;-1:-1:-1;1803:1475:38;-1:-1:-1;;;;;;;;1803:1475:38:o;1995:416:176:-;2107:7;2142:1;2138;:5;2130:14;;;;;;2172:1;2155:14;2183:198;2207:3;2203:1;:7;2183:198;;;2255:6;2349:21;2255:6;2368:1;2349:21;:18;:21;:::i;:::-;2340:30;-1:-1:-1;;2212:3:176;;2183:198;;;-1:-1:-1;2398:6:176;-1:-1:-1;1995:416:176;;;;;:::o;1739:121:166:-;1797:7;1824:6;1816:15;;;;;;1852:1;1848;:5;;;;;;;1739:121;-1:-1:-1;;;1739:121:166:o;782:296::-;840:7;937:1;933;:5;925:14;;;;;;949:9;965:1;961;:5;;;;;;;782:296;-1:-1:-1;;;;782:296:166:o;231:421::-;289:7;529:6;525:45;;-1:-1:-1;558:1:166;551:8;;525:45;592:5;;;596:1;592;:5;:1;615:5;;;;;:10;607:19;;;;;;644:1;231:421;-1:-1:-1;;;231:421:166:o;1211:145::-;1269:7;1301:1;1296;:6;;1288:15;;;;;;-1:-1:-1;1325:5:166;;;1211:145::o;5:118:-1:-;;72:46;110:6;97:20;72:46;;148:352;;;278:3;271:4;263:6;259:17;255:27;245:2;;296:1;293;286:12;245:2;-1:-1;316:20;;356:18;345:30;;342:2;;;388:1;385;378:12;342:2;422:4;414:6;410:17;398:29;;473:3;465:4;457:6;453:17;443:8;439:32;436:41;433:2;;;490:1;487;480:12;433:2;238:262;;;;;;886:118;;953:46;991:6;978:20;953:46;;1011:122;;1089:39;1120:6;1114:13;1089:39;;1140:929;;;;;;;1365:3;1353:9;1344:7;1340:23;1336:33;1333:2;;;1382:1;1379;1372:12;1333:2;1417:31;;1468:18;1457:30;;1454:2;;;1500:1;1497;1490:12;1454:2;1528:80;1600:7;1591:6;1580:9;1576:22;1528:80;;;1518:90;;;;1396:218;1673:2;1662:9;1658:18;1645:32;1697:18;1689:6;1686:30;1683:2;;;1729:1;1726;1719:12;1683:2;1757:80;1829:7;1820:6;1809:9;1805:22;1757:80;;;1747:90;;;;1624:219;1874:2;1892:53;1937:7;1928:6;1917:9;1913:22;1892:53;;;1882:63;;1853:98;1982:2;2000:53;2045:7;2036:6;2025:9;2021:22;2000:53;;;1990:63;;1961:98;1327:742;;;;;;;;;2076:522;;;;2232:2;2220:9;2211:7;2207:23;2203:32;2200:2;;;2248:1;2245;2238:12;2200:2;2283:31;;2334:18;2323:30;;2320:2;;;2366:1;2363;2356:12;2320:2;2394:80;2466:7;2457:6;2446:9;2442:22;2394:80;;;2384:90;;;;2262:218;2511:2;2529:53;2574:7;2565:6;2554:9;2550:22;2529:53;;;2519:63;;2490:98;2194:404;;;;;;2605:647;;;;;2778:2;2766:9;2757:7;2753:23;2749:32;2746:2;;;2794:1;2791;2784:12;2746:2;2829:31;;2880:18;2869:30;;2866:2;;;2912:1;2909;2902:12;2866:2;2940:80;3012:7;3003:6;2992:9;2988:22;2940:80;;;2930:90;;;;2808:218;3057:2;3075:53;3120:7;3111:6;3100:9;3096:22;3075:53;;;3065:63;;3036:98;3165:2;3183:53;3228:7;3219:6;3208:9;3204:22;3183:53;;;3173:63;;3144:98;2740:512;;;;;;;;3259:263;;3374:2;3362:9;3353:7;3349:23;3345:32;3342:2;;;3390:1;3387;3380:12;3342:2;3425:1;3442:64;3498:7;3478:9;3442:64;;;3432:74;3336:186;-1:-1;;;;3336:186;3530:189;;3625:54;3675:3;3667:6;3625:54;;;-1:-1;;3708:4;3699:14;;3618:101;3727:120;3810:31;3835:5;3810:31;;;3805:3;3798:44;3792:55;;;3885:645;;4038:54;4086:5;4038:54;;;4105:94;4192:6;4187:3;4105:94;;;4098:101;;4219:56;4269:5;4219:56;;;4296:1;4281:227;4306:6;4303:1;4300:13;4281:227;;;4353:71;4420:3;4411:6;4405:13;4353:71;;;4346:78;;4441:60;4494:6;4441:60;;;4431:70;-1:-1;4328:1;4321:9;4281:227;;;-1:-1;4521:3;;4017:513;-1:-1;;;;4017:513;4539:465;;4699:67;4763:2;4758:3;4699:67;;;4799:66;4779:87;;4900:66;4895:2;4886:12;;4879:88;4995:2;4986:12;;4685:319;-1:-1;;4685:319;5012:118;5093:31;5118:5;5093:31;;5137:324;5283:2;5268:18;;5297:71;5272:9;5341:6;5297:71;;;5379:72;5447:2;5436:9;5432:18;5423:6;5379:72;;5468:377;5644:2;5658:47;;;5629:18;;5719:116;5629:18;5821:6;5719:116;;5852:644;6106:2;6120:47;;;6091:18;;6181:116;6091:18;6283:6;6181:116;;;6173:124;;6345:9;6339:4;6335:20;6330:2;6319:9;6315:18;6308:48;6370:116;6481:4;6472:6;6370:116;;6503:407;6694:2;6708:47;;;6679:18;;6769:131;6679:18;6769:131;;6919:121;7028:4;7016:17;;6997:43;7049:107;7139:12;;7123:33;7295:186;7421:19;;;7470:4;7461:14;;7414:67;7661:105;;7853:42;7842:54;;7730:31;7825:76;7908:79;7977:5;7960:27",source:'/*\n    Copyright 2018 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the "License");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an "AS IS" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\npragma solidity 0.5.7;\npragma experimental "ABIEncoderV2";\n\nimport { SafeMath } from "openzeppelin-solidity/contracts/math/SafeMath.sol";\nimport { CommonMath } from "set-protocol-contract-utils/contracts/lib/CommonMath.sol";\n\nimport { IVault } from "../interfaces/IVault.sol";\n\n\n/**\n * @title CoreIssuanceLibrary\n * @author Set Protocol\n *\n * This library contains functions for calculating deposit, withdrawal,and transfer quantities\n */\nlibrary CoreIssuanceLibrary {\n\n    using SafeMath for uint256;\n\n    /**\n     * Calculate the quantities required to deposit and decrement during issuance. Takes into account\n     * the tokens an owner already has in the vault.\n     *\n     * @param _components                           Addresses of components\n     * @param _componentQuantities                  Component quantities to increment and withdraw\n     * @param _owner                                Address to deposit and decrement quantities from\n     * @param _vault                                Address to vault\n     * @return uint256[] decrementQuantities        Quantities to decrement from vault\n     * @return uint256[] depositQuantities          Quantities to deposit into the vault\n     */\n    function calculateDepositAndDecrementQuantities(\n        address[] calldata _components,\n        uint256[] calldata _componentQuantities,\n        address _owner,\n        address _vault\n    )\n        external\n        view\n        returns (\n            uint256[] memory /* decrementQuantities */,\n            uint256[] memory /* depositQuantities */\n        )\n    {\n        uint256 componentCount = _components.length;\n        uint256[] memory decrementTokenOwnerValues = new uint256[](componentCount);\n        uint256[] memory depositQuantities = new uint256[](componentCount);\n\n        for (uint256 i = 0; i < componentCount; i++) {\n            // Fetch component quantity in vault\n            uint256 vaultBalance = IVault(_vault).getOwnerBalance(\n                _components[i],\n                _owner\n            );\n\n            // If the vault holds enough components, decrement the full amount\n            if (vaultBalance >= _componentQuantities[i]) {\n                decrementTokenOwnerValues[i] = _componentQuantities[i];\n            } else {\n                // User has less than required amount, decrement the vault by full balance\n                if (vaultBalance > 0) {\n                    decrementTokenOwnerValues[i] = vaultBalance;\n                }\n\n                depositQuantities[i] = _componentQuantities[i].sub(vaultBalance);\n            }\n        }\n\n        return (\n            decrementTokenOwnerValues,\n            depositQuantities\n        );\n    }\n\n    /**\n     * Calculate the quantities required to withdraw and increment during redeem and withdraw. Takes into\n     * account a bitmask exclusion parameter.\n     *\n     * @param _componentQuantities                  Component quantities to increment and withdraw\n     * @param _toExclude                            Mask of indexes of tokens to exclude from withdrawing\n     * @return uint256[] incrementQuantities        Quantities to increment in vault\n     * @return uint256[] withdrawQuantities         Quantities to withdraw from vault\n     */\n    function calculateWithdrawAndIncrementQuantities(\n        uint256[] calldata _componentQuantities,\n        uint256 _toExclude\n    )\n        external\n        pure\n        returns (\n            uint256[] memory /* incrementQuantities */,\n            uint256[] memory /* withdrawQuantities */\n        )\n    {\n        uint256 componentCount = _componentQuantities.length;\n        uint256[] memory incrementTokenOwnerValues = new uint256[](componentCount);\n        uint256[] memory withdrawToValues = new uint256[](componentCount);\n\n        // Loop through and decrement vault balances for the set, withdrawing if requested\n        for (uint256 i = 0; i < componentCount; i++) {\n            // Calculate bit index of current component\n            uint256 componentBitIndex = CommonMath.safePower(2, i);\n\n            // Transfer to user unless component index is included in _toExclude\n            if ((_toExclude & componentBitIndex) != 0) {\n                incrementTokenOwnerValues[i] = _componentQuantities[i];\n            } else {\n                withdrawToValues[i] = _componentQuantities[i];\n            }\n        }\n\n        return (\n            incrementTokenOwnerValues,\n            withdrawToValues\n        );\n    }\n\n    /**\n     * Calculate the required component quantities required for issuance or rdemption for a given \n     * quantity of Set Tokens\n     *\n     * @param _componentUnits   The units of the component token\n     * @param _naturalUnit      The natural unit of the Set token\n     * @param _quantity         The number of tokens being redeem\n     * @return uint256[]        Required quantities in base units of components\n     */\n    function calculateRequiredComponentQuantities(\n        uint256[] calldata _componentUnits,\n        uint256 _naturalUnit,\n        uint256 _quantity\n    )\n        external\n        pure\n        returns (uint256[] memory)\n    {\n        require(\n            _quantity.mod(_naturalUnit) == 0,\n            "CoreIssuanceLibrary: Quantity must be a multiple of nat unit"\n        );\n\n        uint256[] memory tokenValues = new uint256[](_componentUnits.length);\n\n        // Transfer the underlying tokens to the corresponding token balances\n        for (uint256 i = 0; i < _componentUnits.length; i++) {\n            tokenValues[i] = _quantity.div(_naturalUnit).mul(_componentUnits[i]);\n        }\n\n        return tokenValues;\n    }\n\n}\n',sourcePath:"/Users/brianweickmann/Documents/Source/set-protocol-contracts/contracts/core/lib/CoreIssuanceLibrary.sol",compiler:{name:"solc",version:"0.5.7+commit.6da8b019.Linux.g++"},networks:{},schemaVersion:"3.0.23",updatedAt:"2020-05-05T17:13:36.383Z",devdoc:{author:"Set Protocol * This library contains functions for calculating deposit, withdrawal,and transfer quantities",methods:{"calculateDepositAndDecrementQuantities(address[],uint256[],address,address)":{params:{_componentQuantities:"Component quantities to increment and withdraw",_components:"Addresses of components",_owner:"Address to deposit and decrement quantities from",_vault:"Address to vault"},"return":"uint256[] decrementQuantities        Quantities to decrement from vaultuint256[] depositQuantities          Quantities to deposit into the vault"},"calculateRequiredComponentQuantities(uint256[],uint256,uint256)":{params:{_componentUnits:"The units of the component token",_naturalUnit:"The natural unit of the Set token",_quantity:"The number of tokens being redeem"},"return":"uint256[]        Required quantities in base units of components"},"calculateWithdrawAndIncrementQuantities(uint256[],uint256)":{params:{_componentQuantities:"Component quantities to increment and withdraw",_toExclude:"Mask of indexes of tokens to exclude from withdrawing"},"return":"uint256[] incrementQuantities        Quantities to increment in vaultuint256[] withdrawQuantities         Quantities to withdraw from vault"}},title:"CoreIssuanceLibrary"},userdoc:{methods:{"calculateDepositAndDecrementQuantities(address[],uint256[],address,address)":{notice:"Calculate the quantities required to deposit and decrement during issuance. Takes into account the tokens an owner already has in the vault."},"calculateRequiredComponentQuantities(uint256[],uint256,uint256)":{notice:"Calculate the required component quantities required for issuance or rdemption for a given  quantity of Set Tokens"},"calculateWithdrawAndIncrementQuantities(uint256[],uint256)":{notice:"Calculate the quantities required to withdraw and increment during redeem and withdraw. Takes into account a bitmask exclusion parameter."}}}};