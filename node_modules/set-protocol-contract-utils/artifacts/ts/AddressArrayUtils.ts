export const AddressArrayUtils = {"contractName":"AddressArrayUtils","abi":[],"metadata":"{\"compiler\":{\"version\":\"0.5.7+commit.6da8b019\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/Users/justin_chen/Dropbox/workspace/set-protocol-contract-utils/contracts/lib/AddressArrayUtils.sol\":\"AddressArrayUtils\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/justin_chen/Dropbox/workspace/set-protocol-contract-utils/contracts/lib/AddressArrayUtils.sol\":{\"keccak256\":\"0xb716eab4e8c5a336a2f19078928530829af097912bd1b925644f914b63601f08\",\"urls\":[\"bzzr://d8a21d39779beb316adb5180d08dcba1941eeccd9412ff08feb21a631c18c269\"]}},\"version\":1}","bytecode":"0x604c6023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a723058202d817ff7a4509fe6664e51597408ee79293fd6e7195b106192d6c27bacbf43680029","deployedBytecode":"0x73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a723058202d817ff7a4509fe6664e51597408ee79293fd6e7195b106192d6c27bacbf43680029","sourceMap":"228:6712:1:-;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24","deployedSourceMap":"228:6712:1:-;;;;;;;;","source":"// Pulled in from Cryptofin Solidity package in order to control Solidity compiler version\n// https://github.com/cryptofinlabs/cryptofin-solidity/blob/master/contracts/array-utils/AddressArrayUtils.sol\n\npragma solidity 0.5.7;\n\n\nlibrary AddressArrayUtils {\n\n    /**\n     * Finds the index of the first occurrence of the given element.\n     * @param A The input array to search\n     * @param a The value to find\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\n     */\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\n        uint256 length = A.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (A[i] == a) {\n                return (i, true);\n            }\n        }\n        return (0, false);\n    }\n\n    /**\n    * Returns true if the value is present in the list. Uses indexOf internally.\n    * @param A The input array to search\n    * @param a The value to find\n    * @return Returns isIn for the first occurrence starting from index 0\n    */\n    function contains(address[] memory A, address a) internal pure returns (bool) {\n        bool isIn;\n        (, isIn) = indexOf(A, a);\n        return isIn;\n    }\n\n    /**\n     * Returns the combination of the two arrays\n     * @param A The first array\n     * @param B The second array\n     * @return Returns A extended by B\n     */\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\n        uint256 aLength = A.length;\n        uint256 bLength = B.length;\n        address[] memory newAddresses = new address[](aLength + bLength);\n        for (uint256 i = 0; i < aLength; i++) {\n            newAddresses[i] = A[i];\n        }\n        for (uint256 j = 0; j < bLength; j++) {\n            newAddresses[aLength + j] = B[j];\n        }\n        return newAddresses;\n    }\n\n    /**\n     * Returns the array with a appended to A.\n     * @param A The first array\n     * @param a The value to append\n     * @return Returns A appended by a\n     */\n    function append(address[] memory A, address a) internal pure returns (address[] memory) {\n        address[] memory newAddresses = new address[](A.length + 1);\n        for (uint256 i = 0; i < A.length; i++) {\n            newAddresses[i] = A[i];\n        }\n        newAddresses[A.length] = a;\n        return newAddresses;\n    }\n\n    /**\n     * Returns the intersection of two arrays. Arrays are treated as collections, so duplicates are kept.\n     * @param A The first array\n     * @param B The second array\n     * @return The intersection of the two arrays\n     */\n    function intersect(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\n        uint256 length = A.length;\n        bool[] memory includeMap = new bool[](length);\n        uint256 newLength = 0;\n        for (uint256 i = 0; i < length; i++) {\n            if (contains(B, A[i])) {\n                includeMap[i] = true;\n                newLength++;\n            }\n        }\n        address[] memory newAddresses = new address[](newLength);\n        uint256 j = 0;\n        for (uint256 k = 0; k < length; k++) {\n            if (includeMap[k]) {\n                newAddresses[j] = A[k];\n                j++;\n            }\n        }\n        return newAddresses;\n    }\n\n    /**\n     * Returns the union of the two arrays. Order is not guaranteed.\n     * @param A The first array\n     * @param B The second array\n     * @return The union of the two arrays\n     */\n    function union(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\n        address[] memory leftDifference = difference(A, B);\n        address[] memory rightDifference = difference(B, A);\n        address[] memory intersection = intersect(A, B);\n        return extend(leftDifference, extend(intersection, rightDifference));\n    }\n\n    /**\n     * Computes the difference of two arrays. Assumes there are no duplicates.\n     * @param A The first array\n     * @param B The second array\n     * @return The difference of the two arrays\n     */\n    function difference(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\n        uint256 length = A.length;\n        bool[] memory includeMap = new bool[](length);\n        uint256 count = 0;\n        // First count the new length because can't push for in-memory arrays\n        for (uint256 i = 0; i < length; i++) {\n            address e = A[i];\n            if (!contains(B, e)) {\n                includeMap[i] = true;\n                count++;\n            }\n        }\n        address[] memory newAddresses = new address[](count);\n        uint256 j = 0;\n        for (uint256 k = 0; k < length; k++) {\n            if (includeMap[k]) {\n                newAddresses[j] = A[k];\n                j++;\n            }\n        }\n        return newAddresses;\n    }\n\n    /**\n    * Removes specified index from array\n    * Resulting ordering is not guaranteed\n    * @return Returns the new array and the removed entry\n    */\n    function pop(address[] memory A, uint256 index)\n        internal\n        pure\n        returns (address[] memory, address)\n    {\n        uint256 length = A.length;\n        address[] memory newAddresses = new address[](length - 1);\n        for (uint256 i = 0; i < index; i++) {\n            newAddresses[i] = A[i];\n        }\n        for (uint256 j = index + 1; j < length; j++) {\n            newAddresses[j - 1] = A[j];\n        }\n        return (newAddresses, A[index]);\n    }\n\n    /**\n     * @return Returns the new array\n     */\n    function remove(address[] memory A, address a)\n        internal\n        pure\n        returns (address[] memory)\n    {\n        (uint256 index, bool isIn) = indexOf(A, a);\n        if (!isIn) {\n            revert();\n        } else {\n            (address[] memory _A,) = pop(A, index);\n            return _A;\n        }\n    }\n\n    /**\n     * Returns whether or not there's a duplicate. Runs in O(n^2).\n     * @param A Array to search\n     * @return Returns true if duplicate, false otherwise\n     */\n    function hasDuplicate(address[] memory A) internal pure returns (bool) {\n        if (A.length == 0) { \n            return false;\n        }\n        for (uint256 i = 0; i < A.length - 1; i++) {\n            for (uint256 j = i + 1; j < A.length; j++) {\n                if (A[i] == A[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns whether the two arrays are equal.\n     * @param A The first array\n     * @param B The second array\n     * @return True is the arrays are equal, false if not.\n     */\n    function isEqual(address[] memory A, address[] memory B) internal pure returns (bool) {\n        if (A.length != B.length) {\n            return false;\n        }\n        for (uint256 i = 0; i < A.length; i++) {\n            if (A[i] != B[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","sourcePath":"/Users/justin_chen/Dropbox/workspace/set-protocol-contract-utils/contracts/lib/AddressArrayUtils.sol","compiler":{"name":"solc","version":"0.5.7+commit.6da8b019.Linux.g++"},"networks":{},"schemaVersion":"3.0.23","updatedAt":"2020-05-04T03:14:12.102Z","devdoc":{"methods":{}},"userdoc":{"methods":{}}}