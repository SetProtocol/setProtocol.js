"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OracleWhiteList = { "contractName": "OracleWhiteList", "abi": [{ "constant": true, "inputs": [{ "name": "", "type": "bytes32" }], "name": "timeLockedUpgrades", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "address" }], "name": "oracleWhiteList", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "timeLockPeriod", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "owner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "isOwner", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "_timeLockPeriod", "type": "uint256" }], "name": "setTimeLockPeriod", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_upgradeHash", "type": "bytes32" }], "name": "removeRegisteredUpgrade", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [{ "name": "", "type": "uint256" }], "name": "addresses", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "name": "_initialTokenAddresses", "type": "address[]" }, { "name": "_initialOracleAddresses", "type": "address[]" }], "payable": false, "stateMutability": "nonpayable", "type": "constructor" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "_tokenAddress", "type": "address" }, { "indexed": false, "name": "_oracleAddress", "type": "address" }], "name": "TokenOraclePairAdded", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "name": "_tokenAddress", "type": "address" }, { "indexed": false, "name": "_oracleAddress", "type": "address" }], "name": "TokenOraclePairRemoved", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_upgradeHash", "type": "bytes32" }, { "indexed": false, "name": "_timestamp", "type": "uint256" }, { "indexed": false, "name": "_upgradeData", "type": "bytes" }], "name": "UpgradeRegistered", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_upgradeHash", "type": "bytes32" }], "name": "RemoveRegisteredUpgrade", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "previousOwner", "type": "address" }, { "indexed": true, "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" }, { "constant": false, "inputs": [{ "name": "_tokenAddress", "type": "address" }, { "name": "_oracleAddress", "type": "address" }], "name": "addTokenOraclePair", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_tokenAddress", "type": "address" }], "name": "removeTokenOraclePair", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_tokenAddress", "type": "address" }, { "name": "_oracleAddress", "type": "address" }], "name": "editTokenOraclePair", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "validAddresses", "outputs": [{ "name": "", "type": "address[]" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "_tokenAddresses", "type": "address[]" }], "name": "getOracleAddressesByToken", "outputs": [{ "name": "", "type": "address[]" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "_tokenAddress", "type": "address" }], "name": "getOracleAddressByToken", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [{ "name": "_tokenAddresses", "type": "address[]" }], "name": "areValidAddresses", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }], "metadata": "{\"compiler\":{\"version\":\"0.5.7+commit.6da8b019\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"timeLockedUpgrades\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"areValidAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getOracleAddressByToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"oracleWhiteList\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLockPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"addTokenOraclePair\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenAddresses\",\"type\":\"address[]\"}],\"name\":\"getOracleAddressesByToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"editTokenOraclePair\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeLockPeriod\",\"type\":\"uint256\"}],\"name\":\"setTimeLockPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradeHash\",\"type\":\"bytes32\"}],\"name\":\"removeRegisteredUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validAddresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addresses\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeTokenOraclePair\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_initialTokenAddresses\",\"type\":\"address[]\"},{\"name\":\"_initialOracleAddresses\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"TokenOraclePairAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"TokenOraclePairRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_upgradeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_upgradeData\",\"type\":\"bytes\"}],\"name\":\"UpgradeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_upgradeHash\",\"type\":\"bytes32\"}],\"name\":\"RemoveRegisteredUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Set Protocol * WhiteList that matches whitelisted tokens to their on chain price oracle\",\"methods\":{\"addTokenOraclePair(address,address)\":{\"params\":{\"_oracleAddress\":\"Oracle address to add to the whitelist under _tokenAddress\",\"_tokenAddress\":\"Token address to add to the whitelist\"}},\"areValidAddresses(address[])\":{\"params\":{\"_tokenAddresses\":\"Array of token addresses to check if oracle exists\"},\"return\":\"bool               Whether all addresses in the list are whitelsited\"},\"constructor\":{\"params\":{\"_initialOracleAddresses\":\"Starting set of oracle addresses to whitelist\",\"_initialTokenAddresses\":\"Starting set of toke addresses to whitelist\"}},\"editTokenOraclePair(address,address)\":{\"params\":{\"_oracleAddress\":\"Oracle address to add to the whitelist under _tokenAddress\",\"_tokenAddress\":\"Token address to add to the whitelist\"}},\"getOracleAddressByToken(address)\":{\"params\":{\"_tokenAddress\":\"Address of token\"},\"return\":\"address          Address of oracle associated with token\"},\"getOracleAddressesByToken(address[])\":{\"params\":{\"_tokenAddresses\":\"Array of token addresses to get oracle addresses for\"},\"return\":\"address[]          Array of oracle addresses\"},\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"owner()\":{\"return\":\"the address of the owner.\"},\"removeRegisteredUpgrade(bytes32)\":{\"params\":{\"_upgradeHash\":\"Keccack256 hash that uniquely identifies function called and arguments \"}},\"removeTokenOraclePair(address)\":{\"params\":{\"_tokenAddress\":\"Token address to remove to the whitelist\"}},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"},\"setTimeLockPeriod(uint256)\":{\"params\":{\"_timeLockPeriod\":\"Time in seconds that upgrades need to be evaluated before execution\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}},\"validAddresses()\":{\"return\":\"address[]      Array of addresses\"}},\"title\":\"OracleWhiteList\"},\"userdoc\":{\"methods\":{\"addTokenOraclePair(address,address)\":{\"notice\":\"Add an address to the whitelist\"},\"areValidAddresses(address[])\":{\"notice\":\"Verifies an array of addresses against the whitelist\"},\"constructor\":\"Constructor function for OracleWhiteList     * Allow initial addresses to be passed in so a separate transaction is not required for each. Each token address passed is matched with a corresponding oracle address at the same index. The _initialTokenAddresses and _initialOracleAddresses arrays must be equal length.\",\"editTokenOraclePair(address,address)\":{\"notice\":\"Edit oracle address associated with a token address\"},\"getOracleAddressByToken(address)\":{\"notice\":\"Return oracle address associated with a passed token address \"},\"getOracleAddressesByToken(address[])\":{\"notice\":\"Return array of oracle addresses based on passed in token addresses \"},\"removeRegisteredUpgrade(bytes32)\":{\"notice\":\"Removes an existing upgrade.\"},\"removeTokenOraclePair(address)\":{\"notice\":\"Remove a token oracle pair from the whitelist\"},\"renounceOwnership()\":{\"notice\":\"Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTimeLockPeriod(uint256)\":{\"notice\":\"Change timeLockPeriod period. Generally called after initially settings have been set up.\"},\"validAddresses()\":{\"notice\":\"Return array of all whitelisted addresses\"}}}},\"settings\":{\"compilationTarget\":{\"/Users/justin_chen/Dropbox/workspace/set-protocol-contract-utils/contracts/lib/OracleWhiteList.sol\":\"OracleWhiteList\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/justin_chen/Dropbox/workspace/set-protocol-contract-utils/contracts/lib/AddressArrayUtils.sol\":{\"keccak256\":\"0xb716eab4e8c5a336a2f19078928530829af097912bd1b925644f914b63601f08\",\"urls\":[\"bzzr://d8a21d39779beb316adb5180d08dcba1941eeccd9412ff08feb21a631c18c269\"]},\"/Users/justin_chen/Dropbox/workspace/set-protocol-contract-utils/contracts/lib/OracleWhiteList.sol\":{\"keccak256\":\"0xb462979e03ea753334900e5d493f5e6b863452fd7c3c15e46f84a6d3b080bb0b\",\"urls\":[\"bzzr://3be28bdf039fa95a3dfe9cd2ae0824a7cb662cc8f2c6d290d30d1b76d494bedf\"]},\"/Users/justin_chen/Dropbox/workspace/set-protocol-contract-utils/contracts/lib/TimeLockUpgradeV2.sol\":{\"keccak256\":\"0x7c8188e262d4db7d352130c56c0eab85a6f9f89afb5fe08efe49084557e3e600\",\"urls\":[\"bzzr://5b0a3762af16f66a60bdb9cc1bcb14a7066bd3c54dd80c6333a9f07118800340\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xc2a200a877c4a9b2475c246c54ffecc69ffde3e11af83319c63c2dc5458bac80\",\"urls\":[\"bzzr://c8876e2c39b60f155d748d71d715c8f3903fae5a405ac599adcb6ad2f9a583f9\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0xcb16adc00dcf0d75e0bdf94379f4d5a6d74dca7c74e4183b94e15721159f8a30\",\"urls\":[\"bzzr://b81e03f7203cd628cfed19255911a04a05e8670d248afb48a7b067dd03b4ff55\"]}},\"version\":1}", "bytecode": "", "deployedBytecode": "", "sourceMap": "965:7071:10:-;;;2064:657;8:9:-1;5:2;;;30:1;27;20:12;5:2;2064:657:10;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2064:657:10;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;2064:657:10;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;-1:-1;;515:6:28;:19;;-1:-1:-1;;;;;;515:19:28;524:10;515:19;;;;549:40;;2064:657:10;;-1:-1:-1;;;;;;582:6:28;;-1:-1:-1;515:6:28;-1:-1:-1;549:40:28;;515:6;;549:40;2264:23:10;:30;2231:22;:29;:63;2210:181;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2457:9;2452:263;2476:22;:29;2472:1;:33;2452:263;;;2526:25;2554:22;2577:1;2554:25;;;;;;;;;;;;;;;;;;2594:9;27:10:-1;;39:1;23:18;;45:23;;-1:-1;2594:33:10;;;;;;;;-1:-1:-1;;;;;;2594:33:10;-1:-1:-1;;;;;2594:33:10;;;;;2678:26;;2554:25;;-1:-1:-1;2678:26:10;;2702:1;;2678:26;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2641:34:10;;;;;;;:15;:34;;;;;;;:63;;-1:-1:-1;;;;;;2641:63:10;;;;;;;;;;;-1:-1:-1;2507:3:10;2452:263;;;;2064:657;;965:7071;;;;;;", "deployedSourceMap": "965:7071:10:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;965:7071:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1399:53:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1399:53:13;;:::i;:::-;;;;;;;;;;;;;;;;7315:717:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7315:717:10;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;7315:717:10;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;7315:717:10;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;-1:-1;7315:717:10;;-1:-1:-1;7315:717:10;-1:-1:-1;7315:717:10;:::i;:::-;;;;;;;;;;;;;;;;;;6568:489;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;6568:489:10;-1:-1:-1;;;;;6568:489:10;;:::i;:::-;;;;-1:-1:-1;;;;;6568:489:10;;;;;;;;;;;;;;1163:50;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1163:50:10;-1:-1:-1;;;;;1163:50:10;;:::i;1423:137:28:-;;;:::i;:::-;;1284:29:13;;;:::i;3004:505:10:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3004:505:10;;;;;;;;;;:::i;5492:857::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5492:857:10;;;;;;;;21:11:-1;5:28;;2:2;;;46:1;43;36:12;2:2;5492:857:10;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;5492:857:10;;;;;;101:9:-1;95:2;81:12;77:21;67:8;63:36;60:51;39:11;25:12;22:29;11:108;8:2;;;132:1;129;122:12;8:2;-1:-1;5492:857:10;;-1:-1:-1;5492:857:10;-1:-1:-1;5492:857:10;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;5492:857:10;;;;;;;;;;;;;;;;;4428:557;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4428:557:10;;;;;;;;;;:::i;659:77:28:-;;;:::i;979:90::-;;;:::i;4099:398:13:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4099:398:13;;:::i;3428:444::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3428:444:13;;:::i;5112:128:10:-;;;:::i;1131:26::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1131:26:10;;:::i;1731:107:28:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1731:107:28;-1:-1:-1;;;;;1731:107:28;;:::i;3663:518:10:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3663:518:10;-1:-1:-1;;;;;3663:518:10;;:::i;1399:53:13:-;;;;;;;;;;;;;:::o;7315:717:10:-;7439:4;7519:15;7633;7612:133;;;;-1:-1:-1;;;;;7612:133:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7761:9;7756:248;7780:11;7776:1;:15;7756:248;;;7945:1;7898:15;7945:1;7914:15;;7930:1;7914:18;;;;;;;-1:-1:-1;;;;;7914:18:10;;;;;;;;;;;7898:35;;;;;;;;;;;;-1:-1:-1;7898:35:10;;;:49;;;;7894:100;;-1:-1:-1;7894:100:10;;7974:5;7967:12;;;;;;7894:100;7793:3;;7756:248;;;;8021:4;8014:11;;;7315:717;;;;;:::o;6568:489::-;-1:-1:-1;;;;;6792:30:10;;;6683:7;6792:30;;;:15;:30;;;;;;6683:7;;6792:30;6771:161;;;;-1:-1:-1;;;;;6771:161:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;7013:30:10;;;;;;;:15;:30;;;;;;;;6568:489::o;1163:50::-;;;;;;;;;;;;-1:-1:-1;;;;;1163:50:10;;:::o;1423:137:28:-;863:9;:7;:9::i;:::-;855:18;;;;;;1521:1;1505:6;;1484:40;;-1:-1:-1;;;;;1505:6:28;;;;1484:40;;1521:1;;1484:40;1551:1;1534:19;;-1:-1:-1;;;;;;1534:19:28;;;1423:137::o;1284:29:13:-;;;;:::o;3004:505:10:-;863:9:28;:7;:9::i;:::-;855:18;;;;;;1818:9:13;:7;:9::i;:::-;1797:103;;;;-1:-1:-1;;;;;1797:103:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2069:14;;:18;2065:1091;;2278:19;2365:8;;2327:64;;;;;;;30:3:-1;22:6;14;1:33;2327:64:13;;;45:16:-1;;;;26:21;;;-1:-1;;22:32;6:49;;2327:64:13;;2300:105;;49:4:-1;2300:105:13;;;;2420:24;2447:31;;;:18;:31;;;;;;;2300:105;;-1:-1:-1;2447:31:13;;-1:-1:-1;;;2583:21:13;;2579:293;;-1:-1:-1;2579:293:13;;2658:15;2624:18;:31;2643:11;2624:31;;;;;;;;;;;:49;;;;2736:11;2697:135;2769:15;2806:8;;2697:135;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;;74:27;2697:135:13;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;2697:135:13;;;;-1:-1:-1;2697:135:13;;-1:-1:-1;;;;;2697:135:13;2851:7;;;;2579:293;2951:14;;2930:36;;:16;;:36;:20;:36;:::i;:::-;2911:15;:55;;2886:168;;;;-1:-1:-1;;;;;2886:168:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3143:1:13;3109:31;;;:18;:31;;;;;:35;2065:1091;-1:-1:-1;;;;;3195:30:10;;;3237:1;3195:30;;;:15;:30;;;;;;;:44;3174:164;;;;-1:-1:-1;;;;;3174:164:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3349:9;27:10:-1;;39:1;23:18;;45:23;;;3349:29:10;;;;-1:-1:-1;;;;;3349:29:10;;;-1:-1:-1;;;;;;3349:29:10;;;;;;;;-1:-1:-1;3388:30:10;;;:15;3349:29;3388:30;;;;;;;;:47;;;;;;;;;;;;;;3451:51;;;;;;;;;;;;;;;;;;;;;883:1:28;3004:505:10;;:::o;5492:857::-;5624:16;5716:15;5830;5809:141;;;;-1:-1:-1;;;;;5809:141:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6007:32;6056:11;6042:26;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;6042:26:10;-1:-1:-1;6007:61:10;-1:-1:-1;6084:9:10;6079:224;6103:11;6099:1;:15;6079:224;;;6219:73;6260:15;;6276:1;6260:18;;;;;;;;;;;;;-1:-1:-1;;;;;6260:18:10;6219:23;:73::i;:::-;6198:15;6214:1;6198:18;;;;;;;;-1:-1:-1;;;;;6198:94:10;;;:18;;;;;;;;;;;:94;6116:3;;6079:224;;;-1:-1:-1;6320:15:10;5492:857;-1:-1:-1;;;;5492:857:10:o;4428:557::-;863:9:28;:7;:9::i;:::-;855:18;;;;;;1818:9:13;:7;:9::i;:::-;1797:103;;;;-1:-1:-1;;;;;1797:103:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2069:14;;:18;2065:1091;;2278:19;2365:8;;2327:64;;;;;;;30:3:-1;22:6;14;1:33;2327:64:13;;;45:16:-1;;;;26:21;;;-1:-1;;22:32;6:49;;2327:64:13;;2300:105;;49:4:-1;2300:105:13;;;;2420:24;2447:31;;;:18;:31;;;;;;;2300:105;;-1:-1:-1;2447:31:13;;-1:-1:-1;;;2583:21:13;;2579:293;;-1:-1:-1;2579:293:13;;2658:15;2624:18;:31;2643:11;2624:31;;;;;;;;;;;:49;;;;2736:11;2697:135;2769:15;2806:8;;2697:135;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;81:16;;;74:27;2697:135:13;;137:4:-1;117:14;;;-1:-1;;113:30;157:16;;;2697:135:13;;;;-1:-1:-1;2697:135:13;;-1:-1:-1;;;;;2697:135:13;2851:7;;;;2579:293;2951:14;;2930:36;;:16;;:36;:20;:36;:::i;:::-;2911:15;:55;;2886:168;;;;-1:-1:-1;;;;;2886:168:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3143:1:13;3109:31;;;:18;:31;;;;;:35;2065:1091;-1:-1:-1;;;;;4620:30:10;;;4662:1;4620:30;;;:15;:30;;;;;;;4599:161;;;;-1:-1:-1;;;;;4599:161:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4830:30:10;;;;;;;:15;:30;;;;;;;;;:47;;-1:-1:-1;;;;;;4830:47:10;;;;;;;;;4893:85;;;;;;;;;;;;;;;;;;;;;;;;4428:557;;:::o;659:77:28:-;697:7;723:6;-1:-1:-1;;;;;723:6:28;659:77;;:::o;979:90::-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:28;1042:10;:20;;979:90::o;4099:398:13:-;863:9:28;:7;:9::i;:::-;855:18;;;;;;4348:14:13;;4330:15;:32;4309:138;;;;-1:-1:-1;;;;;4309:138:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4458:14;:32;4099:398::o;3428:444::-;863:9:28;:7;:9::i;:::-;855:18;;;;;;3568:32:13;;;;:18;:32;;;;;;3547:158;;;;-1:-1:-1;;;;;3547:158:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3787:1;3752:32;;;:18;:32;;;;;;:36;;;3804:59;3771:12;;3804:59;;;3428:444;:::o;5112:128:10:-;5185:16;5224:9;5217:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5217:16:10;;;;;;;;;;;;;;;;;;;;;;;5112:128;:::o;1131:26::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1131:26:10;;-1:-1:-1;1131:26:10;:::o;1731:107:28:-;863:9;:7;:9::i;:::-;855:18;;;;;;1803:28;1822:8;1803:18;:28::i;:::-;1731:107;:::o;3663:518:10:-;863:9:28;:7;:9::i;:::-;855:18;;;;;;-1:-1:-1;;;;;3804:30:10;;;3780:21;3804:30;;;:15;:30;;;;;;;3866:27;3845:154;;;;-1:-1:-1;;;;;3845:154:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4022:31;4039:13;4022:9;:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4022:16:10;;;;;;;;;;;;;;;;;;;;;;;:31;;;;:::i;:::-;4010:43;;;;:9;;:43;;;;;;:::i;:::-;-1:-1:-1;;;;;;4063:30:10;;;4104:1;4063:30;;;:15;:30;;;;;;;;;:43;;-1:-1:-1;;;;;;4063:43:10;;;4122:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;883:1:28;3663:518:10;:::o;1439:145:27:-;1497:7;1528:5;;;1551:6;;;;1543:15;;;;;;1576:1;1439:145;-1:-1:-1;;;1439:145:27:o;1982:183:28:-;-1:-1:-1;;;;;2055:22:28;;2047:31;;;;;;2114:6;;;2093:38;;-1:-1:-1;;;;;2093:38:28;;;;2114:6;;;2093:38;;;2141:6;:17;;-1:-1:-1;;;;;;2141:17:28;-1:-1:-1;;;;;2141:17:28;;;;;;;;;;1982:183::o;5536:320:1:-;5630:16;5663:13;5678:9;5691:13;5699:1;5702;5691:7;:13::i;:::-;5662:42;;;;5719:4;5714:136;;5739:8;;;5714:136;5779:19;5803:13;5807:1;5810:5;5803:3;:13::i;:::-;-1:-1:-1;5778:38:1;-1:-1:-1;5830:9:1;;-1:-1:-1;;;5830:9:1;509:289;622:8;;580:7;;;;;640:125;664:6;660:1;:10;640:125;;;703:1;-1:-1:-1;;;;;695:9:1;:1;697;695:4;;;;;;;;;;;;;;-1:-1:-1;;;;;695:9:1;;691:64;;;732:1;-1:-1:-1;735:4:1;;-1:-1:-1;724:16:1;;-1:-1:-1;724:16:1;691:64;672:3;;640:125;;;-1:-1:-1;782:1:1;;-1:-1:-1;782:1:1;;-1:-1:-1;;509:289:1;;;;;;:::o;5004:473::-;5099:16;5117:7;5140:14;5157:1;:8;5140:25;;5175:29;5230:1;5221:6;:10;5207:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;5207:25:1;-1:-1:-1;5175:57:1;-1:-1:-1;5247:9:1;5242:83;5266:5;5262:1;:9;5242:83;;;5310:1;5312;5310:4;;;;;;;;;;;;;;5292:12;5305:1;5292:15;;;;;;;;-1:-1:-1;;;;;5292:22:1;;;:15;;;;;;;;;;;:22;5273:3;;5242:83;;;-1:-1:-1;5359:1:1;5351:9;;5334:96;5366:6;5362:1;:10;5334:96;;;5415:1;5417;5415:4;;;;;;;;;;;;;;5393:12;5410:1;5406;:5;5393:19;;;;;;;;-1:-1:-1;;;;;5393:26:1;;;:19;;;;;;;;;;;:26;5374:3;;5334:96;;;;5447:12;5461:1;5463:5;5461:8;;;;;;;;;;;;;;5439:31;;;;;;5004:473;;;;;:::o;965:7071:10:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;965:7071:10;-1:-1:-1;;;;;965:7071:10;;;;;;;;;;;-1:-1:-1;965:7071:10;;;;;;;-1:-1:-1;965:7071:10;;;-1:-1:-1;965:7071:10;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;;965:7071:10;;;;;;", "source": "/*\n    Copyright 2019 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\npragma solidity 0.5.7;\n\n\nimport { Ownable } from \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\n\nimport { TimeLockUpgradeV2 } from \"./TimeLockUpgradeV2.sol\";\nimport { AddressArrayUtils } from \"./AddressArrayUtils.sol\";\n\n\n/**\n * @title OracleWhiteList\n * @author Set Protocol\n *\n * WhiteList that matches whitelisted tokens to their on chain price oracle\n */\ncontract OracleWhiteList is\n    Ownable,\n    TimeLockUpgradeV2\n{\n    using AddressArrayUtils for address[];\n\n    /* ============ State Variables ============ */\n\n    address[] public addresses;\n    mapping(address => address) public oracleWhiteList;\n\n    /* ============ Events ============ */\n\n    event TokenOraclePairAdded(\n        address _tokenAddress,\n        address _oracleAddress\n    );\n\n    event TokenOraclePairRemoved(\n        address _tokenAddress,\n        address _oracleAddress\n    );\n\n    /* ============ Constructor ============ */\n\n    /**\n     * Constructor function for OracleWhiteList\n     *\n     * Allow initial addresses to be passed in so a separate transaction is not required for each.\n     * Each token address passed is matched with a corresponding oracle address at the same index.\n     * The _initialTokenAddresses and _initialOracleAddresses arrays must be equal length.\n     *\n     * @param _initialTokenAddresses        Starting set of toke addresses to whitelist\n     * @param _initialOracleAddresses       Starting set of oracle addresses to whitelist\n     */\n    constructor(\n        address[] memory _initialTokenAddresses,\n        address[] memory _initialOracleAddresses\n    )\n        public\n    {\n        require(\n            _initialTokenAddresses.length == _initialOracleAddresses.length,\n            \"OracleWhiteList.constructor: Token and Oracle array lengths must match.\"\n        );\n\n        // Add each of initial addresses to state\n        for (uint256 i = 0; i < _initialTokenAddresses.length; i++) {\n            address tokenAddressToAdd = _initialTokenAddresses[i];\n\n            addresses.push(tokenAddressToAdd);\n            oracleWhiteList[tokenAddressToAdd] = _initialOracleAddresses[i];\n        }\n    }\n\n    /* ============ External Functions ============ */\n\n    /**\n     * Add an address to the whitelist\n     *\n     * @param _tokenAddress    Token address to add to the whitelist\n     * @param _oracleAddress   Oracle address to add to the whitelist under _tokenAddress\n     */\n    function addTokenOraclePair(\n        address _tokenAddress,\n        address _oracleAddress\n    )\n        external\n        onlyOwner\n        timeLockUpgrade\n    {\n        require(\n            oracleWhiteList[_tokenAddress] == address(0),\n            \"OracleWhiteList.addTokenOraclePair: Token and Oracle pair already exists.\"\n        );\n\n        addresses.push(_tokenAddress);\n        oracleWhiteList[_tokenAddress] = _oracleAddress;\n\n        emit TokenOraclePairAdded(_tokenAddress, _oracleAddress);\n    }\n\n    /**\n     * Remove a token oracle pair from the whitelist\n     *\n     * @param _tokenAddress    Token address to remove to the whitelist\n     */\n    function removeTokenOraclePair(\n        address _tokenAddress\n    )\n        external\n        onlyOwner\n    {\n        address oracleAddress = oracleWhiteList[_tokenAddress];\n\n        require(\n            oracleAddress != address(0),\n            \"OracleWhiteList.removeTokenOraclePair: Token Address is not current whitelisted.\"\n        );\n\n        addresses = addresses.remove(_tokenAddress);\n        oracleWhiteList[_tokenAddress] = address(0);\n\n        emit TokenOraclePairRemoved(_tokenAddress, oracleAddress);\n    }\n\n    /**\n     * Edit oracle address associated with a token address\n     *\n     * @param _tokenAddress    Token address to add to the whitelist\n     * @param _oracleAddress   Oracle address to add to the whitelist under _tokenAddress\n     */\n    function editTokenOraclePair(\n        address _tokenAddress,\n        address _oracleAddress\n    )\n        external\n        onlyOwner\n        timeLockUpgrade\n    {\n        require(\n            oracleWhiteList[_tokenAddress] != address(0),\n            \"OracleWhiteList.editTokenOraclePair: Token and Oracle pair must exist.\"\n        );\n\n        // Set new oracle address for passed token address\n        oracleWhiteList[_tokenAddress] = _oracleAddress;\n\n        emit TokenOraclePairAdded(\n            _tokenAddress,\n            _oracleAddress\n        );\n    }\n\n    /**\n     * Return array of all whitelisted addresses\n     *\n     * @return address[]      Array of addresses\n     */\n    function validAddresses()\n        external\n        view\n        returns (address[] memory)\n    {\n        return addresses;\n    }\n\n    /**\n     * Return array of oracle addresses based on passed in token addresses \n     *\n     * @param  _tokenAddresses    Array of token addresses to get oracle addresses for\n     * @return address[]          Array of oracle addresses\n     */\n    function getOracleAddressesByToken(\n        address[] calldata _tokenAddresses\n    )\n        external\n        view\n        returns (address[] memory)\n    {\n        // Get length of passed array\n        uint256 arrayLength = _tokenAddresses.length;\n\n        // Check that passed array length is greater than 0\n        require(\n            arrayLength > 0,\n            \"OracleWhiteList.getOracleAddressesByToken: Array length must be greater than 0.\"\n        );\n\n        // Instantiate oracle addresses array\n        address[] memory oracleAddresses = new address[](arrayLength);\n\n        for (uint256 i = 0; i < arrayLength; i++) {\n            // Get oracle address for token address at index i\n            oracleAddresses[i] = getOracleAddressByToken(\n                _tokenAddresses[i]\n            );\n        }\n\n        return oracleAddresses;       \n    }\n\n    /**\n     * Return oracle address associated with a passed token address \n     *\n     * @param  _tokenAddress    Address of token\n     * @return address          Address of oracle associated with token\n     */\n    function getOracleAddressByToken(\n        address _tokenAddress\n    )\n        public\n        view\n        returns (address)\n    {\n        // Require token address to have matching oracle address\n        require(\n            oracleWhiteList[_tokenAddress] != address(0),\n            \"OracleWhiteList.getOracleAddressFromToken: No Oracle for that address.\"\n        );\n\n        // Return oracle address associated with token address\n        return oracleWhiteList[_tokenAddress];       \n    }\n\n    /**\n     * Verifies an array of addresses against the whitelist\n     *\n     * @param  _tokenAddresses    Array of token addresses to check if oracle exists\n     * @return bool               Whether all addresses in the list are whitelsited\n     */\n    function areValidAddresses(\n        address[] calldata _tokenAddresses\n    )\n        external\n        view\n        returns (bool)\n    {\n        // Get length of passed array\n        uint256 arrayLength = _tokenAddresses.length;\n\n        // Check that passed array length is greater than 0\n        require(\n            arrayLength > 0,\n            \"OracleWhiteList.areValidAddresses: Array length must be greater than 0.\"\n        );\n\n        for (uint256 i = 0; i < arrayLength; i++) {\n            // Return false if token address doesn't have matching oracle address\n            if (oracleWhiteList[_tokenAddresses[i]] == address(0)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n\n}", "sourcePath": "/Users/justin_chen/Dropbox/workspace/set-protocol-contract-utils/contracts/lib/OracleWhiteList.sol", "compiler": { "name": "solc", "version": "0.5.7+commit.6da8b019.Linux.g++" }, "networks": {}, "schemaVersion": "3.0.23", "updatedAt": "2020-05-04T03:14:12.147Z", "devdoc": { "author": "Set Protocol * WhiteList that matches whitelisted tokens to their on chain price oracle", "methods": { "addTokenOraclePair(address,address)": { "params": { "_oracleAddress": "Oracle address to add to the whitelist under _tokenAddress", "_tokenAddress": "Token address to add to the whitelist" } }, "areValidAddresses(address[])": { "params": { "_tokenAddresses": "Array of token addresses to check if oracle exists" }, "return": "bool               Whether all addresses in the list are whitelsited" }, "constructor": { "params": { "_initialOracleAddresses": "Starting set of oracle addresses to whitelist", "_initialTokenAddresses": "Starting set of toke addresses to whitelist" } }, "editTokenOraclePair(address,address)": { "params": { "_oracleAddress": "Oracle address to add to the whitelist under _tokenAddress", "_tokenAddress": "Token address to add to the whitelist" } }, "getOracleAddressByToken(address)": { "params": { "_tokenAddress": "Address of token" }, "return": "address          Address of oracle associated with token" }, "getOracleAddressesByToken(address[])": { "params": { "_tokenAddresses": "Array of token addresses to get oracle addresses for" }, "return": "address[]          Array of oracle addresses" }, "isOwner()": { "return": "true if `msg.sender` is the owner of the contract." }, "owner()": { "return": "the address of the owner." }, "removeRegisteredUpgrade(bytes32)": { "params": { "_upgradeHash": "Keccack256 hash that uniquely identifies function called and arguments " } }, "removeTokenOraclePair(address)": { "params": { "_tokenAddress": "Token address to remove to the whitelist" } }, "renounceOwnership()": { "details": "Allows the current owner to relinquish control of the contract. It will not be possible to call the functions with the `onlyOwner` modifier anymore." }, "setTimeLockPeriod(uint256)": { "params": { "_timeLockPeriod": "Time in seconds that upgrades need to be evaluated before execution" } }, "transferOwnership(address)": { "details": "Allows the current owner to transfer control of the contract to a newOwner.", "params": { "newOwner": "The address to transfer ownership to." } }, "validAddresses()": { "return": "address[]      Array of addresses" } }, "title": "OracleWhiteList" }, "userdoc": { "methods": { "addTokenOraclePair(address,address)": { "notice": "Add an address to the whitelist" }, "areValidAddresses(address[])": { "notice": "Verifies an array of addresses against the whitelist" }, "constructor": "Constructor function for OracleWhiteList     * Allow initial addresses to be passed in so a separate transaction is not required for each. Each token address passed is matched with a corresponding oracle address at the same index. The _initialTokenAddresses and _initialOracleAddresses arrays must be equal length.", "editTokenOraclePair(address,address)": { "notice": "Edit oracle address associated with a token address" }, "getOracleAddressByToken(address)": { "notice": "Return oracle address associated with a passed token address " }, "getOracleAddressesByToken(address[])": { "notice": "Return array of oracle addresses based on passed in token addresses " }, "removeRegisteredUpgrade(bytes32)": { "notice": "Removes an existing upgrade." }, "removeTokenOraclePair(address)": { "notice": "Remove a token oracle pair from the whitelist" }, "renounceOwnership()": { "notice": "Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner." }, "setTimeLockPeriod(uint256)": { "notice": "Change timeLockPeriod period. Generally called after initially settings have been set up." }, "validAddresses()": { "notice": "Return array of all whitelisted addresses" } } } };
//# sourceMappingURL=OracleWhiteList.js.map