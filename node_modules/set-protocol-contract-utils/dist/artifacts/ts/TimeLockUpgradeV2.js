"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeLockUpgradeV2 = { "contractName": "TimeLockUpgradeV2", "abi": [{ "constant": true, "inputs": [{ "name": "", "type": "bytes32" }], "name": "timeLockedUpgrades", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [], "name": "renounceOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": true, "inputs": [], "name": "timeLockPeriod", "outputs": [{ "name": "", "type": "uint256" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "owner", "outputs": [{ "name": "", "type": "address" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "isOwner", "outputs": [{ "name": "", "type": "bool" }], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [{ "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_upgradeHash", "type": "bytes32" }, { "indexed": false, "name": "_timestamp", "type": "uint256" }, { "indexed": false, "name": "_upgradeData", "type": "bytes" }], "name": "UpgradeRegistered", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "_upgradeHash", "type": "bytes32" }], "name": "RemoveRegisteredUpgrade", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "name": "previousOwner", "type": "address" }, { "indexed": true, "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" }, { "constant": false, "inputs": [{ "name": "_upgradeHash", "type": "bytes32" }], "name": "removeRegisteredUpgrade", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [{ "name": "_timeLockPeriod", "type": "uint256" }], "name": "setTimeLockPeriod", "outputs": [], "payable": false, "stateMutability": "nonpayable", "type": "function" }], "metadata": "{\"compiler\":{\"version\":\"0.5.7+commit.6da8b019\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"timeLockedUpgrades\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeLockPeriod\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_timeLockPeriod\",\"type\":\"uint256\"}],\"name\":\"setTimeLockPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradeHash\",\"type\":\"bytes32\"}],\"name\":\"removeRegisteredUpgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_upgradeHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"_upgradeData\",\"type\":\"bytes\"}],\"name\":\"UpgradeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_upgradeHash\",\"type\":\"bytes32\"}],\"name\":\"RemoveRegisteredUpgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Set Protocol * The TimeLockUpgradeV2 contract contains a modifier for handling minimum time period updates * CHANGELOG: - Requires that the caller is the owner - New function to allow deletion of existing timelocks - Added upgradeData to UpgradeRegistered event\",\"methods\":{\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"owner()\":{\"return\":\"the address of the owner.\"},\"removeRegisteredUpgrade(bytes32)\":{\"params\":{\"_upgradeHash\":\"Keccack256 hash that uniquely identifies function called and arguments \"}},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"},\"setTimeLockPeriod(uint256)\":{\"params\":{\"_timeLockPeriod\":\"Time in seconds that upgrades need to be evaluated before execution\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}},\"title\":\"TimeLockUpgradeV2\"},\"userdoc\":{\"methods\":{\"removeRegisteredUpgrade(bytes32)\":{\"notice\":\"Removes an existing upgrade.\"},\"renounceOwnership()\":{\"notice\":\"Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setTimeLockPeriod(uint256)\":{\"notice\":\"Change timeLockPeriod period. Generally called after initially settings have been set up.\"}}}},\"settings\":{\"compilationTarget\":{\"/Users/justin_chen/Dropbox/workspace/set-protocol-contract-utils/contracts/lib/TimeLockUpgradeV2.sol\":\"TimeLockUpgradeV2\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/justin_chen/Dropbox/workspace/set-protocol-contract-utils/contracts/lib/TimeLockUpgradeV2.sol\":{\"keccak256\":\"0x7c8188e262d4db7d352130c56c0eab85a6f9f89afb5fe08efe49084557e3e600\",\"urls\":[\"bzzr://5b0a3762af16f66a60bdb9cc1bcb14a7066bd3c54dd80c6333a9f07118800340\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xc2a200a877c4a9b2475c246c54ffecc69ffde3e11af83319c63c2dc5458bac80\",\"urls\":[\"bzzr://c8876e2c39b60f155d748d71d715c8f3903fae5a405ac599adcb6ad2f9a583f9\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0xcb16adc00dcf0d75e0bdf94379f4d5a6d74dca7c74e4183b94e15721159f8a30\",\"urls\":[\"bzzr://b81e03f7203cd628cfed19255911a04a05e8670d248afb48a7b067dd03b4ff55\"]}},\"version\":1}", "bytecode": "0x6080604081905260008054600160a060020a0319163317808255600160a060020a0316917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3610494806100576000396000f3fe608060405234801561001057600080fd5b50600436106100a5576000357c0100000000000000000000000000000000000000000000000000000000900480638f32d59b116100785780638f32d59b1461010f5780639303b16f1461012b578063cc75c9b014610148578063f2fde38b14610165576100a5565b80631766486d146100aa578063715018a6146100d957806378446bc1146100e35780638da5cb5b146100eb575b600080fd5b6100c7600480360360208110156100c057600080fd5b503561018b565b60408051918252519081900360200190f35b6100e161019d565b005b6100c7610205565b6100f361020b565b60408051600160a060020a039092168252519081900360200190f35b61011761021a565b604080519115158252519081900360200190f35b6100e16004803603602081101561014157600080fd5b503561022b565b6100e16004803603602081101561015e57600080fd5b503561029b565b6100e16004803603602081101561017b57600080fd5b5035600160a060020a031661034b565b60026020526000908152604090205481565b6101a561021a565b6101ae57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60015481565b600054600160a060020a031690565b600054600160a060020a0316331490565b61023361021a565b61023c57600080fd5b6001548111610296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b8152602001806103e4603b913960400191505060405180910390fd5b600155565b6102a361021a565b6102ac57600080fd5b600081815260026020526040902054610310576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604a81526020018061041f604a913960600191505060405180910390fd5b6000818152600260205260408082208290555182917f068cc8f97648f23db94d0e1a707a54447d07effeb11c1c297168aa67321dc4ec91a250565b61035361021a565b61035c57600080fd5b61036581610368565b50565b600160a060020a03811661037b57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fe54696d654c6f636b5570677261646556323a204e657720706572696f64206d7573742062652067726561746572207468616e206578697374696e6754696d654c6f636b5570677261646556322e72656d6f766552656769737465726564557067726164653a20557067726164652068617368206d7573742062652072656769737465726564a165627a7a72305820b378ddcc953fa846593ad122b165a48118327d118e56bb0bb94475dc650715ac0029", "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a5576000357c0100000000000000000000000000000000000000000000000000000000900480638f32d59b116100785780638f32d59b1461010f5780639303b16f1461012b578063cc75c9b014610148578063f2fde38b14610165576100a5565b80631766486d146100aa578063715018a6146100d957806378446bc1146100e35780638da5cb5b146100eb575b600080fd5b6100c7600480360360208110156100c057600080fd5b503561018b565b60408051918252519081900360200190f35b6100e161019d565b005b6100c7610205565b6100f361020b565b60408051600160a060020a039092168252519081900360200190f35b61011761021a565b604080519115158252519081900360200190f35b6100e16004803603602081101561014157600080fd5b503561022b565b6100e16004803603602081101561015e57600080fd5b503561029b565b6100e16004803603602081101561017b57600080fd5b5035600160a060020a031661034b565b60026020526000908152604090205481565b6101a561021a565b6101ae57600080fd5b60008054604051600160a060020a03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b60015481565b600054600160a060020a031690565b600054600160a060020a0316331490565b61023361021a565b61023c57600080fd5b6001548111610296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603b8152602001806103e4603b913960400191505060405180910390fd5b600155565b6102a361021a565b6102ac57600080fd5b600081815260026020526040902054610310576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252604a81526020018061041f604a913960600191505060405180910390fd5b6000818152600260205260408082208290555182917f068cc8f97648f23db94d0e1a707a54447d07effeb11c1c297168aa67321dc4ec91a250565b61035361021a565b61035c57600080fd5b61036581610368565b50565b600160a060020a03811661037b57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fe54696d654c6f636b5570677261646556323a204e657720706572696f64206d7573742062652067726561746572207468616e206578697374696e6754696d654c6f636b5570677261646556322e72656d6f766552656769737465726564557067726164653a20557067726164652068617368206d7573742062652072656769737465726564a165627a7a72305820b378ddcc953fa846593ad122b165a48118327d118e56bb0bb94475dc650715ac0029", "sourceMap": "1108:3391:13:-;;;;;515:6:28;:19;;-1:-1:-1;;;;;;515:19:28;524:10;515:19;;;;-1:-1:-1;;;;;582:6:28;;549:40;;515:6;;549:40;1108:3391:13;;;;;;", "deployedSourceMap": "1108:3391:13:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1108:3391:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1399:53;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1399:53:13;;:::i;:::-;;;;;;;;;;;;;;;;1423:137:28;;;:::i;:::-;;1284:29:13;;;:::i;659:77:28:-;;;:::i;:::-;;;;-1:-1:-1;;;;;659:77:28;;;;;;;;;;;;;;979:90;;;:::i;:::-;;;;;;;;;;;;;;;;;;4099:398:13;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4099:398:13;;:::i;3428:444::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;3428:444:13;;:::i;1731:107:28:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1731:107:28;-1:-1:-1;;;;;1731:107:28;;:::i;1399:53:13:-;;;;;;;;;;;;;:::o;1423:137:28:-;863:9;:7;:9::i;:::-;855:18;;;;;;1521:1;1505:6;;1484:40;;-1:-1:-1;;;;;1505:6:28;;;;1484:40;;1521:1;;1484:40;1551:1;1534:19;;-1:-1:-1;;1534:19:28;;;1423:137::o;1284:29:13:-;;;;:::o;659:77:28:-;697:7;723:6;-1:-1:-1;;;;;723:6:28;659:77;:::o;979:90::-;1019:4;1056:6;-1:-1:-1;;;;;1056:6:28;1042:10;:20;;979:90::o;4099:398:13:-;863:9:28;:7;:9::i;:::-;855:18;;;;;;4348:14:13;;4330:15;:32;4309:138;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4458:14;:32;4099:398::o;3428:444::-;863:9:28;:7;:9::i;:::-;855:18;;;;;;3568:32:13;;;;:18;:32;;;;;;3547:158;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3787:1;3752:32;;;:18;:32;;;;;;:36;;;3804:59;3771:12;;3804:59;;;3428:444;:::o;1731:107:28:-;863:9;:7;:9::i;:::-;855:18;;;;;;1803:28;1822:8;1803:18;:28::i;:::-;1731:107;:::o;1982:183::-;-1:-1:-1;;;;;2055:22:28;;2047:31;;;;;;2114:6;;;2093:38;;-1:-1:-1;;;;;2093:38:28;;;;2114:6;;;2093:38;;;2141:6;:17;;-1:-1:-1;;2141:17:28;-1:-1:-1;;;;;2141:17:28;;;;;;;;;;1982:183::o", "source": "/*\n    Copyright 2018 Set Labs Inc.\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\npragma solidity 0.5.7;\n\nimport { Ownable } from \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\nimport { SafeMath } from \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\n\n\n/**\n * @title TimeLockUpgradeV2\n * @author Set Protocol\n *\n * The TimeLockUpgradeV2 contract contains a modifier for handling minimum time period updates\n *\n * CHANGELOG:\n * - Requires that the caller is the owner\n * - New function to allow deletion of existing timelocks\n * - Added upgradeData to UpgradeRegistered event\n */\ncontract TimeLockUpgradeV2 is\n    Ownable\n{\n    using SafeMath for uint256;\n\n    /* ============ State Variables ============ */\n\n    // Timelock Upgrade Period in seconds\n    uint256 public timeLockPeriod;\n\n    // Mapping of maps hash of registered upgrade to its registration timestam\n    mapping(bytes32 => uint256) public timeLockedUpgrades;\n\n    /* ============ Events ============ */\n\n    event UpgradeRegistered(\n        bytes32 indexed _upgradeHash,\n        uint256 _timestamp,\n        bytes _upgradeData\n    );\n\n    event RemoveRegisteredUpgrade(\n        bytes32 indexed _upgradeHash\n    );\n\n    /* ============ Modifiers ============ */\n\n    modifier timeLockUpgrade() {\n        require(\n            isOwner(),\n            \"TimeLockUpgradeV2: The caller must be the owner\"\n        );\n\n        // If the time lock period is 0, then allow non-timebound upgrades.\n        // This is useful for initialization of the protocol and for testing.\n        if (timeLockPeriod > 0) {\n            // The upgrade hash is defined by the hash of the transaction call data,\n            // which uniquely identifies the function as well as the passed in arguments.\n            bytes32 upgradeHash = keccak256(\n                abi.encodePacked(\n                    msg.data\n                )\n            );\n\n            uint256 registrationTime = timeLockedUpgrades[upgradeHash];\n\n            // If the upgrade hasn't been registered, register with the current time.\n            if (registrationTime == 0) {\n                timeLockedUpgrades[upgradeHash] = block.timestamp;\n\n                emit UpgradeRegistered(\n                    upgradeHash,\n                    block.timestamp,\n                    msg.data\n                );\n\n                return;\n            }\n\n            require(\n                block.timestamp >= registrationTime.add(timeLockPeriod),\n                \"TimeLockUpgradeV2: Time lock period must have elapsed.\"\n            );\n\n            // Reset the timestamp to 0\n            timeLockedUpgrades[upgradeHash] = 0;\n\n        }\n\n        // Run the rest of the upgrades\n        _;\n    }\n\n    /* ============ Function ============ */\n\n    /**\n     * Removes an existing upgrade.\n     *\n     * @param  _upgradeHash    Keccack256 hash that uniquely identifies function called and arguments \n     */\n    function removeRegisteredUpgrade(\n        bytes32 _upgradeHash \n    )\n        external\n        onlyOwner\n    {\n        require(\n            timeLockedUpgrades[_upgradeHash] != 0,\n            \"TimeLockUpgradeV2.removeRegisteredUpgrade: Upgrade hash must be registered\"\n        );\n\n        // Reset the timestamp to 0\n        timeLockedUpgrades[_upgradeHash] = 0;\n\n        emit RemoveRegisteredUpgrade(\n            _upgradeHash\n        );  \n    }\n\n    /**\n     * Change timeLockPeriod period. Generally called after initially settings have been set up.\n     *\n     * @param  _timeLockPeriod   Time in seconds that upgrades need to be evaluated before execution\n     */\n    function setTimeLockPeriod(\n        uint256 _timeLockPeriod\n    )\n        external\n        onlyOwner\n    {\n        // Only allow setting of the timeLockPeriod if the period is greater than the existing\n        require(\n            _timeLockPeriod > timeLockPeriod,\n            \"TimeLockUpgradeV2: New period must be greater than existing\"\n        );\n\n        timeLockPeriod = _timeLockPeriod;\n    }\n}\n", "sourcePath": "/Users/justin_chen/Dropbox/workspace/set-protocol-contract-utils/contracts/lib/TimeLockUpgradeV2.sol", "compiler": { "name": "solc", "version": "0.5.7+commit.6da8b019.Linux.g++" }, "networks": {}, "schemaVersion": "3.0.23", "updatedAt": "2020-05-04T03:14:12.157Z", "devdoc": { "author": "Set Protocol * The TimeLockUpgradeV2 contract contains a modifier for handling minimum time period updates * CHANGELOG: - Requires that the caller is the owner - New function to allow deletion of existing timelocks - Added upgradeData to UpgradeRegistered event", "methods": { "isOwner()": { "return": "true if `msg.sender` is the owner of the contract." }, "owner()": { "return": "the address of the owner." }, "removeRegisteredUpgrade(bytes32)": { "params": { "_upgradeHash": "Keccack256 hash that uniquely identifies function called and arguments " } }, "renounceOwnership()": { "details": "Allows the current owner to relinquish control of the contract. It will not be possible to call the functions with the `onlyOwner` modifier anymore." }, "setTimeLockPeriod(uint256)": { "params": { "_timeLockPeriod": "Time in seconds that upgrades need to be evaluated before execution" } }, "transferOwnership(address)": { "details": "Allows the current owner to transfer control of the contract to a newOwner.", "params": { "newOwner": "The address to transfer ownership to." } } }, "title": "TimeLockUpgradeV2" }, "userdoc": { "methods": { "removeRegisteredUpgrade(bytes32)": { "notice": "Removes an existing upgrade." }, "renounceOwnership()": { "notice": "Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner." }, "setTimeLockPeriod(uint256)": { "notice": "Change timeLockPeriod period. Generally called after initially settings have been set up." } } } };
//# sourceMappingURL=TimeLockUpgradeV2.js.map